{
    "abstractText": "Nearly all previous work on neural machine translation (NMT) has used quite restricted vocabularies, perhaps with a subsequent method to patch in unknown words. This paper presents a novel wordcharacter solution to achieving open vocabulary NMT. We build hybrid systems that translate mostly at theword level and consult thecharacter components for rare words. Our character-level recurrent neural networks compute source word representations and recover unknown target words when needed. The twofold advantage of such a hybrid approach is that it is much faster and easier to train than character-based ones; at the same time, it never produces unknown words as in the case of word-based models. On the WMT\u201915 English to Czech translation task, this hybrid approach offers an addition boost of +2.1\u221211.4 BLEU points over models that already handle unknown words. Our best system achieves a new state-of-the-art result with20.7 BLEU score. We demonstrate that our character models can successfully learn to not only generate well-formed words for Czech, a highly-inflected language with a very complex vocabulary, but also build correct representations for English source words.",
    "authors": [],
    "id": "SP:c32e71b5f649fcb3b40e9c1b0cfb77e01c8cca9e",
    "references": [
        {
            "authors": [
                "Kyunghyun Cho",
                "Yoshua Bengio"
            ],
            "title": "Neural machine translation by jointly learning to align and translate",
            "venue": "In ICLR",
            "year": 2015
        },
        {
            "authors": [
                "Jan Chorowski",
                "Dmitriy Serdyuk",
                "Philemon Brakel",
                "Yoshua Bengio"
            ],
            "title": "End-to-end attention-based large vocabulary speech recognition",
            "year": 2016
        },
        {
            "authors": [
                "Chris Dyer",
                "Noah A. Smith"
            ],
            "title": "Improved transitionbased parsing by modeling characters instead of words with LSTMs. InEMNLP",
            "year": 2015
        },
        {
            "authors": [
                "r\u0306ej Bojar",
                "Al\u0115s Tamchyna"
            ],
            "title": "CUNI in WMT15: Chimera Strikes Again",
            "year": 2015
        },
        {
            "authors": [
                "Chan et al.2016] William Chan",
                "Navdeep Jaitly",
                "Quoc V. Le",
                "Oriol Vinyals"
            ],
            "title": "Listen, attend and spell. InICASSP",
            "year": 2016
        },
        {
            "authors": [
                "Cho et al.2014] Kyunghyun Cho",
                "Bart van Merrienboer",
                "Caglar Gulcehre",
                "Fethi Bougares",
                "Holger Schwenk",
                "Yoshua Bengio"
            ],
            "title": "Learning phrase representations using RNN encoder-decoder for statistical machine translation",
            "year": 2014
        },
        {
            "authors": [
                "dos Santos",
                "Bianca Zadrozny"
            ],
            "title": "Learning character-level representations for part-of-speech tagging. InICML",
            "year": 2014
        },
        {
            "authors": [
                "Hochreiter",
                "Schmidhuber1997] Sepp Hochreiter",
                "J\u00fcrgen Schmidhuber"
            ],
            "title": "Long short-term memory",
            "year": 1997
        },
        {
            "authors": [
                "Jean et al.2015a] S\u00e9bastien Jean",
                "Kyunghyun Cho",
                "Roland Memisevic",
                "Yoshua Bengio"
            ],
            "title": "On using very large target vocabulary for neural machine translation. InACL",
            "year": 2015
        },
        {
            "authors": [
                "Jean et al.2015b] S\u00e9bastien Jean",
                "Orhan Firat",
                "Kyunghyun Cho",
                "Roland Memisevic",
                "Yoshua Bengio"
            ],
            "title": "2015b. Montreal neural machine translation systems for WMT\u201915. InWMT",
            "year": 2015
        },
        {
            "authors": [
                "Oriol Vinyals",
                "Mike Schuster",
                "Noam Shazeer",
                "Yonghui Wu"
            ],
            "title": "Exploring the limits of language modeling",
            "year": 2016
        },
        {
            "authors": [
                "Kalchbrenner",
                "Blunsom2013] Nal Kalchbrenner",
                "Phil Blunsom"
            ],
            "title": "Recurrent continuous translation models. InEMNLP",
            "year": 2013
        },
        {
            "authors": [
                "Kim et al.2016] Yoon Kim",
                "Yacine Jernite",
                "David Sontag",
                "Alexander M. Rush"
            ],
            "title": "Characteraware neural language models",
            "year": 2016
        },
        {
            "authors": [
                "Li et al.2015] Jiwei Li",
                "Minh-Thang Luong",
                "Dan Jurafsky"
            ],
            "title": "A hierarchical neural autoencoder for paragraphs and documents",
            "year": 2015
        },
        {
            "authors": [
                "Liang et al.2006] Percy Liang",
                "Ben Taskar",
                "Dan Klein"
            ],
            "title": "Alignment by agreement",
            "year": 2006
        },
        {
            "authors": [
                "Ling et al.2015a] Wang Ling",
                "Chris Dyer",
                "Alan W. Black",
                "Isabel Trancoso",
                "Ramon Fermandez",
                "Silvio Amir",
                "Lu\u00eds Marujo",
                "Tiago Lu\u00eds"
            ],
            "title": "Finding function in form: Compositional character models for open vocabulary word representation",
            "year": 2015
        },
        {
            "authors": [
                "Ling et al.2015b] Wang Ling",
                "Isabel Trancoso",
                "Chris Dyer",
                "Alan Black"
            ],
            "title": "Character-based neural machine translation",
            "year": 2015
        },
        {
            "authors": [
                "Luong",
                "Manning2015] Minh-Thang Luong",
                "Christopher D. Manning"
            ],
            "title": "Stanford neural machine translation systems for spoken language domain. InIWSLT",
            "year": 2015
        },
        {
            "authors": [
                "Richard Socher",
                "Christopher D. Manning"
            ],
            "title": "Better word representations with recursive neural networks for morphology. InCoNLL",
            "year": 2013
        },
        {
            "authors": [
                "Hieu Pham",
                "Christopher D. Manning"
            ],
            "title": "Effective approaches to attention-based neural machine translation",
            "year": 2015
        },
        {
            "authors": [
                "Ilya Sutskever",
                "Quoc V. Le",
                "Oriol Vinyals",
                "Wojciech Zaremba"
            ],
            "title": "Addressing the rare word problem in neural machine translation",
            "year": 2015
        },
        {
            "authors": [
                "Salim Roukos",
                "Todd Ward",
                "Wei jing Zhu"
            ],
            "title": "Bleu: a method for automatic evaluation of machine translation. InACL",
            "year": 2002
        },
        {
            "authors": [
                "Richard Socher",
                "Christopher D. Manning"
            ],
            "title": "Glove: Global vectors for word representation",
            "year": 2014
        },
        {
            "authors": [
                "Pham et al.2014] Vu Pham",
                "Th\u00e9odore Bluche",
                "Christopher Kermorvant",
                "J\u00e9r\u00f4me Louradour"
            ],
            "title": "Dropout improves recurrent neural networks for handwriting recognition. InICFHR",
            "year": 2014
        },
        {
            "authors": [
                "Barry Haddow",
                "Alexandra Birch"
            ],
            "title": "Neural machine translation of rare words with subword units",
            "year": 2016
        },
        {
            "authors": [
                "Oriol Vinyals",
                "Quoc V. Le"
            ],
            "title": "Sequence to sequence learning with neural networks. InNIPS",
            "year": 2014
        },
        {
            "authors": [
                "Ilya Sutskever",
                "Oriol Vinyals"
            ],
            "title": "Recurrent neural network regularization",
            "year": 2014
        },
        {
            "authors": [
                "Zhang et al.2015] Xiang Zhang",
                "Junbo Zhao",
                "Yann LeCun"
            ],
            "title": "Character-level convolutional networks for text classification. InNIPS",
            "year": 2015
        }
    ],
    "sections": [
        {
            "text": "ar X\niv :1\n60 4.\n00 78\n8v 2\n[c s.\nC L]\n2 3\nJu n\n20 16\nNearly all previous work on neural machine translation (NMT) has used quite restricted vocabularies, perhaps with a subsequent method to patch in unknown words. This paper presents a novel wordcharacter solution to achieving open vocabulary NMT. We build hybrid systems that translate mostly at theword level and consult thecharacter components for rare words. Our character-level recurrent neural networks compute source word representations and recover unknown target words when needed. The twofold advantage of such a hybrid approach is that it is much faster and easier to train than character-based ones; at the same time, it never produces unknown words as in the case of word-based models. On the WMT\u201915 English to Czech translation task, this hybrid approach offers an addition boost of +2.1\u221211.4 BLEU points over models that already handle unknown words. Our best system achieves a new state-of-the-art result with20.7 BLEU score. We demonstrate that our character models can successfully learn to not only generate well-formed words for Czech, a highly-inflected language with a very complex vocabulary, but also build correct representations for English source words."
        },
        {
            "heading": "1 Introduction",
            "text": "Neural Machine Translation (NMT) is a simple new architecture for getting machines to translate. At its core, NMT is a single deep neural network that is trained end-to-end with several advantages such as simplicity and generalization. Despite being relatively new,\nFigure 1: Hybrid NMT \u2013 example of a wordcharacter model for translating \u201ca cute cat\u201d into \u201cun joli chat\u201d. Hybrid NMT translates at the word level. For rare tokens, the character-level components build source representations and recover target<unk>. \u201c_\u201d marks sequence boundaries.\nNMT has already achieved state-of-the-art translation results for several language pairs such as English-French (Luong et al., 2015b), EnglishGerman (Jean et al., 2015a; Luong et al., 2015a; Luong and Manning, 2015), and English-Czech (Jean et al., 2015b).\nWhile NMT offers many advantages over traditional phrase-based approaches, such as small memory footprint and simple decoder implementation, nearly all previous work in NMT has used quite restricted vocabularies, crudely treating all other words the same with an<unk> symbol. Sometimes, a post-processing step that patches in unknown words is introduced to alleviate this\nproblem. Luong et al. (2015b) propose to annotate occurrences of target<unk> with positional information to track their alignments, after which simple word dictionary lookup or identity copy can be performed to replace<unk> in the translation. Jean et al. (2015a) approach the problem similarly but obtain the alignments for unknown words from the attention mechanism. We refer to these as the unk replacement technique.\nThough simple, these approaches ignore several important properties of languages. First, monolingually, words are morphologically related; however, they are currently treated as independent entities. This is problematic as pointed out by Luong et al. (2013): neural networks can learn good representations for frequent words such as \u201cdistinct\u201d, but fail for rarebut-related words like \u201cdistinctiveness\u201d. Second, crosslingually, languages have different alphabets, so one cannot na\u00efvely memorize all possible surface word translations such as name transliteration between \u201cChristopher\u201d (English) and \u201cKrys\u0306tof\u201d (Czech). See more on this problem in (Sennrich et al., 2016).\nTo overcome these shortcomings, we propose a novel hybrid architecture for NMT that translates mostly at the word level and consults the character components for rare words when necessary. As illustrated in Figure 1, our hybrid model consists of a word-based NMT that performs most of the translation job, except for the two (hypothetically) rare words, \u201ccute\u201d and \u201cjoli\u201d, that are handled separately. On thesource side, representations for rare words, \u201ccute\u201d, are computed on-thefly using a deep recurrent neural network that operates at the character level. On thetarget side, we have a separate model that recovers the surface forms, \u201cjoli\u201d, of<unk> tokens character-bycharacter. These components are learned jointly end-to-end, removing the need for a separate unk replacement step as in current NMT practice.\nOur hybrid NMT offers a twofold advantage: it is much faster and easier to train than characterbased models; at the same time, it never produces unknown words as in the case of word-based ones. We demonstrate at scale that on the WMT\u201915 English to Czech translation task, such a hybrid approach provides an additional boost of +2.1\u221211.4 BLEU points over models that already handle unknown words. We achieve a new state-of-theart result with20.7 BLEU score. Our analysis\ndemonstrates that our character models can successfully learn to not only generate well-formed words for Czech, a highly-inflected language with a very complex vocabulary, but also build correct representations for English source words.\nWe provide code, data, and models at http://nlp.stanford.edu/projects/nmt."
        },
        {
            "heading": "2 Related Work",
            "text": "There has been a recent line of work on end-to-end character-based neural models which achieve good results for part-of-speech tagging (dos Santos and Zadrozny, 2014; Ling et al., 2015a), dependency parsing (Ballesteros et al., 2015), text classification (Zhang et al., 2015), speech recognition (Chan et al., 2016; Bahdanau et al., 2016), and language modeling (Kim et al., 2016; Jozefowicz et al., 2016). However, success has not been shown for cross-lingual tasks such as machine translation.1 Sennrich et al. (2016) propose to segment words into smaller units and translate just like at the word level, which does not learn to understand relationships among words.\nOur work takes inspiration from (Luong et al., 2013) and (Li et al., 2015). Similar to the former, we build representations for rare words on-the-fly from subword units. However, we utilize recurrent neural networks with characters as the basic units; whereas Luong et al. (2013) use recursive neural networks with morphemes as units, which requires existence of a morphological analyzer. In comparison with (Li et al., 2015), our hybrid architecture is also a hierarchical sequence-to-sequence model, but operates at a different granularity level, word-character. In contrast, Li et al. (2015) build hierarchical models at the sentence-word level for paragraphs and documents."
        },
        {
            "heading": "3 Background & Our Models",
            "text": "Neural machine translation aims to directly model the conditional probabilityp(y|x) of translating a source sentence,x1, . . . , xn, to a target sentence,y1, . . . , ym. It accomplishes this goal through anencoder-decoder\n1Recently, Ling et al. (2015b) attempt character-level NMT; however, the experimental evidence is weak. The authors demonstrate only small improvements over word-level baselines and acknowledge that there are no differences of significance. Furthermore, only small datasets were used without comparable results from past NMT work.\nframework (Kalchbrenner and Blunsom, 2013; Sutskever et al., 2014; Cho et al., 2014). Theencoder computes a representations for each source sentence. Based on that source representation, the decoder generates a translation, one target word at a time, and hence, decomposes the log conditional probability as:\nlog p(y|x) = \u2211m\nt=1 log p (yt|y<t, s) (1)\nA natural model for sequential data is the recurrent neural network (RNN), used by most of the recent NMT work. Papers, however, differ in terms of: (a) architecture \u2013 from unidirectional, to bidirectional, and deep multi-layer RNNs; and (b) RNN type \u2013 which are long short-term memory (LSTM) (Hochreiter and Schmidhuber, 1997) and the gated recurrent unit (Cho et al., 2014). All our models utilize thedeep multi-layer architecture withLSTM as the recurrent unit; detailed formulations are in (Zaremba et al., 2014).\nConsidering the top recurrent layer in a deep LSTM, with ht being the current target hidden state as in Figure 2, one can compute the probability of decoding each target wordyt as:\np (yt|y<t, s) = softmax (ht) (2)\nFor a parallel corpusD, we train our model by minimizing the below cross-entropy loss:\nJ = \u2211\n(x,y)\u2208D \u2212 log p(y|x) (3)\nAttention Mechanism \u2013 The early NMT approaches (Sutskever et al., 2014; Cho et al., 2014), which we have described above, use only the last encoder state to initialize the decoder, i.e., setting the input representations i Eq. (1) to[h\u0304n]. Recently, Bahdanau et al. (2015) propose anattention mechanism, a form of random access memory for NMT to cope with long input sequences. Luong et al. (2015a) further extend the attention mechanism to different scoring functions, used to compare source and target hidden states, as well as different strategies to place the attention. In all our models, we utilize the global attention mechanism and thebilinear form for the attention scoring function similar to (Luong et al., 2015a).\nSpecifically, we sets in Eq. (1) to the set of source hidden states at the top layer,[h\u03041, . . . , h\u0304n]. As illustrated in Figure 2, the attention mechanism consists of two stages: (a)context vector \u2013 the\ncurrent hidden stateht is compared with individual source hidden states ins to learn an alignment vector, which is then used to compute the context vectorct as a weighted average ofs; and (b)attentional hidden state \u2013 the context vectorct is then used to derive a new attentional hidden state:\nh\u0303t = tanh(W[ct;ht]) (4)\nThe attentional vector\u0303ht then replacesht in Eq. (2) in predicting the next word."
        },
        {
            "heading": "4 Hybrid Neural Machine Translation",
            "text": "Our hybrid architecture, illustrated in Figure 1, leverages the power of both words and characters to achieve the goal of open vocabulary NMT. The core of the design is aword-level NMT with the advantage of being fast and easy to train. The character components empower the word-level system with the abilities to compute any source word representation on the fly from characters and to recover character-by-character unknown target words originally produced as<unk>."
        },
        {
            "heading": "4.1 Word-based Translation as a Backbone",
            "text": "The core of our hybrid NMT is a deep LSTM encoder-decoder that translates at theword level as described in Section 3. We maintain a vocabulary of |V | frequent words for each language. Other words not inside these lists are represented by a universal symbol<unk>, one per language. We translate just like a word-based NMT system with respect to these source and target vocabularies, except for cases that involve<unk> in the source in-\nput or the target output. These correspond to the character-level components illustrated in Figure 1.\nA nice property of our hybrid approach is that by varying the vocabulary size, one can control how much to blend the word- and character-based models; hence, taking the best of both worlds."
        },
        {
            "heading": "4.2 Source Character-based Representation",
            "text": "In regular word-based NMT, for all rare words outside the source vocabulary, one feeds the universal embedding representing<unk> as input to the encoder. This is problematic because it discards valuable information about the source word. To fix that, we learn a deep LSTM model over characters of source words. For example, in Figure 1, we run our deep character-based LSTM over \u2018c\u2019, \u2018u\u2019, \u2018t\u2019, \u2018e\u2019, and \u2018_\u2019 (the boundary symbol). The final hidden state at the top layer will be used as the on-the-fly representation for the current rare word.\nThe layers of the deep character-based LSTM are always initialized withzero states. One might propose to connect hidden states of the wordbased LSTM to the character-based model; however, we chose this design for various reasons. First, it simplifies the architecture. Second, it allows for efficiency throughprecomputation: before each mini-batch, we can compute representations for rare source words all at once. All instances of the same word share the same embedding, so the computation is pertype.2"
        },
        {
            "heading": "4.3 Target Character-level Generation",
            "text": "General word-based NMT allows generation of <unk> in the target output. Afterwards, there is usually a post-processing step that handles these unknown tokens by utilizing the alignment information derived from the attention mechanism and then performing simple word dictionary lookup or identity copy (Luong et al., 2015a; Jean et al., 2015a). While this approach works, it suffers from various problems such as alphabet mismatches between the source and target vocabularies and multi-word alignments. Our goal is to address all these issues and create a coherent framework that handles an unlimited output vocabulary.\nOur solution is to have a separate deep LSTM that \u201ctranslates\u201d at the character level given the\n2While Ling et al. (2015b) found that it is slow and difficult to train source character-level models and had to resort to pretraining, we demonstrate later that we can train our deep character-level LSTM perfectly fine in an end-to-end fashion.\ncurrent word-level state. We train our system such that whenever the word-level NMT produces an <unk>, we can consult this character-level decoder to recover the correct surface form of the unknown target word. This is illustrated in Figure 1. The training objective in Eq. (3) now becomes:\nJ = Jw + \u03b1Jc (5)\nHere, Jw refers to the usual loss of the wordlevel NMT; in our example, it is the sum of the negative log likelihood of generating {\u201cun\u201d, \u201c<unk>\u201d, \u201cchat\u201d, \u201c_\u201d }. The remaining componentJc corresponds to the loss incurred by the character-level decoder when predicting characters, e.g.,{\u2018j\u2019, \u2018o\u2019, \u2018l\u2019, \u2018i\u2019, \u2018_\u2019 }, of those rare words not in the target vocabulary.\nHidden-state Initialization Unlike the source character-based representations, which are context-independent, the target character-level generation requires the current word-level context to produce meaningful translation. This brings up an important question about what can best represent the current context so as to initialize the character-level decoder. We answer this question in the context of the attention mechanism (\u00a73).\nThe final vector\u0303ht, just before the softmax as shown in Figure 2, seems to be a good candidate to initialize the character-level decoder. The reason is that\u0303ht combines information from both the context vectorct and the top-level recurrent state ht. We refer to it later in our experiments as the same-path target generation approach.\nOn the other hand, the same-path approach worries us because all vectors\u0303ht used to seed the character-level decoder might have similar values, leading to the same character sequence being produced. The reason is becauseh\u0303t is directly used in the softmax, Eq. (2), to predict the same<unk>. That might pose some challenges for the model to learn useful representations that can be used to accomplish two tasks at the same time, that is to predict <unk> and to generate character sequences. To address that concern, we propose another approach called theseparate-path target generation.\nOur separate-path target generation approach works as follows. We mimic the process described in Eq. (4) to create a counterpart vectorh\u0306t that will be used to seed the character-level decoder:\nh\u0306t = tanh(W\u0306 [ct;ht]) (6)\nHere, W\u0306 is a new learnable parameter matrix, with which we hope to releaseW from the pressure of having to extract information relevant to both the word- and character-generation processes. Only the hidden state of the first layer is initialized as discussed above. The other components in the character-level decoder such as the\nLSTM cells of all layers and the hidden states of higher layers, all start with zero values.\nImplementation-wise, the computation in the character-level decoder is done per wordtoken instead of pertype as in the source character component (\u00a74.2). This is because of the contextdependent nature of the decoder.\nWord-Character Generation Strategy With the character-level decoder, we can view the final hidden states as representations for the surface forms of unknown tokens and could have fed these to the next time step. However, we chose not to do so for the efficiency reason explained next; instead,<unk> is fed to the word-level decoder \u201cas is\u201d using its corresponding word embedding.\nDuring training, this design choice decouples all executions over<unk> instances of the character-level decoder as soon the word-level NMT completes. As such, the forward and backward passes of the character-level decoder over rare words can be invoked in batch mode. Attes time, our strategy is to first run a beam search decoder at the word level to find the best translations given by the word-level NMT. Such translations contains<unk> tokens, so we utilize our character-level decoder with beam search to generate actual words for these<unk>."
        },
        {
            "heading": "5 Experiments",
            "text": "We evaluate the effectiveness of our models on the publicly available WMT\u201915 translation task from English into Czech withnewstest2013 (3000 sentences) as a development set andnewstest2015 (2656 sentences) as a test set. Two metrics are used: case-sensitive NIST BLEU (Papineni et al., 2002) and chrF3 (Popovi\u0301c, 2015).3 The latter measures the amounts of overlapping charactern-grams and has been argued to be a better metric for translation tasks out of English.\n3For NIST BLEU, we first rundetokenizer.pl and then usemteval-v13a to compute the scores as per WMT guideline. For chrF3, we utilize the implementation here https://github.com/rsennrich/subword-nmt.\nEnglish Czech word char word char\n# Sents 15.8M # Tokens 254M 1,269M 224M 1,347M # Types 1,172K 2003 1,760K 2053 200-char 98.1% 98.8%\nTable 1: WMT\u201915 English-Czech data \u2013 shown are various statistics of our training data such as sentence, token (word and character counts), as well as type (sizes of the word and character vocabularies). We show in addition the amount of words in a vocabulary expressed by a list of 200 characters found in frequent words."
        },
        {
            "heading": "5.1 Data",
            "text": "Among the available language pairs in WMT\u201915, all involving English, we chooseCzech as a target language for several reasons. First and foremost, Czech is a Slavic language with not only rich and complex inflection, but also fusional morphology in which a single morpheme can encode multiple grammatical, syntactic, or semantic meanings. As a result, Czech possesses an enormously large vocabulary (about 1.5 to 2 times bigger than that of English according to statistics in Table 1) and is a challenging language to translate into. Furthermore, this language pair has a large amount of training data, so we can evaluate at scale. Lastly, though our techniques are language independent, it is easier for us to work with Czech since Czech uses the Latin alphabet with some diacritics.\nIn terms of preprocessing, we apply only the standard tokenization practice.4 We choose for each language a list of 200 characters found in frequent words, which, as shown in Table 1, can represent more than 98% of the vocabulary."
        },
        {
            "heading": "5.2 Training Details",
            "text": "We train three types of systems, purelywordbased, purelycharacter-based, andhybrid. Common to these architectures is a word-based NMT since the character-based systems are essentially word-based ones with longer sequences and the core of hybrid models is also a word-based NMT.\nIn training word-based NMT, we follow Luong et al. (2015a) to use the global attention mechanism together with similar hyperparameters: (a) deep LSTM models, 4 layers, 1024 cells, and 1024-dimensional embeddings, (b) uniform\n4Usetokenizer.perl in Moses with default settings.\ninitialization of parameters in[\u22120.1, 0.1], (c) 6- epoch training with plain SGD and a simple learning rate schedule \u2013 start with a learning rate of1.0; after 4 epochs, halve the learning rate every 0.5 epoch, (d) mini-batches are of size 128 and shuffled, (e) the gradient is rescaled whenever its norm exceeds 5, and (f) dropout is used with probability 0.2 according to (Pham et al., 2014). We now detail differences across the three architectures.\nWord-based NMT \u2013 We constrain our source and target sequences to have a maximum length of 50 each; words that go past the boundary are ignored. The vocabularies are limited to the top |V | most frequent words in both languages. Words not in these vocabularies are converted into <unk>. After translating, we will perform dictionary5 lookup or identity copy for<unk> using the alignment information from the attention models. Such procedure is referred as theunk replace technique (Luong et al., 2015b; Jean et al., 2015a).\nCharacter-based NMT\u2013 The source and target sequences at the character level are often about 5 times longer than their counterparts in the wordbased models as we can infer from the statistics in Table 1. Due to memory constraint in GPUs, we\n5Obtained from the alignment links produced by the Berkeley aligner (Liang et al., 2006) over the training corpus.\nlimit our source and target sequences to a maximum length of 150 each, i.e., we backpropagate through at most 300 timesteps from the decoder to the encoder. With smaller 512-dimensional models, we can afford to have longer sequences with up to 600-step backpropagation.\nHybrid NMT \u2013 The word-level component uses the same settings as the purely word-based NMT. For the character-level source and target components, we experiment with both shallow and deep 1024-dimensional models of 1 and 2 LSTM layers. We set the weight\u03b1 in Eq. (5) for our character-level loss to1.0.\nTraining Time \u2013 It takes about 3 weeks to train a word-based model with|V | = 50K and about 3 months to train a character-based model. Training and testing for the hybrid models are about 10- 20% slower than those of the word-based models with the same vocabulary size."
        },
        {
            "heading": "5.3 Results",
            "text": "We compare our models with several strong systems. These include the winning entry in WMT\u201915, which was trained on a much larger amount of data, 52.6M parallel and 393.0M mono-\nlingual sentences (Bojar and Tamchyna, 2015).6 In contrast, we merely use the provided parallel corpus of 15.8M sentences. For NMT, to the best of our knowledge, (Jean et al., 2015b) has the best published performance on English-Czech.\napproach, our single NMT model outperforms the points despite using a smaller vocabulary of only 50K words versus 200K words. Our ensemble\nthough extremely slow to train and test, perform quite well. The512-dimensional attention-based model (g) is best, surpassing the single wordbased model in (Jean et al., 2015b) despite having much fewer parameters. It even outperforms most NMT systems on chrF3 with 46.6 points. This indicates that this model translate words that closely but not exactly match the reference ones as evidenced in Section 6.3. We notice two interesting observations. First, attention is critical for character-based models to work as is obvious from the poor performance of the non-attentional model; this has also been shown in speech recognition (Chan et al., 2016). Second, long time-step backpropagation is more important as reflected by the fact that the larger1024-dimensional model(h) with shorter backprogration is inferior to(g).\nOur hybrid models achieve the best results. At 10K words, we demonstrate that ourseparatepath strategy for the character-level target generation (\u00a74.3) is effective, yielding an improvement of +1.5 BLEU points when comparing systems(j) vs. (i). A deeper character-level architecture of 2 LSTM layers provides another significant boost of +2.1 BLEU. With 17.7 BLEU points, our hybrid system(k) has surpassed word-level NMT models.\nWhen extending to 50K words, we further improve the translation quality. Our best single model, system(l) with 19.6 BLEU, is already better than all existing systems. Our ensemble model (m) further advances the SOTA result to 20.7 BLEU, outperforming the winning entry in the WMT\u201915 English-Czech translation task by a large margin of +1.9 points. Our ensemble model\n6This entry combines two independent systems, a phrasebased Moses model and a deep-syntactic transfer-based model. Additionally, there is an automatic post-editing system with hand-crafted rules to correct errors in morphological agreement and semantic meanings, e.g., loss of negation.\n0 10 20 30 40 50 0\n5\n10\n15\n20\nVocabulary Size (x1000)\nB LE\nU\nWord Word + unk replace Hybrid\n+11.4\n+5.0 +2.1 +3.5\nis also best in terms of chrF3 with 47.5points."
        },
        {
            "heading": "6 Analysis",
            "text": "This section first studies the effects of vocabulary sizes towards translation quality. We then analyze more carefully our character-level components by visualizing and evaluating rare word embeddings as well as examining sample translations."
        },
        {
            "heading": "6.1 Effects of Vocabulary Sizes",
            "text": "As shown in Figure 3, our hybrid models offer large gains of +2.1-11.4 BLEU points over strong word-based systems which already handle unknown words. With only a small vocabulary, e.g., 1000 words, our hybrid approach can produce systems that are better than word-based models that possess much larger vocabularies. While it appears from the plot that gains diminish as we increase the vocabulary size, we argue that our hybrid models are still preferable since they understand word structures and can handle new complex words at test time as illustrated in Section 6.3."
        },
        {
            "heading": "6.2 Rare Word Embeddings",
            "text": "We evaluate thesource character-level model by building representations for rare words and measuring how good these embeddings are.\nQuantitatively, we follow Luong et al. (2013) in using the word similarity task, specifically on the Rare Word dataset, to judge the learned representations for complex words. The evaluation metric is the Spearman\u2019s correlation\u03c1 between similarity scores assigned by a model and by human annotators. From the results in Table 3, we can see that source representations produced by our hy-\nbrid7 models are significantly better than those of the word-based one. It is noteworthy that our deep recurrent character-level models can outperform the model of (Luong et al., 2013), which uses recursive neural networks and requires a complex morphological analyzer, by a large margin. Our performance is also competitive to the best Glove embeddings (Pennington et al., 2014) which were trained on a much larger dataset.\nQualitatively, we visualize embeddings produced by the hybrid model(l) for selected words in the Rare Word dataset. Figure 4 shows the two-dimensional representations of words computed by the Barnes-Hut-SNE algo-\n7We look up the encoder embeddings for frequent words and build representations for rare word from characters.\nrithm (van der Maaten, 2013).8 It is extremely interesting to observe that words are clustered together not only by the word structures but also by the meanings. For example, in the top-left box, thecharacter-based representations for \u201cloveless\u201d, \u201cspiritless\u201d, \u201cheartlessly\u201d, and \u201cheartlessness\u201d are nearby, but clearly separated into two groups. Similarly, in the center boxes,word-based embeddings of \u201cacceptable\u201d, \u201csatisfactory\u201d, \u201cunacceptable\u201d, and \u201cunsatisfactory\u201d, are close by but separated by meanings. Lastly, the remaining boxes demonstrate that our character-level models are able to build representations comparable to the word-based ones, e.g., \u201cimpossibilities\u201d vs. \u201cimpossible\u201d and \u201cantagonize\u201d vs. \u201cantagonist\u201d. All of this evidence strongly supports that the source character-level models are useful and effective."
        },
        {
            "heading": "6.3 Sample Translations",
            "text": "We show in Table 4 sample translations between various systems. In the first example, our hybrid model translates perfectly. The word-based model fails to translate \u201cdiagnosis\u201d because the second <unk> was incorrectly aligned to the word \u201cafter\u201d. The character-based model, on the other hand, makes a mistake in translating names.\n8We run Barnes-Hut-SNE algorithm over a set of 91 words, but filter out 27 words for displaying clarity.\nFor the second example, the hybrid model surprises us when it can capture the long-distance reordering of \u201cfifty years ago\u201d and \u201cp\u0306red pades\u00e1ti lety\u201d while the other two models do not. The word-based model translates \u201cJr.\u201d inaccurately due to the incorrect alignment between the second<unk> and the word \u201csaid\u201d. The characterbased model literally translates the name \u201cKing\u201d into \u201ckr\u00e1l\u201d which means \u201cking\u201d.\nLastly, both the character-based and hybrid models impress us by their ability to translate compound words exactly, e.g., \u201c11-year-old\u201d and \u201cjeden\u00e1ctilet\u00e1\u201d; whereas the identity copy strategy of the word-based model fails. Of course, our hybrid model does make mistakes, e.g., it fails to translate the name \u201cShani Bart\u201d. Overall, these examples highlight how challenging translating into Czech is and that being able to translate at the character level helps improve the quality."
        },
        {
            "heading": "7 Conclusion",
            "text": "We have proposed a novelhybrid architecture that combines the strength of both word- and character-based models. Word-level models are fast to train and offer high-quality translation; whereas, character-level models help achieve the goal of open vocabulary NMT. We have demon-\nstrated these two aspects through our experimental results and translation examples.\nOur best hybrid model has surpassed the performance of both the best word-based NMT system and the best non-neural model to establish a new state-of-the-art result for English-Czech translation in WMT\u201915 with 20.7 BLEU. Moreover, we have succeeded in replacing the standard unk replacement technique in NMT with our characterlevel components, yielding an improvement of +2.1\u221211.4 BLEU points. Our analysis has shown that our model has the ability to not only generate well-formed words for Czech, a highly inflected language with an enormous and complex vocabulary, but also build accurate representations for English source words.\nAdditionally, we have demonstrated the potential of purely character-based models in producing good translations; they have outperformed past word-level NMT models. For future work, we hope to be able to improve the memory usage and speed of purely character-based models."
        },
        {
            "heading": "Acknowledgments",
            "text": "This work was partially supported by NSF Award IIS-1514268 and by a gift from Bloomberg L.P. We thank Dan Jurafsky, Andrew Ng, and Quoc\nLe for earlier feedback on the work, as well as Sam Bowman, Ziang Xie, and Jiwei Li for their valuable comments on the paper draft. Lastly, we thank NVIDIA Corporation for the donation of Tesla K40 GPUs as well as Andrew Ng and his group for letting us use their computing resources."
        }
    ],
    "year": 2016
}