{
    "abstractText": "This paper develops a novel methodology for using symbolic knowledge in deep learning. From first principles, we derive a semantic loss function that bridges between neural output vectors and logical constraints. This loss function captures how close the neural network is to satisfying the constraints on its output. An experimental evaluation shows that it effectively guides the learner to achieve (near-)state-of-the-art results on semi-supervised multi-class classification. Moreover, it significantly increases the ability of the neural network to predict structured objects, such as rankings and paths. These discrete concepts are tremendously difficult to learn, and benefit from a tight integration of deep learning and symbolic reasoning methods.",
    "authors": [
        {
            "affiliations": [],
            "name": "Jingyi Xu"
        },
        {
            "affiliations": [],
            "name": "Zilu Zhang"
        },
        {
            "affiliations": [],
            "name": "Tal Friedman"
        },
        {
            "affiliations": [],
            "name": "Yitao Liang"
        },
        {
            "affiliations": [],
            "name": "Guy Van den Broeck"
        }
    ],
    "id": "SP:440184346a5a78b104d1646732849563895db990",
    "references": [
        {
            "authors": [
                "M. Bilenko",
                "S. Basu",
                "R.J. Mooney"
            ],
            "title": "Integrating constraints and metric learning in semi-supervised clustering",
            "venue": "In ICML, pp",
            "year": 2004
        },
        {
            "authors": [
                "A. Bordes",
                "N. Usunier",
                "A. Garcia-Duran",
                "J. Weston",
                "O. Yakhnenko"
            ],
            "title": "Translating embeddings for modeling multi-relational data",
            "venue": "In NIPS,",
            "year": 2013
        },
        {
            "authors": [
                "Chang",
                "K.-W",
                "R. Samdani",
                "D. Roth"
            ],
            "title": "A constrained latent variable model for coreference resolution",
            "venue": "In EMNLP,",
            "year": 2013
        },
        {
            "authors": [
                "Chang",
                "M.-W",
                "Ratinov",
                "L.-A",
                "N. Rizzolo",
                "D. Roth"
            ],
            "title": "Learning and inference with constraints",
            "venue": "In AAAI,",
            "year": 2008
        },
        {
            "authors": [
                "M. Chavira",
                "A. Darwiche"
            ],
            "title": "On probabilistic inference by weighted model counting",
            "venue": "JAIR,",
            "year": 2008
        },
        {
            "authors": [
                "A. Choi",
                "G. Van den Broeck",
                "A. Darwiche"
            ],
            "title": "Tractable learning for structured probability spaces: A case study in learning preference distributions",
            "venue": "In IJCAI,",
            "year": 2015
        },
        {
            "authors": [
                "A. Choi",
                "N. Tavabi",
                "A. Darwiche"
            ],
            "title": "Structured features in naive Bayes classification",
            "venue": "In AAAI,",
            "year": 2016
        },
        {
            "authors": [
                "A. Darwiche"
            ],
            "title": "A differential approach to inference in bayesian networks",
            "venue": "J. ACM,",
            "year": 2003
        },
        {
            "authors": [
                "A. Darwiche"
            ],
            "title": "SDD: A new canonical representation of propositional knowledge bases",
            "venue": "In IJCAI,",
            "year": 2011
        },
        {
            "authors": [
                "A. Darwiche",
                "P. Marquis"
            ],
            "title": "A knowledge compilation",
            "venue": "map. JAIR,",
            "year": 2002
        },
        {
            "authors": [
                "H. Daum\u00e9",
                "J. Langford",
                "D. Marcu"
            ],
            "title": "Search-based structured prediction",
            "venue": "Machine learning,",
            "year": 2009
        },
        {
            "authors": [
                "T. Demeester",
                "T. Rockt\u00e4schel",
                "S. Riedel"
            ],
            "title": "Lifted rule injection for relation embeddings",
            "venue": "In EMNLP,",
            "year": 2016
        },
        {
            "authors": [
                "Deng",
                "N. Ding",
                "Y. Jia",
                "A. Frome",
                "K. Murphy",
                "S. Bengio",
                "Y. Li",
                "H. Neven",
                "H. Adam"
            ],
            "title": "Large-scale object classification using label relation graphs",
            "venue": "In ECCV,",
            "year": 2014
        },
        {
            "authors": [
                "M. Diligenti",
                "M. Gori",
                "C. Sacca"
            ],
            "title": "Semantic-based regularization for learning and inference",
            "year": 2017
        },
        {
            "authors": [
                "I. Donadello",
                "L. Serafini",
                "Garcez",
                "A. d"
            ],
            "title": "Logic tensor networks for semantic image interpretation",
            "venue": "In IJCAI,",
            "year": 2017
        },
        {
            "authors": [
                "D.K. Duvenaud",
                "D. Maclaurin",
                "J. Iparraguirre",
                "R. Bombarell",
                "T. Hirzel",
                "A. Aspuru-Guzik",
                "R.P. Adams"
            ],
            "title": "Convolutional networks on graphs for learning molecular fingerprints",
            "venue": "In NIPS,",
            "year": 2015
        },
        {
            "authors": [
                "A. Erkan",
                "Y. Altun"
            ],
            "title": "Semi-supervised learning via generalized maximum entropy",
            "venue": "In AISTATS, volume PMLR, pp",
            "year": 2010
        },
        {
            "authors": [
                "K. Ganchev",
                "J. Gillenwater",
                "B Taskar"
            ],
            "title": "Posterior regularization for structured latent variable models",
            "year": 2001
        },
        {
            "authors": [
                "Y. Grandvalet",
                "Y. Bengio"
            ],
            "title": "Semi-supervised learning by entropy minimization",
            "venue": "In NIPS,",
            "year": 2005
        },
        {
            "authors": [
                "A. Graves",
                "G. Wayne",
                "M. Reynolds",
                "T. Harley",
                "I. Danihelka",
                "A. Grabska-Barwi\u0144ska",
                "S.G. Colmenarejo",
                "E. Grefenstette",
                "T. Ramalho",
                "J Agapiou"
            ],
            "title": "Hybrid computing using a neural network with dynamic external memory",
            "year": 2016
        },
        {
            "authors": [
                "T. Hastie",
                "R. Tibshirani",
                "J. Friedman"
            ],
            "title": "Overview of supervised learning",
            "venue": "In The elements of statistical learning,",
            "year": 2009
        },
        {
            "authors": [
                "K. He",
                "X. Zhang",
                "S. Ren",
                "J. Sun"
            ],
            "title": "Deep residual learning for image recognition",
            "venue": "In CVPR,",
            "year": 2016
        },
        {
            "authors": [
                "Z. Hu",
                "X. Ma",
                "Z. Liu",
                "E. Hovy",
                "E. Xing"
            ],
            "title": "Harnessing deep neural networks with logic rules",
            "venue": "In ACL,",
            "year": 2016
        },
        {
            "authors": [
                "S. Ioffe",
                "C. Szegedy"
            ],
            "title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift",
            "venue": "In ICML, pp",
            "year": 2015
        },
        {
            "authors": [
                "D.S. Jones"
            ],
            "title": "Elementary information theory",
            "year": 1979
        },
        {
            "authors": [
                "A. Kimmig",
                "S.H. Bach",
                "M. Broecheler",
                "B. Huang",
                "L. Getoor"
            ],
            "title": "A short introduction to probabilistic soft logic",
            "venue": "In NIPS (Workshop Track),",
            "year": 2012
        },
        {
            "authors": [
                "D.P. Kingma",
                "J.L. Ba"
            ],
            "title": "Adam: A method for stochastic optimization",
            "venue": "In ICLR,",
            "year": 2015
        },
        {
            "authors": [
                "D.P. Kingma",
                "S. Mohamed",
                "D. Jimenez Rezende",
                "M. Welling"
            ],
            "title": "Semi-supervised learning with deep generative models",
            "year": 2014
        },
        {
            "authors": [
                "D. Kisa",
                "G. Van den Broeck",
                "A. Choi",
                "A. Darwiche"
            ],
            "title": "Probabilistic sentential decision diagrams",
            "venue": "In KR,",
            "year": 2014
        },
        {
            "authors": [
                "A. Krizhevsky"
            ],
            "title": "Learning multiple layers of features from tiny images",
            "year": 2009
        },
        {
            "authors": [
                "A. Krizhevsky",
                "I. Sutskever",
                "G.E. Hinton"
            ],
            "title": "Imagenet classifcation with deep convolutional neural networks",
            "year": 2012
        },
        {
            "authors": [
                "Y. Lin",
                "Z. Liu",
                "M. Sun",
                "Y. Liu",
                "X. Zhu"
            ],
            "title": "Learning entity and relation embeddings for knowledge graph completion",
            "venue": "In AAAI,",
            "year": 2015
        },
        {
            "authors": [
                "P. M\u00e1rquez-Neila",
                "M. Salzmann",
                "P. Fua"
            ],
            "title": "Imposing hard constraints on deep networks: Promises and limitations",
            "venue": "arXiv preprint arXiv:1706.02025,",
            "year": 2017
        },
        {
            "authors": [
                "R. Mateescu",
                "R. Dechter"
            ],
            "title": "Mixed deterministic and probabilistic networks",
            "venue": "Annals of mathematics and artificial intelligence,",
            "year": 2008
        },
        {
            "authors": [
                "N. Mattei",
                "T. Walsh"
            ],
            "title": "Preflib: A library of preference data HTTP://PREFLIB.ORG",
            "venue": "In ADT,",
            "year": 2013
        },
        {
            "authors": [
                "P. Minervini",
                "T. Demeester",
                "T. Rockt\u00e4schel",
                "S. Riedel"
            ],
            "title": "Adversarial sets for regularising neural link predictors",
            "venue": "arXiv preprint arXiv:1707.07596,",
            "year": 2017
        },
        {
            "authors": [
                "T. Miyato",
                "Maeda",
                "S.-i",
                "M. Koyama",
                "K. Nakae",
                "S. Ishii"
            ],
            "title": "Distributional smoothing with virtual adversarial training",
            "venue": "In ICLR,",
            "year": 2016
        },
        {
            "authors": [
                "T. Miyato",
                "Maeda",
                "S.-i",
                "M. Koyama",
                "K. Nakae",
                "S. Ishii"
            ],
            "title": "Virtual adversarial training: a regularization method for supervised and semi-supervised learning",
            "venue": "ArXiv eprints,",
            "year": 2017
        },
        {
            "authors": [
                "V. Nair",
                "G.E. Hinton"
            ],
            "title": "Rectified linear units improve restricted boltzmann machines",
            "venue": "In ICML,",
            "year": 2010
        },
        {
            "authors": [
                "J. Naradowsky",
                "S. Riedel"
            ],
            "title": "Modeling exclusion with a differentiable factor graph constraint",
            "venue": "In ICML (Workshop Track),",
            "year": 2017
        },
        {
            "authors": [
                "A. Neelakantan",
                "B. Roth",
                "A. McCallum"
            ],
            "title": "Compositional vector space models for knowledge base inference",
            "venue": "In ACL-IJCNLP, pp",
            "year": 2015
        },
        {
            "authors": [
                "M. Niepert",
                "M. Ahmed",
                "K. Kutzkov"
            ],
            "title": "Learning convolutional neural networks for graphs",
            "venue": "In ICML,",
            "year": 2016
        },
        {
            "authors": [
                "M. Nishino",
                "N. Yasuda",
                "S. Minato",
                "M. Nagata"
            ],
            "title": "Compiling graph substructures into sentential decision diagrams",
            "venue": "In AAAI,",
            "year": 2017
        },
        {
            "authors": [
                "D. Pathak",
                "P. Krahenbuhl",
                "T. Darrell"
            ],
            "title": "Constrained convolutional neural networks for weakly supervised segmentation",
            "venue": "In ICCV, pp",
            "year": 2015
        },
        {
            "authors": [
                "N. Pitelis",
                "C. Russell",
                "L. Agapito"
            ],
            "title": "Semi-supervised learning using an unsupervised atlas",
            "venue": "In ECML-PKDD,",
            "year": 2014
        },
        {
            "authors": [
                "A. Rasmus",
                "M. Berglund",
                "M. Honkala",
                "H. Valpola",
                "T. Raiko"
            ],
            "title": "Semi-supervised learning with ladder networks",
            "venue": "In NIPS,",
            "year": 2015
        },
        {
            "authors": [
                "S. Riedel",
                "M. Bosnjak",
                "T. Rockt\u00e4schel"
            ],
            "title": "Programming with a differentiable forth",
            "venue": "interpreter. CoRR,",
            "year": 2016
        },
        {
            "authors": [
                "T. Rockt\u00e4schel",
                "S. Singh",
                "S. Riedel"
            ],
            "title": "Injecting logical background knowledge into embeddings for relation extraction",
            "venue": "In HLT-NAACL,",
            "year": 2015
        },
        {
            "authors": [
                "T. Sang",
                "P. Beame",
                "H.A. Kautz"
            ],
            "title": "Performing bayesian inference by weighted model counting",
            "venue": "In AAAI,",
            "year": 2005
        },
        {
            "authors": [
                "Y. Shen",
                "A. Choi",
                "A. Darwiche"
            ],
            "title": "A tractable probabilistic model for subset selection",
            "venue": "In UAI,",
            "year": 2017
        },
        {
            "authors": [
                "D. Smith",
                "V. Gogate"
            ],
            "title": "Loopy belief propagation in the presence of determinism",
            "venue": "In AISTATS,",
            "year": 2014
        },
        {
            "authors": [
                "A. Srinivasan",
                "S. Muggleton",
                "R. King"
            ],
            "title": "Comparing the use of background knowledge by inductive logic programming systems",
            "venue": "In ILP,",
            "year": 1995
        },
        {
            "authors": [
                "R. Stewart",
                "S. Ermon"
            ],
            "title": "Label-free supervision of neural networks with physics and domain knowledge",
            "venue": "In AAAI,",
            "year": 2017
        },
        {
            "authors": [
                "M. Wang",
                "Y. Tang",
                "J. Wang",
                "J. Deng"
            ],
            "title": "Premise selection for theorem proving by deep graph embedding",
            "venue": "arXiv preprint arXiv:1709.09994,",
            "year": 2017
        },
        {
            "authors": [
                "H. Xiao",
                "K. Rasul",
                "R. Vollgraf"
            ],
            "title": "Fashion-mnist: a novel image dataset for benchmarking machine learning",
            "venue": "algorithms. CoRR,",
            "year": 2017
        },
        {
            "authors": [
                "Yang",
                "M.-C",
                "N. Duan",
                "M. Zhou",
                "Rim",
                "H.-C"
            ],
            "title": "Joint relational embeddings for knowledge-based question answering",
            "venue": "In EMNLP,",
            "year": 2014
        },
        {
            "authors": [
                "Nishino"
            ],
            "title": "2017) to generate a constraint for",
            "year": 2017
        },
        {
            "authors": [
                "Ba"
            ],
            "title": "Early stopping with respect to validation loss is used as a regularizer. Preference Learning We split each user\u2019s ordering into their ordering over sushis 1,2,3,5,7,8",
            "year": 2015
        }
    ],
    "sections": [
        {
            "heading": "1. Introduction",
            "text": "The widespread success of representation learning raises the question of which AI tasks are amenable to deep learning, which tasks require classical model-based symbolic reasoning, and whether we can benefit from a tighter integration of both approaches. In recent years, significant effort has gone towards various ways of using representation learning to solve tasks that were previously tackled by symbolic methods. Such efforts include neural computers or differentiable programming (Weston et al., 2014; Reed & De Freitas, 2015; Graves et al., 2016; Riedel et al., 2016), relational embeddings or deep learning for graph data (Yang et al., 2014; Lin et al., 2015; Bordes et al., 2013; Neelakantan et al., 2015; Duvenaud et al., 2015; Niepert et al., 2016), neural theorem proving, and learning with constraints (Hu et al., 2016; Stewart & Ermon, 2017; Minervini et al., 2017; Wang et al., 2017).\n1Department of Computer Science, University of California Los Angeles, Los Angeles, CA, USA 2Peking University, Beijing, China. Correspondence to: Tal Friedman <tal@cs.ucla.edu>, Yitao Liang <yliang@cs.ucla.edu>, Guy Van den Broeck <guyvdb@cs.ucla.edu>.\nProceedings of the 35 th International Conference on Machine Learning, Stockholm, Sweden, PMLR 80, 2018. Copyright 2018 by the author(s).\nThis paper considers learning in domains where we have symbolic knowledge connecting the different outputs of a neural network. This knowledge takes the form of a constraint (or sentence) in Boolean logic. It can be as simple as an exactly-one constraint for one-hot output encodings, or as complex as a structured output prediction constraint for intricate combinatorial objects such as rankings, subgraphs, or paths. Our goal is to augment neural networks with the ability to learn how to make predictions subject to these constraints, and use the symbolic knowledge to improve the learning performance.\nMost neuro-symbolic approaches aim to simulate or learn symbolic reasoning in an end-to-end deep neural network, or capture symbolic knowledge in a vector-space embedding. This choice is partly motivated by the need for smooth differentiable models; adding symbolic reasoning code (e.g., SAT solvers) to a deep learning pipeline destroys this property. Unfortunately, while making reasoning differentiable, the precise logical meaning of the knowledge is often lost. In this paper, we take a distinctly unique approach, and tackle the problem of differentiable but sound logical reasoning from first principles. Starting from a set of intuitive axioms, we derive the differentiable semantic loss which captures how well the outputs of a neural network match a given constraint. This function precisely captures the meaning of the constraint, and is independent of its syntax.\nNext, we show how semantic loss gives significant practical improvements in semi-supervised classification. In this setting, semantic loss for the exactly-one constraint permits us to obtain a learning signal from vast amounts of unlabeled data. The key idea is that semantic loss helps us improve how confidently we are able to classify the unlabeled data. This simple addition to the loss function of standard deep learning architectures yields (near-)stateof-the-art performance in semi-supervised classification on MNIST, FASHION, and CIFAR-10 datasets.\nOur final set of experiments study the benefits of semantic loss for learning tasks with highly structured output, such as preference learning and path prediction in a graph (Daume\u0301 et al., 2009; Chang et al., 2013; Choi et al., 2015; Graves et al., 2016). In these scenarios, the task is two-fold: learn both the structure of the output space, and\nar X\niv :1\n71 1.\n11 15\n7v 2\n[ cs\n.A I]\n8 J\nun 2\n01 8\nthe actual classification function within that space. By capturing the structure of the output space with logical constraints, and minimizing semantic loss for this constraint during learning, we are able to learn networks that are much more likely to correctly predict structured objects."
        },
        {
            "heading": "2. Background and Notation",
            "text": "To formally define semantic loss, we make use of concepts in propositional logic. We write uppercase letters (X ,Y ) for Boolean variables and lowercase letters (x,y) for their instantiation (X = 0 or X = 1). Sets of variables are written in bold uppercase (X,Y), and their joint instantiation in bold lowercase (x,y). A literal is a variable (X) or its negation (\u00acX). A logical sentence (\u03b1 or \u03b2) is constructed in the usual way, from variables and logical connectives (\u2227, \u2228, etc.), and is also called a formula or constraint. A state or world x is an instantiation to all variables X. A state x satisfies a sentence \u03b1, denoted x |= \u03b1, if the sentence evaluates to be true in that world, as defined in the usual way. A sentence \u03b1 entails another sentence \u03b2, denoted \u03b1 |= \u03b2 if all worlds that satisfy \u03b1 also satisfy \u03b2. A sentence \u03b1 is logically equivalent to sentence \u03b2, denoted \u03b1 \u2261 \u03b2, if both \u03b1 |= \u03b2 and \u03b2 |= \u03b1.\nThe output row vector of a neural net is denoted p. Each value in p represents the probability of an output and falls in [0, 1]. We use both softmax and sigmoid units for our output activation functions. The notation for states x is used to refer the an assignment, the logical sentence enforcing that assignment, or the binary output vector capturing that same assignment, as these are all equivalent notions.\nFigure 1 illustrates the three different concrete output constraints of varying difficulty that are studied in our experiments. First, we examine the exactly-one or onehot constraint capturing the encoding used in multi-class classification. It states that for a set of indicators X = {X1, . . . , Xn}, one and exactly one of those indicators must be true, with the rest being false. This is enforced through a logical constraint \u03b1 by conjoining sentences of the form \u00acX1 \u2228\u00acX2 for all pairs of variables (at most one variable is true), and a single sentence X1 \u2228 \u00b7 \u00b7 \u00b7 \u2228 Xn (at\nleast one variable is true). Our experiments further examine the valid simple path constraint. It states for a given source-destination pair and edge indicators that the edge indicators set to true must form a valid simple path from source to destination. Finally, we explore the ordering constraint, which requires that a set of n2 indicator variables represent a total ordering over n variables, effectively encoding a permutation matrix. For a full description of the path and ordering constraints, we refer to Section 5."
        },
        {
            "heading": "3. Semantic Loss",
            "text": "In this section, we formally introduce semantic loss. We begin by giving the definition and our intuition behind it. This definition itself provides all of the necessary mechanics for enforcing constraints, and is sufficient for the understanding of our experiments in Sections 4 and 5. We also show that semantic loss is not just an arbitrary definition, but rather is defined uniquely by a set of intuitive assumptions. After stating the assumptions formally, we then provide an axiomatic proof of the uniqueness of semantic loss in satisfying these assumptions."
        },
        {
            "heading": "3.1. Definition",
            "text": "The semantic loss Ls(\u03b1, p) is a function of a sentence \u03b1 in propositional logic, defined over variables X = {X1, . . . , Xn}, and a vector of probabilities p for the same variables X. Element pi denotes the predicted probability of variable Xi, and corresponds to a single output of the neural net. For example, the semantic loss between the one-hot constraint from the previous section, and a neural net output vector p, is intended to capture how close the prediction p is to having exactly one output set to true (i.e. 1), and all others set to false (i.e. 0), regardless of which output is correct. The formal definition of this is as follows:\nDefinition 1 (Semantic Loss). Let p be a vector of probabilities, one for each variable in X, and let \u03b1 be a sentence over X. The semantic loss between \u03b1 and p is\nLs(\u03b1, p) \u221d \u2212 log \u2211 x|=\u03b1 \u220f i:x|=Xi pi \u220f i:x|=\u00acXi (1\u2212 pi).\nIntuitively, the semantic loss is proportional to a negative logarithm of the probability of generating a state that satisfies the constraint, when sampling values according to p. Hence, it is the self-information (or \u201csurprise\u201d) of obtaining an assignment that satisfies the constraint (Jones, 1979)."
        },
        {
            "heading": "3.2. Derivation from First Principles",
            "text": "In this section, we begin with a theorem stating the uniqueness of semantic loss, as fixed by a series of axioms. The full set of axioms and the derivation of the precise semantic loss function is described in Appendix A1.\nTheorem 1 (Uniqueness). The semantic loss function in Definition 1 satisfies all axioms in Appendix A and is the only function that does so, up to a multiplicative constant.\nIn the remainder of this section, we provide a selection of the most intuitive axioms from Appendix A, as well as some key properties.\nFirst, to retain logical meaning, we postulate that semantic loss is monotone in the order of implication.\nAxiom 1 (Monotonicity). If \u03b1 |= \u03b2, then the semantic loss Ls(\u03b1, p) \u2265 Ls(\u03b2, p) for any vector p.\nIntuitively, as we add stricter requirements to the logical constraint, going from \u03b2 to \u03b1 and making it harder to satisfy, the semantic loss cannot decrease. For example, when \u03b2 enforces the output of an neural network to encode a subtree of a graph, and we tighten that requirement in \u03b1 to be a path, the semantic loss cannot decrease. Every path is also a tree and any solution to \u03b1 is a solution to \u03b2.\nA direct consequence following the monotonicity axiom is that logically equivalent sentences must incur an identical semantic loss for the same probability vector p. Hence, the semantic loss is indeed a semantic property of the logical sentence, and does not depend on its syntax.\nProposition 2 (Semantic Equivalence). If \u03b1 \u2261 \u03b2, then the semantic loss Ls(\u03b1, p) = Ls(\u03b2, p) for any vector p.\nAnother consequence is that semantic loss must be nonnegative if we want the loss to be 0 for a true sentence.\nNext, we state axioms establishing a correspondence between logical constraints and data. A state x can be equivalently represented as both a binary data vector, as well as a logical constraint that enforces a value for every variable in X. When both the constraint and the predicted vector represent the same state (for example, X1 \u2227 \u00acX2 \u2227 X3 vs. [1 0 1]), there should be no semantic loss.\nAxiom 2 (Identity). For any state x, there is zero semantic loss between its representation as a sentence, and its representation as a deterministic vector: \u2200x,Ls(x,x) = 0.\n1Appendices are included in the supplementary material.\nThe axiom above together with the monotonicity axiom imply that any vector satisfying the constraint must incur zero loss. For example, when our constraint \u03b1 requires that the output vector encodes an arbitrary total ranking, and the vector x correctly represents a single specific total ranking, there is no semantic loss.\nProposition 3 (Satisfaction). If x |= \u03b1, then the semantic loss Ls(\u03b1,x) = 0.\nAs a special case, logical literals (X or\u00acX) constrain a single variable to take on a value, and thus play a role similar to the labels used in supervised learning. Such constraints require an even tighter correspondence: the semantic loss must act like a classical loss function (i.e., cross entropy).\nAxiom 3 (Label-Literal Correspondence). The semantic loss of a single literal is proportionate to the cross-entropy loss for the equivalent data label: Ls(X, p) \u221d \u2212 log(p) and Ls(\u00acX, p) \u221d \u2212 log(1\u2212 p).\nAppendix A states additional axioms that allow us to prove the following form of the semantic loss for a state x. Lemma 4. For state x and vector p, we have Ls(x, p) \u221d \u2212 \u2211 i:x|=Xi log pi \u2212 \u2211 i:x|=\u00acXi log(1\u2212 pi).\nLemma 4 falls short as a full definition of semantic loss for arbitrary sentences. One can define additional axioms to pin down Ls. For example, the following axiom is satisfied by Definition 1, and is highly desirable for learning.\nAxiom 4 (Differentiability). For any fixed \u03b1, the semantic loss Ls(\u03b1, p) is monotone in each probability in p, continuous and differentiable.\nAppendix A makes the notion of semantic loss precise by stating one additional axiom. It is based on the observation that the state loss of Lemma 4 is proportionate to a logprobability. In particular, it corresponds to the probability of obtaining state x after independently sampling each Xi with probability pi. We have now derived the semantic loss function from first principles, and arrived at Definition 1. Moreover, we can show that Theorem 1 holds - that it is the only choice of such a loss function."
        },
        {
            "heading": "4. Semi-Supervised Classification",
            "text": "The most straightforward constraint that is ubiquitous in classification is mutual exclusion over one-hot-encoded outputs. That is, for a given example, exactly one class and therefore exactly one binary indicator must be true. The machine learning community has made great strides on this task, due to the invention of assorted deep learning representations and their associated regularization terms (Krizhevsky et al., 2012; He et al., 2016). Many of these models take large amounts of labeled data for granted, and big data is indispensable for discovering accurate representations (Hastie et al., 2009). To sustain this progress, and\nalleviate the need for more labeled data, there is a growing interest into utilizing unlabeled data to augment the predictive power of classifiers (Stewart & Ermon, 2017; Bilenko et al., 2004). This section shows why semantic loss naturally qualifies for this task.\nIllustrative Example To illustrate the benefit of semantic loss in the semi-supervised setting, we begin our discussion with a small toy example. Consider a binary classification task; see Figure 2. Ignoring the unlabeled examples, a simple linear classifier learns to distinguish the two classes by separating the labeled examples (Figure 2a). However, the unlabeled examples are also informative, as they must carry some properties that give them a particular label. This is the crux of semantic loss for semi-supervised learning: a model must confidently assign a consistent class even to unlabeled data. Encouraging the model to do so results in a more accurate decision boundary (Figure 2b)."
        },
        {
            "heading": "4.1. Method",
            "text": "Our proposed method intends to be generally applicable and compatible with any feedforward neural net. Semantic loss is simply another regularization term that can directly be plugged into an existing loss function. More specifically, with some weight w, the new overall loss becomes\nexisting loss + w \u00b7 semantic loss.\nWhen the constraint over the output space is simple (for example, there is a small number of solutions x |= \u03b1), semantic loss can be directly computed using Definition 1. Concretely, for the exactly-one constraint used in n-class classification, semantic loss reduces to\nLs(exactly-one, p) \u221d \u2212 log n\u2211 i=1 pi n\u220f j=1,j 6=i (1\u2212 pj),\nwhere values pi denote the probability of class i as predicted by the neural net. Semantic loss for the exactly-one constraint is efficient and causes no noticeable computational overhead in our experiments.\nIn general, for arbitrary constraints \u03b1, semantic loss is not efficient to compute using Definition 1, and more advanced automated reasoning is required. Section 5 discusses this issue in more detail. For example, using automated reasoning can reduce the time complexity to compute semantic loss for the exactly-one constraint from O(n2) (as shown above), to O(n)."
        },
        {
            "heading": "4.2. Experimental Evaluation",
            "text": "In this section, we evaluate semantic loss in the semisupervised setting by comparing it with several competitive models.2 As most semi-supervised learners build on a supervised learner, changing the underlying model significantly affects the semi-supervised learner\u2019s performance. For comparison, we add semantic loss to the same base models used in ladder nets (Rasmus et al., 2015), which currently achieves state-of-the-art results on semisupervised MNIST and CIFAR-10 (Krizhevsky, 2009). Specifically, the MNIST base model is a fully-connected multilayer perceptron (MLP), with layers of size 784-1000- 500-250-250-250-10. On CIFAR-10, it is a 10-layer convolutional neural network (CNN) with 3-by-3 padded filters. After every 3 layers, features are subject to a 2-by2 max-pool layer with strides of 2. Furthermore, we use ReLu (Nair & Hinton, 2010), batch normalization (Ioffe & Szegedy, 2015), and Adam optimization (Kingma & Ba, 2015) with a learning rate of 0.002. We refer to Appendix B and C for a specification of the CNN model and additional details about hyper-parameter tuning.\nFor all semi-supervised experiments, we use the standard 10,000 held-out test examples provided in the original datasets and randomly pick 10,000 from the standard 60,000 training examples (50,000 for CIFAR-10) as validation set. For values ofN that depend on the experiment, we retainN randomly chosen labeled examples from the training set, and remove labels from the rest. We balance classes in the labeled samples to ensure no particular class is overrepresented. Images are preprocessed for standardization and Gaussian noise is added to every pixel (\u03c3 = 0.3).\nMNIST The permutation invariant MNIST classification task is commonly used as a test-bed for general semisupervised learning algorithms. This setting does not use any prior information about the spatial arrangement of the input pixels. Therefore, it excludes many data augmentation techniques that involve geometric distortion of images, as well as convolutional neural networks.\nWhen evaluating on MNIST, we run experiments for 20 epochs, with a batch size of 10. Experiments are repeated\n2The code to reproduce all the experiments in this paper can be found at https://github.com/UCLA-StarAI/ Semantic-Loss/.\n10 times with different random seeds. Table 1 compares semantic loss to three baselines and state-of-the-art results from the literature. The first baseline is a purely supervised MLP, which makes no use of unlabeled data. The second is the classic self-training method for semi-supervised learning, which operates as follows. After every 1000 iterations, the unlabeled examples that are predicted by the MLP to have more than 95% probability of belonging to a single class, are assigned a pseudo-label and become labeled data.\nAdditionally, we constructed a third baseline by replacing the semantic loss term with the entropy regularizor described in Grandvalet & Bengio (2005) as a direct comparison for semantic loss. With the same amount of parameter tuning, we found that using entropy achieves an accuracy of 96.27% with 100 labeled examples, and 98.32% with 1000 labelled examples, both are slightly worse than the accuracies reached by semantic loss. Furthermore, to our best knowledge, there is no straightforward method to generalize entropy loss to the settings of complex constraints, where semantic loss is clearly defined and can be easily deployed. We will discuss this more in Section 5.\nLastly, We attempted to create a fourth baseline by constructing a constraint-sensitive loss term in the style of Hu et al. (2016), using a simple extension of Probabilistic Soft Logic (PSL) (Kimmig et al., 2012). PSL translates logic into continuous domains by using soft truth values, and defines functions in the real domain corresponding to each Boolean function. This is normally done for Horn clauses, but since they are not sufficiently expressive for our constraints, we apply fuzzy operators to arbitrary sentences instead. We are forced to deal with a key difference between semantic loss and PSL: encodings in fuzzy logic are highly sensitive to the syntax used for the constraint (and therefore violate Proposition 2). We selected two reasonable encod-\nings detailed in Appendix E. The first encoding results in a constant value of 1, and thus could not be used for semisupervised learning. The second encoding empirically deviates from 1 by < 0.01, and since we add Gaussian noise to the pixels, no amount of tuning was able to extract meaningful supervision. Thus, we do not report these results.\nWhen given 100 labeled examples (N = 100), MLP with semantic loss gains around 20% improvement over the purely supervised baseline. The improvement is even larger (25%) compared to self-training. Considering the only change is an additional loss term, this result is very encouraging. Comparing to the state of the art, ladder nets slightly outperform semantic loss by 0.5% accuracy. This difference may be an artifact of the excessive tuning of architectures, hyper-parameters and learning rates that the MNIST dataset has been subject to. In the coming experiments, we extend our work to more challenging datasets, in order to provide a clearer comparison with ladder nets. Before that, we want to share a few more thoughts on how semantic loss works. A classical softmax layer interprets its output as representing a categorical distribution. Hence, by normalizing its outputs, softmax enforces the same mutual exclusion constraint enforced in our semantic loss function. However, there does not exist a natural way to extend softmax loss to unlabeled samples. In contrast, semantic loss does provide a learning signal on unlabeled samples, by forcing the underlying classifier to make an decision and construct a confident hypothesis for all data. However, for the fully supervised case (N = all), semantic loss does not significantly affect accuracy. Because the MLP has enough capacity to almost perfectly fit the training data, where the constraint is always satisfied, semantic loss is almost always zero. This is a direct consequence of Proposition 3.\nFASHION The FASHION (Xiao et al., 2017) dataset consists of Zalando\u2019s article images, aiming to serve as a more challenging drop-in replacement for MNIST. Arguably, it has not been overused and requires more advanced techniques to achieve good performance. As in the previous experiment, we run our method for 20 epochs, whereas ladder nets need 100 epochs to converge. Again, experiments are repeated 10 times and Table 2 reports the classification accuracy and its standard deviation (except for N = all where it is close to 0 and omitted for space).\nExperiments show that utilizing semantic loss results in a very large 17% improvement over the baseline when only 100 labels are provided. Moreover, our method compares favorably to ladder nets, except when the setting degrades to be fully supervised. Note that our method already nearly reaches its maximum accuracy with 500 labeled examples, which is only 1% of the training dataset.\nCIFAR-10 To show the general applicability of semantic loss, we evaluate it on CIFAR-10. This dataset consisting of 32-by-32 RGB images in 10 classes. A simple MLP would not have enough representation power to capture the huge variance across objects within the same class. To cope with this spike in difficulty, we switch our underlying model to a 10-layer CNN as described earlier. We use a batch size of 100 samples of which half are unlabeled. Experiments are run for 100 epochs. However, due to our limited computational resources, we report on a single trial. Note that we make slight modifications to the underlying model used in ladder nets to reproduce similar baseline performance. Please refer to Appendix B for further details.\nAs shown in Table 3, our method compares favorably to ladder nets. However, due to the slight difference in performance between the supervised base models, a direct comparison would be methodologically flawed. Instead, we compare the net improvements over baselines. In terms of this measure, our method scores a gain of 4.66% whereas ladder nets gain 2.93%."
        },
        {
            "heading": "4.3. Discussion",
            "text": "The experiments so far have demonstrated the competitiveness and general applicability of our proposed method on semi-supervised learning tasks. It surpassed the previous\nstate of the art (ladder nets) on FASHION and CIFAR-10, while being close on MNIST. Considering the simplicity of our method, such results are encouraging. Indeed, a key advantage of semantic loss is that it only requires a simple additional loss term, and thus incurs almost no computational overhead. Conversely, this property makes our method sensitive to the underlying model\u2019s performance.\nWithout the underlying predictive power of a strong supervised learning model, we do not expect to see the same benefits we observe here. Recently, we became aware that Miyato et al. (2016) extended their work to CIFAR-10 and achieved state-of-the-art results (Miyato et al., 2017), surpassing our performance by 5%. In future work, we plan to investigate whether applying semantic loss on their architecture would yield an even stronger performance.\nFigure 5 in the appendix illustrates the effect of semantic loss on FASHION pictures whose correct label was hidden from the learner. Pictures 5a and 5b are correctly classified by the supervised base model, and on the first set it is confident about this prediction (pi > 0.8). Semantic loss rarely diverts the model from these initially correct labels. However, it bootstraps these unlabeled examples to achieve higher confidence in the learned concepts. With this additional learning signal, the model changes its beliefs about Pictures 5c, which it was previously uncertain about. Finally, even on confidently misclassified Pictures 5d, semantic loss is able to remedy the mistakes of the base model."
        },
        {
            "heading": "5. Learning with Complex Constraints",
            "text": "While much of current machine learning research is focused on problems such as multi-class classification, there remain a multitude of difficult problems involving highly constrained output domains. As mentioned in the previous section, semantic loss has little effect on the fullysupervised exactly-one classification problem. This leads us to seek out more difficult problems to illustrate that semantic loss can also be highly informative in the supervised case, provided the output domain is a sufficiently complex space. Because semantic loss is defined by a Boolean formula, it can be used on any output domain that can be fully described in this manner. Here, we develop a framework for making semantic loss tractable on highly complex constraints, and evaluate it on some difficult examples."
        },
        {
            "heading": "5.1. Tractability of Semantic Loss",
            "text": "Our goal here is to develop a general method for computing both semantic loss and its gradient in a tractable manner. Examining Definition 1 of semantic loss, we see that the right-hand side is a well-known automated reasoning task called weighted model counting (WMC) (Chavira & Darwiche, 2008; Sang et al., 2005).\nFurthermore, we know of circuit languages that compute WMCs, and that are amenable to backpropagation (Darwiche, 2003). We use the circuit compilation techniques in Darwiche (2011) to build a Boolean circuit representing semantic loss. We refer to the literature for details of this compilation approach. Due to certain properties of this circuit form, we can use it to compute both the values and the gradients of semantic loss in time linear in the size of the circuit (Darwiche & Marquis, 2002). Once constructed, we can add it to our standard loss function as described in Section 4.1.\nFigure 3 shows an example Boolean circuit for the exactlyone constraint with 3 variables. We begin with the standard logical encoding for the exactly-one constraint (x1 \u2228 x2 \u2228 x3)\u2227 (\u00acx1\u2228\u00acx2)\u2227 (\u00acx1\u2227\u00acx3)\u2227 (\u00acx2\u2227\u00acx3), and then compile it into a circuit that can perform WMC efficiently (Chavira & Darwiche, 2008). The cost of this step depends on the type of the constraint: for bounded-treewidth constraints it can be done efficiently, and for some constraints exact compilation is theoretically hard. In that case, we have to rely on advanced knowledge compilation algorithms to still perform this step efficiently in practice. Our semantic loss framework can be applied regardless of how the circuit gets compiled. On our example, following the circuit bottom up, the logical function can be read as (x1\u2227\u00acx2\u2227\u00acx3)\u2228 (\u00acx1\u2227x2\u2227\u00acx3)\u2228 (\u00acx1\u2227\u00acx2\u2227x3). Once this Boolean circuit is built, we can convert it to an arithmetic circuit, by simply changing AND gates into \u2217, and OR gates into +, as shown in Figure 4. Now, by pushing the probabilities up through the arithmetic circuit, evaluating the root gives the probability of the logical formula described by the Boolean circuit \u2013 this is precisely the exponentiated semantic loss. Notice that this computation was not possible with the Boolean formula we began with:\nit is a direct result of our circuit having two key properties called determinism and decomposability. Finally, we can similarly do another pass down on the circuit to compute partial derivatives (Darwiche & Marquis, 2002)."
        },
        {
            "heading": "5.2. Experimental Evaluation",
            "text": "Our ambition when evaluating semantic loss\u2019 performance on complex constraints is not to achieve state-of-the-art performance on any particular problem, but rather to highlight its effect. To this end, we evaluate our method on problems with a difficult output space, where the model could no longer be fit directly from data, and purposefully use simple MLPs for evaluation. We want to emphasize that the constraints used in this evaluation are intentionally designed to be very difficult; much more so than the simple implications that are usually studied (e.g., Hu et al. (2016)). Hyper-parameter tuning details are again in Appendix C.\nGrids We begin with a classic algorithmic problem: finding the shortest path in a graph. Specifically, we use a 4- by-4 grid G = (V,E) with uniform edge weights. We randomly remove edges for each example to increase difficulty. Formally, our input is a binary vector of length |V |+|E|, with the first |V | variables indicating sources and destinations, and the next |E| which edges are removed. Similarly, each label is a binary vector of length |E| indicating which edges are in the shortest path. Finally, we require through our constraint \u03b1 that the output form a valid simple path between the desired source and destination. To compile this constraint, we use the method of Nishino et al. (2017) to encode pairwise simple paths, and enforce the correct source and destination. For more details on the constraint and data generation process, see Appendix D.\nTo evaluate, we use a dataset of 1600 examples, with a 60/20/20 train/validation/test split. Table 4 compares test accuracy between a 5-layer MLP baseline, and the same model augmented with semantic loss. We report three different accuracies that illustrate the effect of semantic loss: \u201cCoherent\u201d indicates the percentage of examples for which the classifier gets the entire configuration right, while \u201cIncoherent\u201d measures the percentage of individually correct binary labels, which as a whole may not constitute a valid path at all. Finally, \u201cConstraint\u201d describes the percentage of predictions given by the model that satisfy the constraint associated with the problem. In the case of incoherent accuracy, semantic loss has little effect, and in fact slightly reduces the accuracy as it combats the standard sigmoid cross entropy. In regard to coherent accuracy however, semantic loss has a very large effect in guiding the network to jointly learn true paths, rather than optimizing each binary output individually. We further see this by observing the large increase in the percentage of predictions that really are paths between the desired nodes in the graph.\nPreference Learning The next problem is that of predicting a complete order of preferences. That is, for a given set of user features, we want to predict how the user ranks their preference over a fixed set of items. We encode a preference ordering over n items as a flattened binary matrix {Xij}, where for each i, j \u2208 {1, . . . , n}, Xij denotes that item i is at position j (Choi et al., 2015). Clearly, not all configurations of outputs correspond to a valid ordering, so our constraint allows only for those that are.\nWe use preference ranking data over 10 types of sushi for 5000 individuals, taken from PREFLIB (Mattei & Walsh, 2013). We take the ordering over 6 types of sushi as input features to predict the ordering over the remaining 4 types, with splits identical to those in Shen et al. (2017). We again split the data 60/20/20 into train/test/split, and employ a 3-layer MLP as our baseline. Table 5 compares the baseline to the same MLP augmented with semantic loss for valid total orderings. Again, we see that semantic loss has a marginal effect on incoherent accuracy, but significantly improves the network\u2019s ability to predict valid, correct orderings. Remarkably, without semantic loss, the network is only able to output a valid ordering on 1% of examples."
        },
        {
            "heading": "6. Related Work",
            "text": "Incorporating symbolic background knowledge into machine learning is a long-standing challenge (Srinivasan et al., 1995). It has received considerable attention for structured prediction in natural language processing, in both supervised and semi-supervised settings. For example, constrained conditional models extend linear models with constraints that are enforced through integer linear programming (Chang et al., 2008; 2013). Constraints have also been studied in the context of probabilistic graphical models (Mateescu & Dechter, 2008; Ganchev et al., 2010). Kisa et al. (2014) utilize a circuit language called the probabilistic sentential decision diagram to induce distributions over arbitrary logical formulas. They learn generative models that satisfy preference and path constraints (Choi et al.,\n2015; 2016), which we study in a discriminative setting.\nVarious deep learning techniques have been proposed to enforce either arithmetic constraints (Pathak et al., 2015; Ma\u0301rquez-Neila et al., 2017) or logical constraints (Rockta\u0308schel et al., 2015; Hu et al., 2016; Demeester et al., 2016; Stewart & Ermon, 2017; Minervini et al., 2017; Diligenti et al., 2017; Donadello et al., 2017) on the output of a neural network. The common approach is to reduce logical constraints into differentiable arithmetic objectives by replacing logical operators with their fuzzy tnorms and logical implications with simple inequalities. A downside of this fuzzy relaxation is that the logical sentences lose their precise meaning. The learning objective becomes a function of the syntax rather than the semantics (see Section 4). Moreover, these relaxations are often only applied to Horn clauses. One alternative is to encode the logic into a factor graph and perform loopy belief propagation to compute a loss function (Naradowsky & Riedel, 2017), which is known to have issues in the presence of complex logical constraints (Smith & Gogate, 2014).\nSeveral specialized techniques have been proposed to exploit the rich structure of real-world labels. Deng et al. (2014) propose hierarchy and exclusion graphs that jointly model hierarchical categories. It is a method invented to address examples whose labels are not provided at the most specific level. Finally, the objective of semantic loss to increase the confidence of predictions on unlabeled data is related to information-theoretic approaches to semisupervised learning (Grandvalet & Bengio, 2005; Erkan & Altun, 2010), and approaches that increase robustness to output perturbation (Miyato et al., 2016). A key difference between semantic loss and these information-theoretic losses is that semantic loss generalizes to arbitrary logical output constraints that are much more complex."
        },
        {
            "heading": "7. Conclusions & Future Work",
            "text": "Both reasoning and semi-supervised learning are often identified as key challenges for deep learning going forward. In this paper, we developed a principled way of combining automated reasoning for propositional logic with existing deep learning architectures. Moreover, we showed that semantic loss provides significant benefits during semisupervised classification, as well as deep structured prediction for highly complex output spaces.\nAn interesting direction for future work is to come up with effective approximations of semantic loss, for settings where even the methods we have described are not sufficient. There are several potential ways to proceed with this, including hierarchical abstractions, relaxations of the constraints, or projections on random subsets of variables."
        },
        {
            "heading": "Acknowledgements",
            "text": "This research was conducted while Zilu Zhang was a visiting student at StarAI Lab, UCLA. The authors thank Arthur Choi and Yujia Shen for helpful discussions. This work is partially supported by NSF grants #IIS-1657613, #IIS1633857 and DARPA XAI grant #N66001-17-2-4032."
        },
        {
            "heading": "A. Axiomatization of Semantic Loss: Details",
            "text": "This appendix provides further details on our axiomatization of semantic loss. We detail here a complete axiomatization of semantic loss, which will involve restating some axioms and propositions from the main paper.\nThe first axiom says that there is no loss when the logical constraint \u03b1 is always true (it is a logical tautology), independent of the predicted probabilities p.\nAxiom 5 (Truth). The semantic loss of a true sentence is zero: \u2200p,Ls(true, p) = 0.\nNext, when enforcing two constraints on disjoint sets of variables, we want the ability to compute semantic loss for the two constraints separately, and sum the results for their joint semantic loss.\nAxiom 6 (Additive Independence). Let \u03b1 be a sentence over X with probabilities p. Let \u03b2 be a sentence over Y disjoint from X with probabilities q. The semantic loss between sentence \u03b1 \u2227 \u03b2 and the joint probability vector [p q] decomposes additively: Ls(\u03b1\u2227\u03b2, [p q]) = Ls(\u03b1, p) + Ls(\u03b2, q).\nIt directly follows from Axioms 5 and 6 that the probabilities of variables that are not used on the constraint do not affect the semantic loss.\nProposition 5 formalizes this intuition.\nProposition 5 (Locality). Let \u03b1 be a sentence over X with probabilities p. For any Y disjoint from X with probabilities q, the semantic loss Ls(\u03b1, [p q]) = Ls(\u03b1, p).\nProof. Follows from the additive independence and truth axioms. Set \u03b2 = true in the additive independence axiom, and observe that this sets Ls(\u03b2, q) = 0 because of the truth axiom.\nTo maintain logical meaning, we postulate that semantic loss is monotone in the order of implication.\nAxiom 7 (Monotonicity). If \u03b1 |= \u03b2, then the semantic loss Ls(\u03b1, p) \u2265 Ls(\u03b2, p) for any vector p.\nIntuitively, as we add stricter requirements to the logical constraint, going from \u03b2 to \u03b1 and making it harder to satisfy, semantic loss cannot decrease. For example, when \u03b2 enforces the output of an neural network to encode a subtree of a graph, and we tighten that requirement in \u03b1 to be a path, semantic loss cannot decrease. Every path is also a tree and any solution to \u03b1 is a solution to \u03b2.\nA first consequence following the monotonicity axiom is that logically equivalent sentences must incur an identical semantic loss for the same probability vector p. Hence, the semantic loss is indeed a semantic property of the logical\nsentence, and does not depend on the syntax of the sentence. Proposition 6. If \u03b1 \u2261 \u03b2, then the semantic loss Ls(\u03b1, p) = Ls(\u03b2, p) for any vector p.\nA second consequence is that semantic loss must be nonnegative. Proposition 7 (Non-Negativity). Semantic loss is nonnegative.\nProof. Because \u03b1 |= true for all \u03b1, the monotonicity axiom implies that \u2200p,Ls(\u03b1, p) \u2265 Ls(true, p). By the truth axiom, Ls(true, p) = 0, and therefore Ls(\u03b1, p) \u2265 0 for all choices of \u03b1 and p.\nA state x is equivalently represented as a data vector, as well as a logical constraint that enforces a value for every variable in X. When both the constraint and the predicted vector represent the same state (for example, X1 \u2227 \u00acX2 \u2227 X3 vs. [1 0 1]), there should be no semantic loss. Axiom 8 (Identity). For any state x, there is zero semantic loss between its representation as a sentence, and its representation as a deterministic vector: \u2200x,Ls(x,x) = 0.\nThe axioms above together imply that any vector satisfying the constraint must incur zero loss. For example, when our constraint \u03b1 requires that the output vector encodes an arbitrary total ranking, and the vector x correctly represents a single specific total ranking, there is no semantic loss. Proposition 8 (Satisfaction). If x |= \u03b1, then the semantic loss Ls(\u03b1,x) = 0.\nProof of Proposition 8. The monotonicity axiom specializes to say that if x |= \u03b1, we have that \u2200p,Ls(x, p) \u2265 Ls(\u03b1, p). By choosing p to be x, this implies Ls(x,x) \u2265 Ls(\u03b1,x). From the identity axiom, Ls(x,x) = 0, and therefore 0 \u2265 Ls(\u03b1,x). Proposition 7 bounds the loss from below as Ls(\u03b1,x) \u2265 0.\nAs a special case, logical literals (x or \u00acx) constrain a single variable to take on a single value, and thus play a role similar to the labels used in supervised learning. Such constraints require an even tighter correspondence: semantic loss must act like a classical loss function (i.e., cross entropy). Axiom 9 (Label-Literal Correspondence). The semantic loss of a single literal is proportionate to the cross-entropy loss for the equivalent data label: Ls(x, p) \u221d \u2212 log(p) and Ls(\u00acx, p) \u221d \u2212 log(1\u2212 p).\nNext, we have the symmetry axioms. Axiom 10 (Value Symmetry). For all p and \u03b1, we have that Ls(\u03b1, p) = Ls(\u03b1\u0304, 1\u2212p) where \u03b1\u0304 replaces every variable in \u03b1 by its negation.\nAxiom 11 (Variable Symmetry). Let \u03b1 be a sentence over X with probabilities p. Let \u03c0 be a permutation of the variables X, let \u03c0(\u03b1) be the sentence obtained by replacing variables x by \u03c0(x), and let \u03c0(p) be the corresponding permuted vector of probabilities. Then, Ls(\u03b1, p) = Ls(\u03c0(\u03b1), \u03c0(p)).\nThe value and variable symmetry axioms together imply the equality of the multiplicative constants in the labelliteral duality axiom for all literals.\nLemma 9. There exists a single constant K such that Ls(X, p) = \u2212K log(p) and Ls(\u00acX, p) = \u2212K log(1 \u2212 p) for any literal x.\nProof. Value symmetry implies that Ls(Xi, p) = Ls(\u00acXi, 1 \u2212 p). Using label-literal correspondence, this implies K1 log(pi) = K2 log(1 \u2212 (1 \u2212 pi)) for the multiplicative constants K1 and K2 that are left unspecified by that axiom. This implies that the constants are identical. A similar argument based on variable symmetry proves equality between the multiplicative constants for different i.\nFinally, this allows us to prove the following form of semantic loss for a state x. Lemma 10. For state x and vector p, we have Ls(x, p) \u221d \u2212 \u2211 i:x|=Xi log pi \u2212 \u2211 i:x|=\u00acXi log(1\u2212 pi).\nProof of Lemma 10. A state x is a conjunction of independent literals, and therefore subject to the additive independence axiom. Each literal\u2019s loss in this sum is defined by Lemma 9.\nThe following and final axiom requires that semantic loss is proportionate to the logarithm of a function that is additive for mutually exclusive sentences.\nAxiom 12 (Exponential Additivity). Let \u03b1 and \u03b2 be mutually exclusive sentences (i.e., \u03b1 \u2227 \u03b2 is unsatisfiable), and let fs(K,\u03b1, p) = K\u2212L\ns(\u03b1,p). Then, there exists a positive constant K such that fs(K,\u03b1\u2228\u03b2, p) = fs(K,\u03b1, p) + fs(K,\u03b2, p).\nWe are now able to state and prove the main uniqueness theorem.\nTheorem 11 (Uniqueness). The semantic loss function in Definition 1 satisfies all axioms in Appendix A and is the only function that does so, up to a multiplicative constant.\nProof of Theorem 11. The truth axiom states that \u2200p, fs(K, true, p) = 1 for all positive constants K. This is the first Kolmogorov axiom of probability. The second Kolmogorov axiom for fs(K, ., p) follows from the additive independence axiom of semantic loss. The\nthird Kolmogorov axiom (for the finite discrete case) is given by the exponential additivity axiom of semantic loss. Hence, fs(K, ., p) is a probability distribution for some choice of K, which implies the definition up to a multiplicative constant."
        },
        {
            "heading": "B. Specification of the Convolutional Neural Network Model",
            "text": "Table 6 shows the slight architectural difference between the CNN used in ladder nets and ours. The major difference lies in the choice of ReLu. Note we add standard padded cropping to preprocess images and an additional fully connected layer at the end of the model, neither is used in ladder nets. We only make those slight modification so that the baseline performance reported by Rasmus et al. (2015) can be reproduced."
        },
        {
            "heading": "C. Hyper-parameter Tuning Details",
            "text": "Validation sets are used for tuning the weight associated with semantic loss, the only hyper-parameter that causes noticeable difference in performance for our method. For our semi-supervised classification experiments, we perform a grid search over {0.001, 0.005, 0.01, 0.05, 0.1} to find the optimal value. Empirically, 0.005 always gives the best or nearly the best results and we report its results on all experiments.\nFor the FASHION dataset specifically, because MNIST and FASHION share the same image size and structure, methods developed in MNIST should be able to directly perform on FASHION without heavy modifications. Because of this, we use the same hyper-parameters when evaluating our method. However, for the sake of fairness, we subject ladder nets to a small-scale parameter tuning in case its performance is more volatile.\nFor the grids experiment, the only hyper parameter that needed to be tuned was again the weight given to semantic loss, which after trying {0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1} was selected to be 0.5 based on validation results. For the preference learning experiment, we initially chose the semantic loss weight from {0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1} to be 0.1 based on validation, and then further tuned the weight to 0.25."
        },
        {
            "heading": "D. Specification of Complex Constraint Models",
            "text": "Grids To compile our grid constraint, we first use Nishino et al. (2017) to generate a constraint for each source destination pair. Then, we conjoin each of these with indicators specifying which source and destination\npair must be used, and finally we disjoin all of these together to form our constraint.\nTo generate the data, we begin by randomly removing one third of edges. We then filter out connected components with fewer than 5 nodes to reduce degenerate cases, and proceed with randomly selecting pairs of nodes to create data points.\nThe predictive model we employ as our baseline is a 5 layer MLP with 50 hidden sigmoid units per layer. It is trained using Adam Optimizer, with full data batches (Kingma & Ba, 2015). Early stopping with respect to validation loss is used as a regularizer.\nPreference Learning We split each user\u2019s ordering into their ordering over sushis 1,2,3,5,7,8, which we use as the features, and their ordering over 4,6,9,10 which are the labels we predict. The constraint is compiled directly from\nlogic, as this can be done in a straightforward manner for an n-item ordering.\nThe predictive model we use here is a 3 layer MLP with 25 hidden sigmoid units per layer. It is trained using Adam Optimizer with full data batches (Kingma & Ba, 2015). Early stopping with respect to validation loss is used as a regularizer."
        },
        {
            "heading": "E. Probabilistic Soft Logic Encodings",
            "text": "We here give both encodings on the exactly-one constraint over three x1, x2, x3. The first encoding is:\n(\u00acx1 \u2227 x2 \u2227 x3) \u2228 (x1 \u2227 \u00acx2 \u2227 x3) \u2228 (x1 \u2227 x2 \u2227 \u00acx3)\nThe second encoding is:\n(x1\u2228x2\u2228x3)\u2227(\u00acx1\u2228\u00acx2)\u2227(\u00acx1\u2228\u00acx3)\u2227(\u00acx2\u2228\u00acx3)\nBoth encodings extend to cases whether the number of variables is arbitrary.\nThe norm functions used for these experiments are as described in Kimmig et al. (2012), with the loss for an interpretation I being defined as follows:\nx1 \u2227 x2 = max{0, I(x1) + I(x2)\u2212 1} x1 \u2228 x2 = min{I(x1) + I(x2), 1} \u00acx1 = 1\u2212 I(x1)"
        }
    ],
    "title": "A Semantic Loss Function for Deep Learning with Symbolic Knowledge",
    "year": 2018
}