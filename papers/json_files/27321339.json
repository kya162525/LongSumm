{
    "abstractText": "Supervised learning on molecules has incredible potential to be useful in chemistry, drug discovery, and materials science. Luckily, several promising and closely related neural network models invariant to molecular symmetries have already been described in the literature. These models learn a message passing algorithm and aggregation procedure to compute a function of their entire input graph. At this point, the next step is to find a particularly effective variant of this general approach and apply it to chemical prediction benchmarks until we either solve them or reach the limits of the approach. In this paper, we reformulate existing models into a single common framework we call Message Passing Neural Networks (MPNNs) and explore additional novel variations within this framework. Using MPNNs we demonstrate state of the art results on an important molecular property prediction benchmark; these results are strong enough that we believe future work should focus on datasets with larger molecules or more accurate ground truth labels.",
    "authors": [
        {
            "affiliations": [],
            "name": "Justin Gilmer"
        },
        {
            "affiliations": [],
            "name": "Samuel S. Schoenholz"
        },
        {
            "affiliations": [],
            "name": "Patrick F. Riley"
        },
        {
            "affiliations": [],
            "name": "Oriol Vinyals"
        },
        {
            "affiliations": [],
            "name": "George E. Dahl"
        }
    ],
    "id": "SP:e24cdf73b3e7e590c2fe5ecac9ae8aa983801367",
    "references": [
        {
            "authors": [
                "Battaglia",
                "Peter",
                "Pascanu",
                "Razvan",
                "Lai",
                "Matthew",
                "Rezende",
                "Danilo Jimenez",
                "Kavukcuoglu",
                "Koray"
            ],
            "title": "Interaction networks for learning about objects, relations and physics",
            "venue": "In Advances in Neural Information Processing Systems,",
            "year": 2016
        },
        {
            "authors": [
                "Becke",
                "Axel D"
            ],
            "title": "Density-functional thermochemistry. iii. the role of exact exchange",
            "venue": "The Journal of Chemical Physics,",
            "year": 1993
        },
        {
            "authors": [
                "Behler",
                "J\u00f6rg",
                "Parrinello",
                "Michele"
            ],
            "title": "Generalized neural-network representation of high-dimensional potential-energy surfaces",
            "venue": "Phys. Rev. Lett.,",
            "year": 2007
        },
        {
            "authors": [
                "Bruna",
                "Joan",
                "Zaremba",
                "Wojciech",
                "Szlam",
                "Arthur",
                "LeCun",
                "Yann"
            ],
            "title": "Spectral networks and locally connected networks on graphs",
            "venue": "arXiv preprint arXiv:1312.6203,",
            "year": 2013
        },
        {
            "authors": [
                "Cho",
                "Kyunghyun",
                "Van Merri\u00ebnboer",
                "Bart",
                "Bahdanau",
                "Dzmitry",
                "Bengio",
                "Yoshua"
            ],
            "title": "On the properties of neural machine translation: Encoder-decoder approaches",
            "venue": "arXiv preprint arXiv:1409.1259,",
            "year": 2014
        },
        {
            "authors": [
                "Defferrard",
                "Micha\u00ebl",
                "Bresson",
                "Xavier",
                "Vandergheynst",
                "Pierre"
            ],
            "title": "Convolutional neural networks on graphs with fast localized spectral filtering",
            "venue": "In Advances in Neural Information Processing Systems,",
            "year": 2016
        },
        {
            "authors": [
                "P. Hohenberg",
                "W. Kohn"
            ],
            "title": "Inhomogeneous electron gas",
            "year": 2012
        },
        {
            "authors": [
                "T.N. Kipf",
                "M. Welling"
            ],
            "title": "Semi-Supervised Classification with Graph Convolutional Networks",
            "venue": "ArXiv eprints,",
            "year": 2016
        },
        {
            "authors": [
                "Krizhevsky",
                "Alex",
                "Sutskever",
                "Ilya",
                "Hinton",
                "Geoffrey E"
            ],
            "title": "Imagenet classification with deep convolutional neural networks. In Advances in neural information processing",
            "year": 2012
        },
        {
            "authors": [
                "Li",
                "Yujia",
                "Tarlow",
                "Daniel",
                "Brockschmidt",
                "Marc",
                "Zemel",
                "Richard"
            ],
            "title": "Gated graph sequence neural networks",
            "year": 2016
        },
        {
            "authors": [
                "Lusci",
                "Alessandro",
                "Pollastri",
                "Gianluca",
                "Baldi",
                "Pierre"
            ],
            "title": "Deep architectures and deep learning in chemoinformatics: the prediction of aqueous solubility for drug-like molecules",
            "venue": "Journal of chemical information and modeling,",
            "year": 2013
        },
        {
            "authors": [
                "Marino",
                "Kenneth",
                "Salakhutdinov",
                "Ruslan",
                "Gupta",
                "Abhinav"
            ],
            "title": "The more you know: Using knowledge graphs for image classification",
            "venue": "arXiv preprint arXiv:1612.04844,",
            "year": 2016
        },
        {
            "authors": [
                "Merkwirth",
                "Christian",
                "Lengauer",
                "Thomas"
            ],
            "title": "Automatic generation of complementary descriptors with molecular graph networks",
            "venue": "Journal of chemical information and modeling,",
            "year": 2005
        },
        {
            "authors": [
                "Micheli",
                "Alessio"
            ],
            "title": "Neural network for graphs: A contextual constructive approach",
            "venue": "IEEE Transactions on Neural Networks,",
            "year": 2009
        },
        {
            "authors": [
                "Niepert",
                "Mathias",
                "Ahmed",
                "Mohamed",
                "Kutzkov",
                "Konstantin"
            ],
            "title": "Learning convolutional neural networks for graphs",
            "venue": "In Proceedings of the 33rd annual international conference on machine learning",
            "year": 2016
        },
        {
            "authors": [
                "Ramakrishnan",
                "Raghunathan",
                "Dral",
                "Pavlo O",
                "Rupp",
                "Matthias",
                "Von Lilienfeld",
                "O Anatole"
            ],
            "title": "Quantum chemistry structures and properties of 134 kilo molecules",
            "venue": "Scientific data,",
            "year": 2014
        },
        {
            "authors": [
                "Rogers",
                "David",
                "Hahn",
                "Mathew"
            ],
            "title": "Extended-connectivity fingerprints",
            "venue": "Journal of chemical information and modeling,",
            "year": 2010
        }
    ],
    "sections": [
        {
            "heading": "1. Introduction",
            "text": "The past decade has seen remarkable success in the use of deep neural networks to understand and translate natural language (Wu et al., 2016), generate and decode complex audio signals (Hinton et al., 2012), and infer features from real-world images and videos (Krizhevsky et al., 2012). Although chemists have applied machine learning to many problems over the years, predicting the properties of molecules and materials using machine learning (and especially deep learning) is still in its infancy. To date, most research applying machine learning to chemistry tasks (Hansen et al., 2015; Huang & von Lilienfeld, 2016;\n1Google Brain 2Google 3Google DeepMind. Correspondence to: Justin Gilmer <gilmer@google.com>, George E. Dahl <gdahl@google.com>.\nProceedings of the 34 th International Conference on Machine Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by the author(s).\nDFT\n\u21e0 103 seconds\nMessage Passing Neural Net\n\u21e0 10 2 seconds\nE,!0, ...\nTargets\n1\nFigure 1. A Message Passing Neural Network predicts quantum properties of an organic molecule by modeling a computationally expensive DFT calculation.\nRupp et al., 2012; Rogers & Hahn, 2010; Montavon et al., 2012; Behler & Parrinello, 2007; Schoenholz et al., 2016) has revolved around feature engineering. While neural networks have been applied in a variety of situations (Merkwirth & Lengauer, 2005; Micheli, 2009; Lusci et al., 2013; Duvenaud et al., 2015), they have yet to become widely adopted. This situation is reminiscent of the state of image models before the broad adoption of convolutional neural networks and is due, in part, to a dearth of empirical evidence that neural architectures with the appropriate inductive bias can be successful in this domain.\nRecently, large scale quantum chemistry calculation and molecular dynamics simulations coupled with advances in high throughput experiments have begun to generate data at an unprecedented rate. Most classical techniques do not make effective use of the larger amounts of data that are now available. The time is ripe to apply more powerful and flexible machine learning methods to these problems, assuming we can find models with suitable inductive biases. The symmetries of atomic systems suggest neural networks that operate on graph structured data and are invariant to graph isomorphism might also be appropriate for molecules. Sufficiently successful models could someday help automate challenging chemical search problems in drug discovery or materials science.\nIn this paper, our goal is to demonstrate effective machine learning models for chemical prediction problems\nar X\niv :1\n70 4.\n01 21\n2v 2\n[ cs\n.L G\n] 1\n2 Ju\nn 20\n17\nthat are capable of learning their own features from molecular graphs directly and are invariant to graph isomorphism. To that end, we describe a general framework for supervised learning on graphs called Message Passing Neural Networks (MPNNs) that simply abstracts the commonalities between several of the most promising existing neural models for graph structured data, in order to make it easier to understand the relationships between them and come up with novel variations. Given how many researchers have published models that fit into the MPNN framework, we believe that the community should push this general approach as far as possible on practically important graph problems and only suggest new variations that are well motivated by applications, such as the application we consider here: predicting the quantum mechanical properties of small organic molecules (see task schematic in figure 1).\nIn general, the search for practically effective machine learning (ML) models in a given domain proceeds through a sequence of increasingly realistic and interesting benchmarks. Here we focus on the QM9 dataset as such a benchmark (Ramakrishnan et al., 2014). QM9 consists of 130k molecules with 13 properties for each molecule which are approximated by an expensive1 quantum mechanical simulation method (DFT), to yield 13 corresponding regression tasks. These tasks are plausibly representative of many important chemical prediction problems and are (currently) difficult for many existing methods. Additionally, QM9 also includes complete spatial information for the single low energy conformation of the atoms in the molecule that was used in calculating the chemical properties. QM9 therefore lets us consider both the setting where the complete molecular geometry is known (atomic distances, bond angles, etc.) and the setting where we need to compute properties that might still be defined in terms of the spatial positions of atoms, but where only the atom and bond information (i.e. graph) is available as input. In the latter case, the model must implicitly fit something about the computation used to determine a low energy 3D conformation and hopefully would still work on problems where it is not clear how to compute a reasonable 3D conformation.\nWhen measuring the performance of our models on QM9, there are two important benchmark error levels. The first is the estimated average error of the DFT approximation to nature, which we refer to as \u201cDFT error.\u201d The second, known as \u201cchemical accuracy,\u201d is a target error that has been established by the chemistry community. Estimates of DFT error and chemical accuracy are provided for each of the 13 targets in Faber et al. (2017). One important goal of this line of research is to produce a model which can achieve chemical accuracy with respect to the\n1By comparison, the inference time of the neural networks discussed in this work is 300k times faster.\ntrue targets as measured by an extremely precise experiment. The dataset containing the true targets on all 134k molecules does not currently exist. However, the ability to fit the DFT approximation to within chemical accuracy would be an encouraging step in this direction. For all 13 targets, achieving chemical accuracy is at least as hard as achieving DFT error. In the rest of this paper when we talk about chemical accuracy we generally mean with respect to our available ground truth labels.\nIn this paper, by exploring novel variations of models in the MPNN family, we are able to both achieve a new state of the art on the QM9 dataset and to predict the DFT calculation to within chemical accuracy on all but two targets. In particular, we provide the following key contributions:\n\u2022 We develop an MPNN which achieves state of the art results on all 13 targets and predicts DFT to within chemical accuracy on 11 out of 13 targets.\n\u2022 We develop several different MPNNs which predict DFT to within chemical accuracy on 5 out of 13 targets while operating on the topology of the molecule alone (with no spatial information as input).\n\u2022 We develop a general method to train MPNNs with larger node representations without a corresponding increase in computation time or memory, yielding a substantial savings over previous MPNNs for high dimensional node representations.\nWe believe our work is an important step towards making well-designed MPNNs the default for supervised learning on modestly sized molecules. In order for this to happen, researchers need to perform careful empirical studies to find the proper way to use these types of models and to make any necessary improvements to them, it is not sufficient for these models to have been described in the literature if there is only limited accompanying empirical work in the chemical domain. Indeed convolutional neural networks existed for decades before careful empirical work applying them to image classification (Krizhevsky et al., 2012) helped them displace SVMs on top of handengineered features for a host of computer vision problems."
        },
        {
            "heading": "2. Message Passing Neural Networks",
            "text": "There are at least eight notable examples of models from the literature that we can describe using our Message Passing Neural Networks (MPNN) framework. For simplicity we describe MPNNs which operate on undirected graphs G with node features xv and edge features evw. It is trivial to extend the formalism to directed multigraphs. The forward pass has two phases, a message passing phase and a readout phase. The message passing phase runs for T\ntime steps and is defined in terms of message functions Mt and vertex update functions Ut. During the message passing phase, hidden states htv at each node in the graph are updated based on messages mt+1v according to\nmt+1v = \u2211\nw\u2208N(v) Mt(h\nt v, h t w, evw) (1)\nht+1v = Ut(h t v,m t+1 v ) (2)\nwhere in the sum,N(v) denotes the neighbors of v in graph G. The readout phase computes a feature vector for the whole graph using some readout function R according to\ny\u0302 = R({hTv | v \u2208 G}). (3)\nThe message functionsMt, vertex update functions Ut, and readout function R are all learned differentiable functions. R operates on the set of node states and must be invariant to permutations of the node states in order for the MPNN to be invariant to graph isomorphism. In what follows, we define previous models in the literature by specifying the message function Mt, vertex update function Ut, and readout function R used. Note one could also learn edge features in an MPNN by introducing hidden states for all edges in the graph htevw and updating them analogously to equations 1 and 2. Of the existing MPNNs, only Kearnes et al. (2016) has used this idea.\nConvolutional Networks for Learning Molecular Fingerprints, Duvenaud et al. (2015)\nThe message function used is M(hv, hw, evw) = (hw, evw) where (., .) denotes concatenation. The vertex update function used is Ut(htv,m t+1 v ) = \u03c3(H deg(v) t m t+1 v ), where \u03c3 is the sigmoid function, deg(v) is the degree of vertex v and HNt is a learned matrix for each time step t and vertex degreeN . R has skip connections to all previous\nhidden states htv and is equal to f (\u2211 v,t softmax(Wthtv) ) , where f is a neural network and Wt are learned readout matrices, one for each time step t. This message passing scheme may be problematic since the resulting message vector is mt+1v = ( \u2211 htw, \u2211 evw) , which separately sums over connected nodes and connected edges. It follows that the message passing implemented in Duvenaud et al. (2015) is unable to identify correlations between edge states and node states.\nGated Graph Neural Networks (GG-NN), Li et al. (2016)\nThe message function used isMt(htv, h t w, evw) = Aevwh t w, where Aevw is a learned matrix, one for each edge label e (the model assumes discrete edge types). The update function is Ut = GRU(htv,m t+1 v ), where GRU is the Gated\nRecurrent Unit introduced in Cho et al. (2014). This work used weight tying, so the same update function is used at each time step t. Finally,\nR = \u2211 v\u2208V \u03c3 ( i(h(T )v , h 0 v) ) ( j(h(T )v ) ) (4)\nwhere i and j are neural networks, and denotes elementwise multiplication.\nInteraction Networks, Battaglia et al. (2016)\nThis work considered both the case where there is a target at each node in the graph, and where there is a graph level target. It also considered the case where there are node level effects applied at each time step, in such a case the update function takes as input the concatenation (hv, xv,mv) where xv is an external vector representing some outside influence on the vertex v. The message function M(hv, hw, evw) is a neural network which takes the concatenation (hv, hw, evw). The vertex update function U(hv, xv,mv) is a neural network which takes as input the concatenation (hv, xv,mv). Finally, in the case where there is a graph level output, R = f(\n\u2211 v\u2208G hTv ) where f is\na neural network which takes the sum of the final hidden states hTv . Note the original work only defined the model for T = 1.\nMolecular Graph Convolutions, Kearnes et al. (2016)\nThis work deviates slightly from other MPNNs in that it introduces edge representations etvw which are updated during the message passing phase. The message function used for node messages is M(htv, h t w, e t vw) = e t vw. The vertex update function is Ut(htv,m t+1 v ) = \u03b1(W1(\u03b1(W0h t v),m t+1 v )) where (., .) denotes concatenation, \u03b1 is the ReLU activation and W1,W0 are learned weight matrices. The edge state update is defined by et+1vw = U \u2032 t(e t vw, h t v, h t w) = \u03b1(W4(\u03b1(W2, e t vw), \u03b1(W3(h t v, h t w)))) where the Wi are also learned weight matrices.\nDeep Tensor Neural Networks, Schu\u0308tt et al. (2017)\nThe message from w to v is computed by Mt = tanh ( W fc((W cfhtw + b1) (W dfevw + b2)) ) where W fc, W cf , W df are matrices and b1, b2 are bias vectors. The update function used is Ut(htv,m t+1 v ) = htv + m t+1 v . The readout function passes each node independently through a single hidden layer neural network and sums the outputs, in particular\nR = \u2211 v NN(hTv ).\nLaplacian Based Methods, Bruna et al. (2013); Defferrard et al. (2016); Kipf & Welling (2016)\nThese methods generalize the notion of the convolution operation typically applied to image datasets to an operation that operates on an arbitrary graph G with a real valued adjacency matrix A. The operations defined in Bruna et al. (2013); Defferrard et al. (2016) result in message functions of the form Mt(htv, h t w) = C t vwh t w, where the matrices Ctvw are parameterized by the eigenvectors of the graph laplacian L, and the learned parameters of the model. The vertex update function used is Ut(htv,m t+1 v ) = \u03c3(m t+1 v ) where \u03c3 is some pointwise non-linearity (such as ReLU).\nThe Kipf & Welling (2016) model results in a message function Mt(htv, h t w) = cvwh t w where cvw = (deg(v)deg(w))\u22121/2Avw. The vertex update function is U tv(h t v,m t+1 v ) = ReLU(W\ntmt+1v ). For the exact expressions for the Ctvw and the derivation of the reformulation of these models as MPNNs, see the supplementary material."
        },
        {
            "heading": "2.1. Moving Forward",
            "text": "Given how many instances of MPNNs have appeared in the literature, we should focus on pushing this general family as far as possible in a specific application of substantial practical importance. This way we can determine the most crucial implementation details and potentially reach the limits of these models to guide us towards future modeling improvements.\nOne downside of all of these approaches is computation time. Recent work has adapted the GG-NN architecture to larger graphs by passing messages on only subsets of the graph at each time step (Marino et al., 2016). In this work we also present a MPNN modification that can improve the computational costs."
        },
        {
            "heading": "3. Related Work",
            "text": "Although in principle quantum mechanics lets us compute the properties of molecules, the laws of physics lead to equations that are far too difficult to solve exactly. Therefore scientists have developed a hierarchy of approximations to quantum mechanics with varying tradeoffs of speed and accuracy, such as Density Functional Theory (DFT) with a variety of functionals (Becke, 1993; Hohenberg & Kohn, 1964), the GW approximation (Hedin, 1965), and Quantum Monte-Carlo (Ceperley & Alder, 1986). Despite being widely used, DFT is simultaneously still too slow to be applied to large systems (scaling asO(N3e ) where Ne is the number of electrons) and exhibits systematic as well as random errors relative to exact solutions to Schro\u0308dinger\u2019s equation. For example, to run the DFT calculation on a single 9 heavy atom molecule in QM9 takes around an hour on a single core of a Xeon E5-2660 (2.2 GHz) using a version of Gaussian G09 (ES64L-G09RevD.01) (Bing et al., 2017). For a 17 heavy atom molecule, computation time is\nup to 8 hours. Empirical potentials have been developed, such as the Stillinger-Weber potential (Stillinger & Weber, 1985), that are fast and accurate but must be created from scratch, from first principles, for every new composition of atoms.\nHu et al. (2003) used neural networks to approximate a particularly troublesome term in DFT called the exchange correlation potential to improve the accuracy of DFT. However, their method fails to improve upon the efficiency of DFT and relies on a large set of ad hoc atomic descriptors.\nTwo more recent approaches by Behler & Parrinello (2007) and Rupp et al. (2012) attempt to approximate solutions to quantum mechanics directly without appealing to DFT. In the first case single-hidden-layer neural networks were used to approximate the energy and forces for configurations of a Silicon melt with the goal of speeding up molecular dynamics simulations. The second paper used Kernel Ridge Regression (KRR) to infer atomization energies over a wide range of molecules. In both cases hand engineered features were used (symmetry functions and the Coulomb matrix, respectively) that built physical symmetries into the input representation. Subsequent papers have replaced KRR by a neural network.\nBoth of these lines of research used hand engineered features that have intrinsic limitations. The work of Behler & Parrinello (2007) used a representation that was manifestly invariant to graph isomorphism, but has difficulty when applied to systems with more than three species of atoms and fails to generalize to novel compositions. The representation used in Rupp et al. (2012) is not invariant to graph isomorphism. Instead, this invariance must be learned by the downstream model through dataset augmentation.\nIn addition to the eight MPNNs discussed in Section 2 there have been a number of other approaches to machine learning on graphical data which take advantage of the symmetries in a number of ways. One such family of approaches define a preprocessing step which constructs a canonical graph representation which can then be fed into into a standard classifier. Examples in this family include Niepert et al. (2016) and Rupp et al. (2012). Finally Scarselli et al. (2009) define a message passing process on graphs which is run until convergence, instead of for a finite number of time steps as in MPNNs."
        },
        {
            "heading": "4. QM9 Dataset",
            "text": "To investigate the success of MPNNs on predicting chemical properties, we use the publicly available QM9 dataset (Ramakrishnan et al., 2014). Molecules in the dataset consist of Hydrogen (H), Carbon (C), Oxygen (O), Nitrogen (N), and Flourine (F) atoms and contain up to 9 heavy (non Hydrogen) atoms. In all, this results in about 134k drug-\nlike organic molecules that span a wide range of chemistry. For each molecule DFT is used to find a reasonable low energy structure and hence atom \u201cpositions\u201d are available. Additionally a wide range of interesting and fundamental chemical properties are computed. Given how fundamental some of the QM9 properties are, it is hard to believe success on more challenging chemical tasks will be possible if we can\u2019t make accurate statistical predictions for the properties computed in QM9.\nWe can group the different properties we try to predict into four broad categories. First, we have four properties related to how tightly bound together the atoms in a molecule are. These measure the energy required to break up the molecule at different temperatures and pressures. These include the atomization energy at 0K, U0 (eV), atomization energy at room temperature, U (eV), enthalpy of atomization at room temperature, H (eV), and free energy of atomization, G (eV).\nNext there are properties related to fundamental vibrations of the molecule, including the highest fundamental vibrational frequency \u03c91 (cm\u22121) and the zero point vibrational energy (ZPVE) (eV).\nAdditionally, there are a number of properties that concern the states of the electrons in the molecule. They include the energy of the electron in the highest occupied molecular orbital (HOMO) \u03b5HOMO (eV), the energy of the lowest unoccupied molecular orbital (LUMO) \u03b5LUMO (eV), and the electron energy gap (\u2206\u03b5 (eV)). The electron energy gap is simply the difference \u03b5HOMO \u2212 \u03b5LUMO. Finally, there are several measures of the spatial distribution of electrons in the molecule. These include the electronic spatial extent \u3008R2\u3009 (Bohr2), the norm of the dipole moment \u00b5 (Debye), and the norm of static polarizability \u03b1 (Bohr3). For a more detailed description of these properties, see the supplementary material."
        },
        {
            "heading": "5. MPNN Variants",
            "text": "We began our exploration of MPNNs around the GG-NN model which we believe to be a strong baseline. We focused on trying different message functions, output functions, finding the appropriate input representation, and properly tuning hyperparameters.\nFor the rest of the paper we use d to denote the dimension of the internal hidden representation of each node in the graph, and n to denote the number of nodes in the graph. Our implementation of MPNNs in general operates on directed graphs with a separate message channel for incoming and outgoing edges, in which case the incoming message mv is the concatenation of minv and m out v , this was also used in Li et al. (2016). When we apply this to undirected\nchemical graphs we treat the graph as directed, where each original edge becomes both an incoming and outgoing edge with the same label. Note there is nothing special about the direction of the edge, it is only relevant for parameter tying. Treating undirected graphs as directed means that the size of the message channel is 2d instead of d.\nThe input to our MPNN model is a set of feature vectors for the nodes of the graph, xv , and an adjacency matrix A with vector valued entries to indicate different bonds in the molecule as well as pairwise spatial distance between two atoms. We experimented as well with the message function used in the GG-NN family, which assumes discrete edge labels, in which case the matrix A has entries in a discrete alphabet of size k. The initial hidden states h0v are set to be the atom input feature vectors xv and are padded up to some larger dimension d. All of our experiments used weight tying at each time step t, and a GRU (Cho et al., 2014) for the update function as in the GG-NN family."
        },
        {
            "heading": "5.1. Message Functions",
            "text": "Matrix Multiplication: We started with the message function used in GG-NN which is defined by the equation M(hv, hw, evw) = Aevwhw.\nEdge Network: To allow vector valued edge features we propose the message function M(hv, hw, evw) = A(evw)hw where A(evw) is a neural network which maps the edge vector evw to a d\u00d7 d matrix. Pair Message: One property that the matrix multiplication rule has is that the message from node w to node v is a function only of the hidden state hw and the edge evw. In particular, it does not depend on the hidden state htv . In theory, a network may be able to use the message channel more efficiently if the node messages are allowed to depend on both the source and destination node. Thus we also tried using a variant on the message function as described in (Battaglia et al., 2016). Here the message from w to v along edge e is mwv = f (htw, h t v, evw) where f is a neural network.\nWhen we apply the above message functions to directed graphs, there are two separate functions used, M in and an M out. Which function is applied to a particular edge evw depends on the direction of that edge."
        },
        {
            "heading": "5.2. Virtual Graph Elements",
            "text": "We explored two different ways to change how the messages are passed throughout the model. The simplest modification involves adding a separate \u201cvirtual\u201d edge type for pairs of nodes that are not connected. This can be implemented as a data preprocessing step and allows information to travel long distances during the propagation phase.\nWe also experimented with using a latent \u201cmaster\u201d node, which is connected to every input node in the graph with a special edge type. The master node serves as a global scratch space that each node both reads from and writes to in every step of message passing. We allow the master node to have a separate node dimension dmaster, as well as separate weights for the internal update function (in our case a GRU). This allows information to travel long distances during the propagation phase. It also, in theory, allows additional model capacity (e.g. large values of dmaster) without a substantial hit in performance, as the complexity of the master node model is O(|E|d2 + nd2master)."
        },
        {
            "heading": "5.3. Readout Functions",
            "text": "We experimented with two readout functions. First is the readout function used in GG-NN, which is defined by equation 4. Second is a set2set model from Vinyals et al. (2015). The set2set model is specifically designed to operate on sets and should have more expressive power than simply summing the final node states. This model first applies a linear projection to each tuple (hTv , xv) and then takes as input the set of projected tuples T = {(hTv , xv)}. Then, after M steps of computation, the set2set model produces a graph level embedding q\u2217t which is invariant to the order of the of the tuples T . We feed this embedding q\u2217t through a neural network to produce the output."
        },
        {
            "heading": "5.4. Multiple Towers",
            "text": "One issue with MPNNs is scalability. In particular, a single step of the message passing phase for a dense graph requires O(n2d2) floating point multiplications. As n or d get large this can be computationally expensive. To address this issue we break the d dimensional node embeddings htv into k different d/k dimensional embeddings ht,kv and run a propagation step on each of the k copies separately to get temporary embeddings {h\u0303t+1,kv , v \u2208 G}, using separate message and update functions for each copy. The k temporary embeddings of each node are then mixed together according to the equation(\nht,1v , h t,2 v , . . . , h t,k v\n) = g ( h\u0303t,1v , h\u0303 t,2 v , . . . , h\u0303 t,k v ) (5)\nwhere g denotes a neural network and (x, y, . . .) denotes concatenation, with g shared across all nodes in the graph. This mixing preserves the invariance to permutations of the nodes, while allowing the different copies of the graph to communicate with each other during the propagation phase. This can be advantageous in that it allows larger hidden states for the same number of parameters, which yields a computational speedup in practice. For example, when the message function is matrix multiplication (as in GG-NN) a propagation step of a single copy takes O ( n2(d/k)2 ) time, and there are k copies, therefore the\noverall time complexity is O ( n2d2/k ) , with some additional overhead due to the mixing network. For k = 8, n = 9 and d = 200 we see a factor of 2 speedup in inference time over a k = 1, n = 9, and d = 200 architecture. This variation would be most useful for larger molecules, for instance molecules from GDB-17 (Ruddigkeit et al., 2012)."
        },
        {
            "heading": "6. Input Representation",
            "text": "There are a number of features available for each atom in a molecule which capture both properties of the electrons in the atom as well as the bonds that the atom participates in. For a list of all of the features see table 1. We experimented with making the hydrogen atoms explicit nodes in the graph (as opposed to simply including the count as a node feature), in which case graphs have up to 29 nodes. Note that having larger graphs significantly slows training time, in this case by a factor of roughly 10. For the adjacency matrix there are three edge representations used depending on the model.\nChemical Graph: In the abscence of distance information, adjacency matrix entries are discrete bond types: single, double, triple, or aromatic.\nDistance bins: The matrix multiply message function assumes discrete edge types, so to include distance information we bin bond distances into 10 bins, the bins are obtained by uniformly partitioning the interval [2, 6] into 8 bins, followed by adding a bin [0, 2] and [6,\u221e]. These bins were hand chosen by looking at a histogram of all distances. The adjacency matrix then has entries in an alphabet of size 14, indicating bond type for bonded atoms and distance bin for atoms that are not bonded. We found the distance for bonded atoms to be almost completely determined by bond type.\nRaw distance feature: When using a message function which operates on vector valued edges, the entries of the adjacency matrix are then 5 dimensional, where the first dimension indicates the euclidean distance between the pair of atoms, and the remaining four are a one-hot encoding of\nthe bond type."
        },
        {
            "heading": "7. Training",
            "text": "Each model and target combination was trained using a uniform random hyper parameter search with 50 trials. T was constrained to be in the range 3 \u2264 T \u2264 8 (in practice, any T \u2265 3 works). The number of set2set computations M was chosen from the range 1 \u2264M \u2264 12. All models were trained using SGD with the ADAM optimizer (Kingma & Ba (2014)), with batch size 20 for 3 million steps ( 540 epochs). The initial learning rate was chosen uniformly between 1e\u22125 and 5e\u22124. We used a linear learning rate decay that began between 10% and 90% of the way through training and the initial learning rate l decayed to a final learning rate l \u2217 F , using a decay factor F in the range [.01, 1]. The QM-9 dataset has 130462 molecules in it. We randomly chose 10000 samples for validation, 10000 samples for testing, and used the rest for training. We use the validation set to do early stopping and model selection and we report scores on the test set. All targets were normalized to have mean 0 and variance 1. We minimize the mean squared error between the model output and the target, although we evaluate mean absolute error."
        },
        {
            "heading": "8. Results",
            "text": "In all of our tables we report the ratio of the mean absolute error (MAE) of our models with the provided estimate of chemical accuracy for that target. Thus any model with error ratio less than 1 has achieved chemical accuracy for that target. In the supplementary material we list the chemical accuracy estimates for each target, these are the same estimates that were given in Faber et al. (2017). In this way, the MAE of our models can be calculated as (Error Ratio) \u00d7 (Chemical Accuracy). Note, unless otherwise indicated, all tables display result of models trained individually on each target (as opposed to training one model to predict all 13).\nWe performed numerous experiments in order to find the best possible MPNN on this dataset as well as the proper input representation. In our experiments, we found that including the complete edge feature vector (bond type, spatial distance) and treating hydrogen atoms as explicit nodes in the graph to be very important for a number of targets. We also found that training one model per target consistently outperformed jointly training on all 13 targets. In some cases the improvement was up to 40%. Our best MPNN variant used the edge network message function, set2set output, and operated on graphs with explicit hydrogens. We were able to further improve performance on the test set by ensembling the predictions of the five models with lowest validation error.\nIn table 2 we compare the performance of our best MPNN variant (denoted with enn-s2s) and the corresponding ensemble (denoted with enn-s2s-ens5) with the previous state of the art on this dataset as reported in Faber et al. (2017). For clarity the error ratios of the best non-ensemble models are shown in bold. This previous work performed a comparison study of several existing ML models for QM9 and we have taken care to use the same train, validation, and test split. These baselines include 5 different hand engineered molecular representations, which then get fed through a standard, off-the-shelf classifier. These input representations include the Coulomb Matrix (CM, Rupp et al. (2012)), Bag of Bonds (BoB, Hansen et al. (2015)), Bonds Angles, Machine Learning (BAML, Huang & von Lilienfeld (2016)), Extended Connectivity Fingerprints (ECPF4, Rogers & Hahn (2010)), and \u201cProjected Histograms\u201d (HDAD, Faber et al. (2017)) representations. In addition to these hand engineered features we include two existing baseline MPNNs, the Molecular Graph Convolutions model (GC) from Kearnes et al. (2016), and the original GG-NN model Li et al. (2016) trained with distance bins. Overall, our new MPNN achieves chemical accuracy on 11 out of 13 targets and state of the art on all 13 targets.\nTraining Without Spatial Information: We also experimented in the setting where spatial information is not included in the input. In general, we find that augmenting the MPNN with some means of capturing long range interactions between nodes in the graph greatly improves performance in this setting. To demonstrate this we performed 4 experiments, one where we train the GG-NN model on the sparse graph, one where we add virtual edges, one where we add a master node, and one where we change the graph level output to a set2set output. The error ratios averaged across the 13 targets are shown in table 3. Overall, these three modifications help on all 13 targets, and the Set2Set output achieves chemical accuracy on 5 out of 13 targets. For more details, consult the supplementary material. The experiments shown tables 3 and 4 were run with a partial charge feature as a node input. This feature is an output of the DFT calculation and thus could not be used in an applied setting. The state of art numbers we report in table 2 do not use this feature.\nTowers: Our original intent in developing the towers variant was to improve training time, as well as to allow the model to be trained on larger graphs. However, we also found some evidence that the multi-tower structure improves generalization performance. In table 4 we compare GG-NN + towers + set2set output vs a baseline GGNN + set2set output when distance bins are used. We do this comparison in both the joint training regime and when training one model per target. The towers model outperforms the baseline model on 12 out of 13 targets in both\nindividual and joint target training. We believe the benefit of towers is that it resembles training an ensemble of models. Unfortunately, our attempts so far at combining the towers and edge network message function have failed to further improve performance, possibly because the combination makes training more difficult. Further training details, and error ratios on all targets can be found in the supplementary material.\nAdditional Experiments: In preliminary experiments, we tried disabling weight tying across different time steps. However, we found that the most effective way to increase performance was to tie the weights and use a larger hidden dimension d. We also early on found the pair message function to perform worse than the edge network function. This included a toy pathfinding problem which was originally\n2As reported in Schu\u0308tt et al. (2017). The model was trained on a different train/test split with 100k training samples vs 110k used in our experiments.\ndesigned to benefit from using pair messages. Also, when trained jointly on the 13 targets the edge network function outperforms pair message on 11 out of 13 targets, and has an average error ratio of 1.53 compared to 3.98 for pair message. Given the difficulties with training this function we did not pursue it further. For performance on smaller sized training sets, consult the supplementary material."
        },
        {
            "heading": "9. Conclusions and Future Work",
            "text": "Our results show that MPNNs with the appropriate message, update, and output functions have a useful inductive bias for predicting molecular properties, outperforming several strong baselines and eliminating the need for complicated feature engineering. Moreover, our results also reveal the importance of allowing long range interactions between nodes in the graph with either the master node or the set2set output. The towers variation makes these models more scalable, but additional improvements will be needed to scale to much larger graphs.\nAn important future direction is to design MPNNs that can generalize effectively to larger graphs than those appearing in the training set or at least work with benchmarks designed to expose issues with generalization across graph sizes. Generalizing to larger molecule sizes seems particularly challenging when using spatial information. First of all, the pairwise distance distribution depends heavily on the number of atoms. Second, our most successful ways of using spatial information create a fully connected graph where the number of incoming messages also depends on the number of nodes. To address the second issue, we believe that adding an attention mechanism over the incoming message vectors could be an interesting direction to explore."
        },
        {
            "heading": "Acknowledgements",
            "text": "We would like to thank Lukasz Kaiser, Geoffrey Irving, Alex Graves, and Yujia Li for helpful discussions. Thank you to Adrian Roitberg for pointing out an issue with the use of partial charges in an earlier version of this paper."
        },
        {
            "heading": "10. Appendix",
            "text": ""
        },
        {
            "heading": "10.1. Interpretation of Laplacian based models as MPNNs",
            "text": "Another family of models defined in Defferrard et al. (2016), Bruna et al. (2013), Kipf & Welling (2016) can be interpreted as MPNNs. These models generalize the notion of convolutions a general graph G with N nodes. In the language of MPNNs, these models tend to have very simple message functions and are typically applied to much larger graphs such as social network data. We closely follow the notation defined in Bruna et al. (2013) equation (3.2). The model discussed in Defferrard et al. (2016) (equation 5)\nand Kipf & Welling (2016) can be viewed as special cases. Given an adjacency matrix W \u2208 RN\u00d7N we define the graph Laplacian to be L = In \u2212 D\u22121/2WD\u22121/2 where D is the diagonal degree matrix with Dii = deg(vi). Let V denote the eigenvectors of L, ordered by eigenvalue. Let \u03c3 be a real valued nonlinearity (such as ReLU). We now define an operation which transforms an input vector x of size N \u00d7 d1 to a vector y of size N \u00d7 d2 (the full model can defined as stacking these operations).\nyj = \u03c3 ( d1\u2211 i=1 V Fi,jV Txi ) (j = 1 . . . d2) (6)\nHere yj and xi are all N dimensional vectors corresponding to a scalar feature at each node. The matricesFi,j are all diagonal N \u00d7N matrices and contain all of the learned parameters in the layer. We now expand equation 6 in terms of the full N \u00d7 d1 vector x and N \u00d7 d2 vector y, using v and w to index nodes in the graph G and i, j to index the dimensions of the node states. In this way xw,i denotes the i\u2019th dimension of node w, and yv,j denotes the j\u2019th dimension of node v, furthermore we use xw to denote the d1 dimensional vector for node state w, and yv to denote the d2 dimensional vector for node v. Define the rank 4 tensor L\u0303 of dimension N \u00d7 N \u00d7 d1 \u00d7 d2 where L\u0303v,w,i,j = (V Fi,jV\nT )v,w. We will use L\u0303i,j to denote the N \u00d7 N dimensional matrix where (L\u0303i,j)v,w = L\u0303v,w,i,j and L\u0303v,w to denote the d1 \u00d7 d2 dimensional matrix where (L\u0303v,w)i,j = L\u0303v,w,i,j . Writing equation 6 in this notation we have\nyj = \u03c3 ( d1\u2211 i=1 L\u0303i,jxi )\nyv,j = \u03c3  d1,N\u2211 i=1,w=1 L\u0303v,w,i,jxw,i  yv = \u03c3 ( N\u2211\nw=1\nL\u0303v,wxw\n) .\nRelabelling yv as ht+1v and xw as h t w this last line can be interpreted as the message passing update in an MPNN where M(htv, h t w) = L\u0303v,wh t w and U(h t v,m t+1 v ) = \u03c3(m t+1 v ).\n10.1.1. THE SPECIAL CASE OF KIPF AND WELLING (2016)\nMotivated as a first order approximation of the graph laplacian methods, Kipf & Welling (2016) propose the following layer-wise propagation rule:\nH l+1 = \u03c3 ( D\u0303\u22121/2A\u0303D\u0303\u22121/2H lW l ) (7)\nHere A\u0303 = A + IN where A is the real valued adjacency matrix for an undirected graph G. Adding the identity matrix IN corresponds to adding self loops to the graph. Also D\u0303ii = \u2211 j A\u0303ij denotes the degree matrix for the graph with self loops, W l \u2208 RD\u00d7D is a layer-specific trainable weight matrix, and \u03c3(\u00b7) denotes a real valued nonlinearity. Each H l is a RN\u00d7D dimensional matrix indicating theD dimensional node states for the N nodes in the graph.\nIn what follows, given a matrix M we use M(v) to denote the row in M indexed by v (v will always correspond to a node in the graph G). Let L = D\u0303\u22121/2A\u0303D\u0303\u22121/2. To get the updated node state for node v we have\nH l+1(v) = \u03c3 ( L(v)H lW l )\n= \u03c3 (\u2211 w LvwH l (w)W l )\nRelabelling the row vector H l+1(v) as an N dimensional column vector ht+1v the above equation is equivalent to\nht+1v = \u03c3\n( (W l)T\n\u2211 w Lvwh t w\n) (8)\nwhich is equivalent to a message function\nMt(h t v, h t w) = Lvwh t w = A\u0303vw(deg(v)deg(w)) \u22121/2htw,\nand update function\nUt(h t v,m t+1 v ) = \u03c3((W t)Tmt+1).\nNote that the Lvw are all scalar valued, so this model corresponds to taking a certain weighted average of neighboring nodes at each time step."
        },
        {
            "heading": "10.2. A More Detailed Description of the Quantum Properties",
            "text": "First there the four atomization energies.\n\u2022 Atomization energy at 0K U0 (eV): This is the energy required to break up the molecule into all of its constituent atoms if the molecule is at absolute zero. This calculation assumes that the molecules are held at fixed volume.\n\u2022 Atomization energy at room temperature U (eV): Like U0, this is the energy required to break up the molecule if it is at room temperature.\n\u2022 Enthalpy of atomization at room temperature H (eV): The enthalpy of atomization is similar in spirit to the energy of atomization, U . However, unlike the energy this calculation assumes that the constituent molecules are held at fixed pressure.\n\u2022 Free energy of atomization G (eV): Once again this is similar to U and H , but assumes that the system is held at fixed temperature and pressure during the dissociation.\nNext there are properties related to fundamental vibrations of the molecule:\n\u2022 Highest fundamental vibrational frequency \u03c91 (cm\u22121): Every molecule has fundamental vibrational modes that it can naturally oscillate at. \u03c91 is the mode that requires the most energy.\n\u2022 Zero Point Vibrational Energy (ZPVE) (eV): Even at zero temperature quantum mechanical uncertainty implies that atoms vibrate. This is known as the zero point vibrational energy and can be calculated once the allowed vibrational modes of a molecule are known.\nAdditionally, there are a number of properties that concern the states of the electrons in the molecule:\n\u2022 Highest Occupied Molecular Orbital (HOMO) \u03b5HOMO (eV): Quantum mechanics dictates that the allowed states that electrons can occupy in a molecule are discrete. The Pauli exclusion principle states that no two electrons may occupy the same state. At zero temperature, therefore, electrons stack in states from lowest energy to highest energy. HOMO is the energy of the highest occupied electronic state.\n\u2022 Lowest Unoccupied Molecular Orbital (LUMO) \u03b5LUMO (eV): Like HOMO, LUMO is the lowest energy electronic state that is unoccupied.\n\u2022 Electron energy gap \u2206\u03b5 (eV): This is the difference in energy between LUMO and HOMO. It is the lowest energy transition that can occur when an electron is excited from an occupied state to an unoccupied state. \u2206\u03b5 also dictates the longest wavelength of light that the molecule can absorb.\nFinally, there are several measures of the spatial distribution of electrons in the molecule:\n\u2022 Electronic Spatial Extent \u3008R2\u3009 (Bohr2): The electronic spatial extent is the second moment of the charge distribution, \u03c1(r), or in other words \u3008R2\u3009 =\u222b drr2\u03c1(r).\n\u2022 Norm of the dipole moment \u00b5 (Debye): The dipole moment, p(r) = \u222b dr\u2032p(r\u2032)(r \u2212 r\u2032), approximates\nthe electric field far from a molecule. The norm of the dipole moment is related to how anisotropically"
        },
        {
            "heading": "10.3. Chemical Accuracy and DFT Error",
            "text": "In Table 5 we list the mean absolute error numbers for chemical accuracy. These are the numbers used to compute the error ratios of all models in the tables. The mean absolute errors of our models can thus be calculated as (Error Ratio) \u00d7 (Chemical Accuracy). We also include some estimates of the mean absolute error for the DFT calculation to the ground truth. Both the estimates of chemical accruacy and DFT error were provided in Faber et al. (2017)."
        },
        {
            "heading": "10.4. Additional Results",
            "text": "In Table 6 we compare the performance of the best architecture (edge network + set2set output) on different sized training sets. It is surprising how data efficient this model is on some targets. For example, on both R2 and Omega our models are equal or better with 11k samples than the best baseline is with 110k samples.\nIn Table 7 we compare the performance of several models trained without spatial information. The left 4 columns show the results of 4 experiments, one where we train the\nGG-NN model on the sparse graph, one where we add virtual edges (ve), one where we add a master node (mn), and one where we change the graph level output to a set2set output (s2s). In general, we find that it\u2019s important to allow the model to capture long range interactions in these graphs.\nIn Table 8 we compare GG-NN + towers + set2set output (tow8) vs a baseline GG-NN + set2set output (GG-NN) when distance bins are used. We do this comparison in both the joint training regime (j) and when training one model per target (i). For joint training of the baseline we used 100 trials with d = 200 as well as 200 trials where d was chosen randomly in the set {43, 73, 113, 153}, we report the minimum test error across all 300 trials. For individual training of the baseline we used 100 trials where dwas chosen uniformly in the range [43, 200]. The towers model was always trained with d = 200 and k = 8, with 100 tuning trials for joint training and 50 trials for individual training. The towers model outperforms the baseline model on 12 out of 13 targets in both individual and joint target training.\nIn Table 9 right 2 columns compare the edge network (enn) with the pair message network (pm) in the joint training regime (j). The edge network consistently outperforms the pair message function across most targets.\nIn Table 10 we compare our MPNNs with different input featurizations. All models use the Set2Set output and GRU update functions. The no distance model uses the matrix multiply message function, the distance models use the edge neural network message function."
        }
    ],
    "title": "Neural Message Passing for Quantum Chemistry",
    "year": 2017
}