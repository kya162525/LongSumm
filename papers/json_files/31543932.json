{
    "abstractText": "Model-based reinforcement learning approaches carry the promise of being data efficient. However, due to challenges in learning dynamics models that sufficiently match the real-world dynamics, they struggle to achieve the same asymptotic performance as model-free methods. We propose Model-Based MetaPolicy-Optimization (MB-MPO), an approach that foregoes the strong reliance on accurate learned dynamics models. Using an ensemble of learned dynamic models, MB-MPO meta-learns a policy that can quickly adapt to any model in the ensemble with one policy gradient step. This steers the meta-policy towards internalizing consistent dynamics predictions among the ensemble while shifting the burden of behaving optimally w.r.t. the model discrepancies towards the adaptation step. Our experiments show that MB-MPO is more robust to model imperfections than previous model-based approaches. Finally, we demonstrate that our approach is able to match the asymptotic performance of model-free methods while requiring significantly less experience.",
    "authors": [
        {
            "affiliations": [],
            "name": "Ignasi Clavera"
        },
        {
            "affiliations": [],
            "name": "Jonas Rothfuss"
        },
        {
            "affiliations": [],
            "name": "John Schulman"
        }
    ],
    "id": "SP:b20f28945d00c3d292ab6d2b401347c42973772b",
    "references": [
        {
            "authors": [
                "J. Schulman",
                "S. Levine",
                "P. Moritz",
                "M.I. Jordan",
                "P. Abbeel"
            ],
            "title": "Trust Region Policy Optimization",
            "venue": "ICML,",
            "year": 2015
        },
        {
            "authors": [
                "T.P. Lillicrap"
            ],
            "title": "Continuous control with deep reinforcement learning",
            "venue": "CoRR, abs/1509.02971,",
            "year": 2015
        },
        {
            "authors": [
                "D. Silver"
            ],
            "title": "Mastering the game of Go with deep neural networks and tree search",
            "year": 2016
        },
        {
            "authors": [
                "M.P. Deisenroth",
                "G. Neumann",
                "J. Peters"
            ],
            "title": "A survey on policy search for robotics",
            "venue": "Found. Trends Robot, 2,",
            "year": 2013
        },
        {
            "authors": [
                "V. Pong",
                "S. Gu",
                "M. Dalal",
                "S. Levine"
            ],
            "title": "Temporal Difference Models: Model-Free Deep RL for Model- Based Control",
            "venue": "ICLR,",
            "year": 2018
        },
        {
            "authors": [
                "M. Deisenroth",
                "C.E. Rasmussen"
            ],
            "title": "Pilco: A model-based and data-efficient approach to policy search",
            "venue": "ICML, pages 465\u2013472,",
            "year": 2011
        },
        {
            "authors": [
                "A. Rajeswaran",
                "S. Ghotra",
                "B. Ravindran",
                "S. Levine"
            ],
            "title": "EPOpt: Learning Robust Neural Network Policies Using Model Ensembles",
            "venue": "10",
            "year": 2016
        },
        {
            "authors": [
                "K. Zhou",
                "J.C. Doyle",
                "K. Glover"
            ],
            "title": "Robust and Optimal Control",
            "venue": "Prentice-Hall, Inc.,",
            "year": 1996
        },
        {
            "authors": [
                "S.H. Lim",
                "H. Xu",
                "S. Mannor"
            ],
            "title": "Reinforcement learning in robust markov decision processes",
            "venue": "NIPS.",
            "year": 2013
        },
        {
            "authors": [
                "T. Kurutach",
                "I. Clavera",
                "Y. Duan",
                "A. Tamar",
                "P. Abbeel"
            ],
            "title": "Model-Ensemble Trust-Region Policy Optimization",
            "venue": "ICLR,",
            "year": 2018
        },
        {
            "authors": [
                "C. Finn",
                "P. Abbeel",
                "S. Levine"
            ],
            "title": "Model-Agnostic Meta-Learning for Fast Adaptation of Deep Networks",
            "venue": "ICML,",
            "year": 2017
        },
        {
            "authors": [
                "Y. Duan",
                "J. Schulman",
                "X. Chen",
                "P.L. Bartlett",
                "I. Sutskever",
                "P. Abbeel"
            ],
            "title": "RL$\u02c62$: Fast Reinforcement Learning via Slow Reinforcement Learning",
            "venue": "11",
            "year": 2016
        },
        {
            "authors": [
                "J.X. Wang"
            ],
            "title": "Learning to reinforcement",
            "venue": "learn. CoRR,",
            "year": 2017
        },
        {
            "authors": [
                "N. Mishra",
                "M. Rohaninejad",
                "X. Chen",
                "P. Abbeel"
            ],
            "title": "A Simple Neural Attentive Meta-Learner",
            "venue": "ICLR, 7",
            "year": 2018
        },
        {
            "authors": [
                "F. Sung",
                "L. Zhang",
                "T. Xiang",
                "T.M. Hospedales",
                "Y. Yang"
            ],
            "title": "Learning to learn: Meta-critic networks for sample efficient learning",
            "venue": "CoRR, abs/1706.09529,",
            "year": 2017
        },
        {
            "authors": [
                "J.A. Bagnell",
                "J.G. Schneider"
            ],
            "title": "Autonomous helicopter control using reinforcement learning policy search methods",
            "venue": "ICRA, volume 2, pages 1615\u20131620. IEEE,",
            "year": 2001
        },
        {
            "authors": [
                "P. Abbeel",
                "M. Quigley",
                "A.Y. Ng"
            ],
            "title": "Using inaccurate models in reinforcement learning",
            "venue": "ICML,",
            "year": 2006
        },
        {
            "authors": [
                "S. Levine",
                "P. Abbeel"
            ],
            "title": "Learning neural network policies with guided policy search under unknown dynamics",
            "venue": "NIPS, pages 1071\u20131079,",
            "year": 2014
        },
        {
            "authors": [
                "S. Levine",
                "C. Finn",
                "T. Darrell",
                "P. Abbeel"
            ],
            "title": "End-to-end training of deep visuomotor policies",
            "venue": "Journal of Machine Learning Research, 17(39):1\u201340,",
            "year": 2016
        },
        {
            "authors": [
                "D. Nguyen-Tuong",
                "M. Seeger",
                "J. Peters"
            ],
            "title": "Local gaussian process regression for real time online model learning and control",
            "venue": "NIPS, pages 1193\u20131200,",
            "year": 2009
        },
        {
            "authors": [
                "S. Kamthe",
                "M.P. Deisenroth"
            ],
            "title": "Data-efficient reinforcement learning with probabilistic model predictive control",
            "venue": "CoRR, abs/1706.06491,",
            "year": 2017
        },
        {
            "authors": [
                "A. Nagabandi",
                "G. Kahn",
                "R.S. Fearing",
                "S. Levine"
            ],
            "title": "Neural Network Dynamics for Model-Based Deep Reinforcement Learning with Model-Free Fine-Tuning",
            "venue": "8",
            "year": 2017
        },
        {
            "authors": [
                "K. Chua",
                "R. Calandra",
                "R. Mcallister",
                "S. Levine"
            ],
            "title": "Deep Reinforcement Learning in a Handful of Trials using Probabilistic Dynamics Models. 2019",
            "year": 2019
        },
        {
            "authors": [
                "A. Punjani",
                "P. Abbeel"
            ],
            "title": "Deep learning helicopter dynamics models",
            "venue": "ICRA, pages 3223\u20133230,",
            "year": 2015
        },
        {
            "authors": [
                "N. Wahlstr\u00f6m",
                "T.B. Sch\u00f6n",
                "M.P. Deisenroth"
            ],
            "title": "From pixels to torques: Policy learning with deep dynamical models",
            "venue": "CoRR, abs/1502.02251,",
            "year": 2015
        },
        {
            "authors": [
                "S. Depeweg",
                "F. Doshi-velez",
                "S. Udluft"
            ],
            "title": "Learning and Policy Search in Stochastic Dynamical Systems with Bayesian Neural Networks",
            "venue": "ICML,",
            "year": 2017
        },
        {
            "authors": [
                "I. Clavera",
                "A. Nagabandi",
                "R.S. Fearing",
                "P. Abbeel",
                "S. Levine",
                "C. Finn"
            ],
            "title": "Learning to adapt: Metalearning for model-based control",
            "venue": "CoRR, abs/1803.11347,",
            "year": 2018
        },
        {
            "authors": [
                "J. Fu",
                "S. Levine",
                "P. Abbeel"
            ],
            "title": "One-shot learning of manipulation skills with online dynamics adaptation and neural network priors",
            "venue": "CoRR, abs/1509.06841,",
            "year": 2015
        },
        {
            "authors": [
                "S. Gu",
                "T. Lillicrap",
                "I. Sutskever",
                "S. Levine"
            ],
            "title": "Continuous deep Q-learning with model-based acceleration",
            "venue": "ICML. JMLR.org,",
            "year": 2016
        },
        {
            "authors": [
                "I. Lenz",
                "R.A. Knepper",
                "A. Saxena"
            ],
            "title": "Deepmpc: Learning deep latent features for model predictive control",
            "venue": "Robotics: Science and Systems,",
            "year": 2015
        },
        {
            "authors": [
                "N. Mishra",
                "P. Abbeel",
                "I. Mordatch"
            ],
            "title": "Prediction and Control with Temporal Segment Models",
            "venue": "ICML,",
            "year": 2017
        },
        {
            "authors": [
                "N. Heess"
            ],
            "title": "Learning Continuous Control Policies by Stochastic Value Gradients",
            "year": 2015
        },
        {
            "authors": [
                "R.S.R.S. Sutton"
            ],
            "title": "Dyna, an integrated architecture for learning, planning, and reacting",
            "venue": "ACM SIGART Bulletin,",
            "year": 1991
        },
        {
            "authors": [
                "V. Feinberg",
                "A. Wan",
                "I. Stoica",
                "M.I. Jordan",
                "J.E. Gonzalez",
                "S. Levine"
            ],
            "title": "Model-Based Value Expansion for Efficient Model-Free Reinforcement Learning",
            "year": 2018
        },
        {
            "authors": [
                "J. Schmidhuber"
            ],
            "title": "Evolutionary principles in self-referential learning",
            "venue": "on learning now to learn: The metameta-meta...-hook. Diploma thesis, Technische Universitat Munchen, Germany, 14 May",
            "year": 1987
        },
        {
            "authors": [
                "M. Andrychowicz",
                "M. Denil",
                "S.G. Colmenarejo",
                "M.W. Hoffman",
                "D. Pfau",
                "T. Schaul",
                "N. de Freitas"
            ],
            "title": "Learning to learn by gradient descent by gradient descent",
            "year": 2016
        },
        {
            "authors": [
                "A. Santoro",
                "S. Bartunov",
                "M. Botvinick",
                "D. Wierstra",
                "T. Lillicrap"
            ],
            "title": "One-shot learning with memoryaugmented neural networks",
            "venue": "arXiv preprint arXiv:1605.06065,",
            "year": 2016
        },
        {
            "authors": [
                "M. H\u00fcsken",
                "C. Goerick"
            ],
            "title": "Fast learning for problem classes using a knowledge based network initialization",
            "venue": "IJCNN,",
            "year": 2000
        },
        {
            "authors": [
                "S. Ravi",
                "H. Larochelle"
            ],
            "title": "Optimization as a model for few-shot learning",
            "venue": "ICLR,",
            "year": 2018
        },
        {
            "authors": [
                "T. Salimans",
                "D.P. Kingma"
            ],
            "title": "Weight Normalization: A Simple Reparameterization to Accelerate Training of Deep Neural Networks",
            "venue": "NIPS, 2",
            "year": 2016
        },
        {
            "authors": [
                "J. Peters",
                "S. Schaal"
            ],
            "title": "Policy gradient methods for robotics",
            "venue": "IROS, pages 2219\u20132225, Oct",
            "year": 2006
        },
        {
            "authors": [
                "E. Todorov",
                "T. Erez",
                "Y. Tassa"
            ],
            "title": "Mujoco: A physics engine for model-based control",
            "venue": "IROS,",
            "year": 2012
        },
        {
            "authors": [
                "J. Schulman",
                "F. Wolski",
                "P. Dhariwal",
                "A. Radford",
                "O. Klimov"
            ],
            "title": "Proximal Policy Optimization Algorithms",
            "venue": "CoRR,",
            "year": 2017
        },
        {
            "authors": [
                "Y. Wu",
                "E. Mansimov",
                "S. Liao",
                "R.B. Grosse",
                "J. Ba"
            ],
            "title": "Scalable trust-region method for deep reinforcement learning using kronecker-factored approximation",
            "venue": "CoRR, abs/1708.05144,",
            "year": 2017
        },
        {
            "authors": [
                "S. Ross",
                "G. Gordon",
                "D. Bagnell"
            ],
            "title": "A reduction of imitation learning and structured prediction to noregret online learning",
            "venue": "AISTATS,",
            "year": 2011
        },
        {
            "authors": [
                "J. Schulman",
                "P. Moritz",
                "S. Levine",
                "M. Jordan",
                "P. Abbeel"
            ],
            "title": "High-dimensional continuous control using generalized advantage estimation",
            "venue": "ICLR,",
            "year": 2016
        },
        {
            "authors": [
                "Y. Duan",
                "X. Chen",
                "R. Houthooft",
                "J. Schulman",
                "P. Abbeel"
            ],
            "title": "Benchmarking deep reinforcement learning for continuous control",
            "venue": "ICML, page 13291338,",
            "year": 2016
        }
    ],
    "sections": [
        {
            "text": "Keywords: Reinforcement Learning, Meta-Learning, Model-Based, Model-Free"
        },
        {
            "heading": "1 Introduction",
            "text": "Most of the recent success in reinforcement learning was achieved using model-free reinforcement learning algorithms [1, 2, 3]. Model-free (MF) algorithms tend to achieve optimal performance, are generally applicable, and are easy to implement. However, this is achieved at the cost of being data intensive, which is exacerbated when combined with high-capacity function approximators like neural networks. Their high sample complexity presents a major barrier to their application to robotic control tasks, on which data gathering is expensive.\nIn contrast, model-based (MB) reinforcement learning methods are able to learn with significantly fewer samples by using a learned model of the environment dynamics against which policy optimization is performed. Learning dynamics models can be done in a sample efficient way since they are trained with standard supervised learning techniques, allowing the use of off-policy data. However, accurate dynamics models can often be far more complex than good policies. For instance, pouring water into a cup can be achieved by a fairly simple policy while modeling the underlying dynamics of this task is highly complex. Hence, model-based methods have only been able to learn good policies on a much more limited set of problems, and even when good policies are learned, they typically saturate in performance at a level well below their model-free counterparts [4, 5].\nModel-based approaches tend to rely on accurate (learned) dynamics models to solve a task. If the dynamics model is not sufficiently precise, the policy optimization is prone to overfit on the deficiencies of the model, leading to suboptimal behavior or even to catastrophic failures. This problem is known in the literature as model-bias [6]. Previous work has tried to alleviate model-bias by characterizing the uncertainty of the models and learning a robust policy [6, 7, 8, 9, 10], often using ensembles to represent the posterior. This paper also uses ensembles, but very differently.\nWe propose Model-Based Meta-Policy-Optimization (MB-MPO), an orthogonal approach to previous model-based RL methods: while traditional model-based RL methods rely on the learned \u2217Equal contribution\n2nd Conference on Robot Learning (CoRL 2018), Zu\u0308rich, Switzerland.\ndynamics models to be sufficiently accurate to enable learning a policy that also succeeds in the real world, we forego reliance on such accuracy. We are able to do so by learning an ensemble of dynamics models and framing the policy optimization step as a meta-learning problem. Metalearning, in the context of RL, aims to learn a policy that adapts fast to new tasks or environments [11, 12, 13, 14, 15]. Using the models as learned simulators, MB-MPO learns a policy that can be quickly adapted to any of the fitted dynamics models with one gradient step. This optimization objective steers the meta-policy towards internalizing the parts of the dynamics prediction that are consistent among the ensemble while shifting the burden of behaving optimally w.r.t discrepancies between models towards the adaptation step. This way, the learned policy exhibits less model-bias without the need to behave conservatively. While much is shared with previous MB methods in terms of how trajectory samples are collected and the dynamic models are trained, the use of (and reliance on) learned dynamics models for the policy optimization is fundamentally different.\nIn this paper we show that 1) model-based policy optimization can learn policies that match the asymptotic performance of model-free methods while being substantially more sample efficient, 2) MB-MPO consistently outperforms previous model-based methods on challenging control tasks, 3) learning is still possible when the models are strongly biased. The low sample complexity of our method makes it applicable to real-world robotics. For instance, we are able learn an optimal policy in high-dimensional and complex quadrupedal locomotion within two hours of real-world data. Note that the amount of data required to learn such policy using model-free methods is 10\u00d7 - 100\u00d7 higher, and, to the best knowledge of the authors, no prior model-based method has been able to attain the model-free performance in such tasks."
        },
        {
            "heading": "2 Related Work",
            "text": "In this section, we discuss related work, including model-based RL and approaches that combine elements of model-based and model-free RL. Finally, we outline recent advances in the field of meta-learning.\nModel-Based Reinforcement Learning: Addressing Model Inaccuracies. Impressive results with model-based RL have been obtained using simple linear models [16, 17, 18, 19]. However, like Bayesian models [6, 20, 21], their application is limited to low-dimensional domains. Our approach, which uses neural networks (NNs), is easily able to scale to complex high dimensional control problems. NNs for model learning offer the potential to scale to higher dimensional problems with impressive sample complexity [22, 23, 24, 25]. A major challenge when using high-capacity dynamics models is preventing policies from exploiting model inaccuracies. Several works approach this problem of model-bias by learning a distribution of models [26, 7, 10, 23], or by learning adaptive models [27, 28, 29]. We incorporate the idea of reducing model-bias by learning an ensemble of models. However, we show that these techniques do not suffice in challenging domains, and demonstrate the necessity of meta-learning for improving asymptotic performance.\nPast work has also tried to overcome model inaccuracies through the policy optimization process. Model Predictive Control (MPC) compensates for model imperfections by re-planning at each step [30], but it suffers from limited credit assignment and high computational cost. Robust policy optimization [7, 8, 9] looks for a policy that performs well across models; as a result policies tend to be over-conservative. In contrast, we show that MB-MPO learns a robust policy in the regions where the models agree, and an adaptive one where the models yield substantially different predictions.\nModel-Based + Model-Free Reinforcement Learning. Naturally, it is desirable to combine elements of model-based and model-free to attain high performance with low sample complexity. Attempts to combine them can be broadly categorized into three main approaches. First, differentiable trajectory optimization methods propagate the gradients of the policy or value function through the learned dynamics model [31, 32] . However, the models are not explicitly trained to approximate first order derivatives, and, when backpropagating, they suffer from exploding and vanishing gradients [10]. Second, model-assisted MF approaches use the dynamics models to augment the real environment data by imagining policy roll-outs [33, 29, 34, 22]. These methods still rely to a large degree on real-world data, which makes them impractical for real-world applications. Thanks to meta-learning, our approach could, if needed, adapt fast to the real-world with fewer samples. Third, recent work fully decouples the MF module from the real environment by entirely using samples from the learned models [35, 10]. These methods, even though considering the model uncertainty, still rely on precise estimates of the dynamics to learn the policy. In contrast, we meta-\nlearn a policy on an ensemble of models, which alleviates the strong reliance on precise models by training for adaption when the prediction uncertainty is high. Kurutach et al. [10] can be viewed as an edge case of our algorithm when no adaptation is performed.\nMeta-Learning. Our approach makes use of meta-learning to address model inaccuracies. Metalearning algorithms aim to learn models that can adapt to new scenarios or tasks with few data points. Current meta-learning algorithms can be classified in three categories. One approach involves training a recurrent or memory-augmented network that ingests a training dataset and outputs the parameters of a learner model [36, 37]. Another set of methods feeds the dataset followed by the test data into a recurrent model that outputs the predictions for the test inputs [12, 38]. The last category embeds the structure of optimization problems into the meta-learning algorithm [11, 39, 40]. These algorithms have been extended to the context of RL [12, 13, 15, 11]. Our work builds upon MAML [11]. However, while in previous meta-learning methods each task is typically defined by a different reward function, each of our tasks is defined by the dynamics of different learned models."
        },
        {
            "heading": "3 Background",
            "text": ""
        },
        {
            "heading": "3.1 Model-based Reinforcement Learning",
            "text": "A discrete-time finite Markov decision process (MDP) M is defined by the tuple (S,A, p, r, \u03b3, p0, H). Here, S is the set of states, A the action space, p(st+1|st,at) the transition distribution, r : S \u00d7 A \u2192 R is a reward function, p0 : S \u2192 R+ represents the initial state distribution, \u03b3 the discount factor, and H is the horizon of the process. We define the return as the sum of rewards r(st,at) along a trajectory \u03c4 := (s0,a0, ..., sH\u22121,aH\u22121, sH). The goal of reinforcement learning is to find a policy \u03c0 : S \u00d7A \u2192 R+ that maximizes the expected return. While model-free RL does not explicitly model state transitions, model-based RL methods learn the transition distribution, also known as dynamics model, from the observed transitions. This can be done with a parametric function approximator p\u0302\u03c6(s\u2032|s,a). In such case, the parameters \u03c6 of the dynamics model are optimized to maximize the log-likelihood of the state transition distribution."
        },
        {
            "heading": "3.2 Meta-Learning for Reinforcement Learning",
            "text": "Meta-RL aims to learn a learning algorithm which is able to quickly learn optimal policies in MDPs Mk drawn from a distribution \u03c1(M) over a set of MDPs. The MDPs Mk may differ in their reward function rk(s,a) and transition distribution pk(st+1|st,at), but share action space A and state space S. Our approach builds on the gradient-based meta-learning framework MAML [11], which in the RL setting, trains a parametric policy \u03c0\u03b8(a|s) to quickly improve its performance on a new task with one or a few vanilla policy gradient steps. The meta-training objective for MAML can be written as:\nmax \u03b8 EMk\u223c\u03c1(M) st+1\u223cpk at\u223c\u03c0\u03b8\u2032 (at|st)\n[H\u22121\u2211 t=0 rk(st,at) ] s.t.: \u03b8\u2032 = \u03b8 + \u03b1 \u2207\u03b8Est+1\u223cpk at\u223c\u03c0\u03b8(at|st) [H\u22121\u2211 t=0 rk(st,at) ] (1)\nMAML attempts to learn an initialization \u03b8\u2217 such that for any taskMk \u223c \u03c1(M) the policy attains maximum performance in the respective task after one policy gradient step."
        },
        {
            "heading": "4 Model-Based Meta-Policy-Optimization",
            "text": "Enabling complex and high-dimensional real robotics tasks requires extending current model-based methods to the capabilities of mode-free while, at the same time, maintaining their data efficiency. Our approach, model-based meta-policy-optimization (MB-MPO), attains such goal by framing model-based RL as meta-learning a policy on a distribution of dynamic models, advocating to maximize the policy adaptation, instead of robustness, when models disagree. This not only removes the arduous task of optimizing for a single policy that performs well across differing dynamic models, but also results in better exploration properties and higher diversity of the collected samples, which leads to improved dynamic estimates.\nWe instantiate this general framework by employing an ensemble of learned dynamic models and meta-learning a policy that can be quickly adapted to any of the dynamic models with one policy gradient step. In the following, we first describe how the models are learned, then explain how the policy can be meta-trained on an ensemble of models, and, finally, we present our overall algorithm."
        },
        {
            "heading": "4.1 Model Learning",
            "text": "A key component of our method is learning a distribution of dynamics models, in the form of an ensemble, of the real environment dynamics. In order to decorrelate the models, each model differs in its random initialization and it is trained with a different randomly selected subset Dk of the collected real environment samples. In order to address the distributional shift that occurs as the policy changes throughout the meta-optimization, we frequently collect samples under the current policy, aggregate them with the previous data D, and retrain the dynamic models with warm starts. In our experiments, we consider the dynamics models to be a deterministic function of the current state st and action at, employing a feed-forward neural network to approximate them. We follow the standard practice in model-based RL of training the neural network to predict the change in state \u2206s = st+1 \u2212 st (rather than the next state st+1) [22, 6]. We denote by f\u0302\u03c6 the function approximator for the next state, which is the sum of the input state and the output of the neural network. The objective for learning each model f\u0302\u03c6k of the ensemble is to find the parameter vector \u03c6k that minimizes the `2 one-step prediction loss:\nmin \u03c6k\n1 |Dk| \u2211\n(st,at,st+1)\u2208Dk\n\u2016st+1 \u2212 f\u0302\u03c6k(st,at)\u201622 (2)\nwhere Dk is a sampled subset of the training data-set D that stores the transitions which the agent has experienced. Standard techniques to avoid overfitting and facilitate fast learning are followed; specifically, 1) early stopping the training based on the validation loss, 2) normalizing the inputs and outputs of the neural network, and 3) weight normalization [41]."
        },
        {
            "heading": "4.2 Meta-Reinforcement Learning on Learned Models",
            "text": "Given an ensemble of learned dynamic models for a particular environment, our core idea is to learn a policy which can adapt quickly to any of these models. To learn this policy, we use gradient based meta-learning with MAML (described in Section 3.2). To properly formulate this problem in the context of meta-learning, we first need to define an appropriate task distribution. Considering the models {f\u0302\u03c61 , f\u0302\u03c62 , ..., f\u0302\u03c6K}, which approximate the dynamics of the true environment, we can construct a uniform task distribution by embedding them into different MDPs Mk = (S,A, f\u0302\u03c6k , r, \u03b3, p0) using these learned dynamics models. We note that, unlike the experimental considerations of prior methods [12, 11, 14], in our work the reward function remains the same across tasks while the dynamics vary. Therefore, each task constitutes a different belief about what the dynamics in the true environment could be. Finally, we pose our objective as the following meta-optimization problem:\nmax \u03b8\n1\nK K\u2211 k=0 Jk(\u03b8 \u2032 k) s.t.: \u03b8 \u2032 k = \u03b8 + \u03b1 \u2207\u03b8Jk(\u03b8) (3)\nwith Jk(\u03b8) being the expected return under the policy \u03c0\u03b8 and the estimated dynamics model f\u0302\u03c6k . Jk(\u03b8) = Eat\u223c\u03c0\u03b8(at|st) [H\u22121\u2211 t=0 r(st,at) \u2223\u2223\u2223\u2223st+1 = f\u0302\u03c6k(st,at)] (4) For estimating the expectation in Eq. 4 and computing the corresponding gradients, we sample trajectories from the imagined MDPs. The rewards are computed by evaluating the reward function, which we assume as given, in the predicted states and actions r(f\u0302\u03c6k(st\u22121,at\u22121,at)). In particular, when estimating the adaptation objectives Jk(\u03b8), the meta-policy \u03c0\u03b8 is used to sample a set of imaginary trajectories Tk for each model f\u0302\u03c6k . For the meta-objective 1K \u2211K k=0 Jk(\u03b8 \u2032 k), we generate trajectory roll-outs T \u2032k with the models f\u0302\u03c6k and the policies \u03c0\u03b8\u2032k obtained from adapting the parameters \u03b8 to the k-th model. Thus, no real-world data is used for the data intensive step of meta-policy optimization.\nIn practice, any policy gradient algorithm can be chosen to perform the meta-update of the policy parameters. In our implementation, we use Trust-Region Policy Optimization (TPRO) [1] for maximizing the meta-objective, and employ vanilla policy gradient (VPG) [42] for the adaptation step. To reduce the variance of the policy gradient estimates a linear reward baseline is used.\nAlgorithm 1 MB-MPO Require: Inner and outer step size \u03b1, \u03b2\n1: Initialize the policy \u03c0\u03b8, the models f\u0302\u03c61 , f\u0302\u03c62 , ..., f\u0302\u03c6K and D \u2190 \u2205 2: repeat 3: Sample trajectories from the real environment with the adapted policies \u03c0\u03b8\u20321 , ..., \u03c0\u03b8 \u2032 K\n. Add them to D.\n4: Train all models using D. 5: for all models f\u0302\u03c6k do 6: Sample imaginary trajectories Tk from f\u0302\u03c6k using \u03c0\u03b8 7: Compute adapted parameters \u03b8\u2032k = \u03b8 + \u03b1 \u2207\u03b8Jk(\u03b8) using trajectories Tk 8: Sample imaginary trajectories T \u2032k from f\u0302\u03c6k using the adapted policy \u03c0\u03b8\u2032k 9: end for\n10: Update \u03b8 \u2192 \u03b8 \u2212 \u03b2 1K \u2211 k\u2207\u03b8Jk(\u03b8\u2032k) using the trajectories T \u2032k 11: until the policy performs well in the real environment 12: return Optimal pre-update parameters \u03b8\u2217"
        },
        {
            "heading": "4.3 Algorithm",
            "text": "In the following, we describe the overall algorithm of our approach (see Algorithm 1). First, we initialize the models and the policy with different random weights. Then, we proceed to the data collection step. In the first iteration, a uniform random controller is used to collect data from the real-world, which is stored in a buffer D. At subsequent iterations, trajectories from the real-world are collected with the adapted policies {\u03c0\u03b8\u20321 , ..., \u03c0\u03b8\u2032K}, and then aggregated with the trajectories from previous iterations. The models are trained with the aggregated real-environment samples following the procedure explained in section 4.1. The algorithm proceeds by imagining trajectories from each the ensemble of models {f\u03c61 , ..., f\u03c6K} using the policy \u03c0\u03b8. These trajectories are are used to perform the inner adaptation policy gradient step, yielding the adapted policies {\u03c0\u03b8\u20321 , ..., \u03c0\u03b8\u2032K}. Finally, we generate imaginary trajectories using the adapted policies \u03c0\u03b8\u2032k and models f\u03c6k , and optimize the policy towards the meta-objective (as explained in section 4.2). We iterate through these steps until desired performance is reached. The algorithm returns the optimal pre-update parameters \u03b8\u2217."
        },
        {
            "heading": "5 Benefits of the Algorithm",
            "text": "Meta-learning a policy over an ensemble of dynamic models using imaginary trajectory roll-outs provides several benefits over traditional model-based and model-based model-free approaches. In the following we discuss several such advantages, aiming to provide intuition for the algorithm.\nRegularization effect during training. Optimizing the policy to adapt within one policy gradient step to any of the fitted models imposes a regularizing effect on the policy learning (as [43] observed in the supervised learning case). The meta-optimization problem steers the policy towards higher plasticity in regions with high dynamics model uncertainty, shifting the burden of adapting to model discrepancies towards the inner policy gradient update.\nWe consider plasticity as the policy\u2019s ability to change its (conditional) distribution with a small change (i.e. gradient update) in the parameter space. The policy plasticity is manifested in the statistical distance between the pre- and post-update policy. In section 6.3 we analyze the connection between model uncertainty and the policy plasticity, finding a strong positive correlation between the model ensembles predictive variance and the KL-divergence between \u03c0\u03b8 and \u03c0\u03b8\u2032k . This effect prevents the policy to learn sub-optimal behaviors that arise in robust policy optimization. More importantly, this regularization effect fades away once the dynamics models get more accurate, which leads to asymptotic optimal policies if enough data is provided to the learned models. In section 6.4, we show how this property allows us to learn from noisy and highly biased models.\nTailored data collection for fast model improvement. Since we sample real-environment trajectories using the different policies {\u03c0\u03b8\u20321 , ..., \u03c0\u03b8\u2032K} obtained by adaptation to each model, the collected training data is more diverse which promotes robustness of the dynamic models. Specifically, the\nadapted policies tend to exploit the characteristic deficiencies of the respective dynamic models. As a result, we collect real-world data in regions where the dynamic models insufficiently approximate the true dynamics. This effect accelerates correcting the imprecision of the models leading to faster improvement. In Appendix A.1, we experimentally show the positive effect of tailored data collection on the performance.\nFast fine-tuning. Meta-learning optimizes a policy for fast adaptation [11] to a set of tasks. In our case, each task corresponds to a different believe of what the real environment dynamics might be. When optimal performance is not achieved, the ensemble of models will present high discrepancy in their predictions, increasing the likelihood of the real dynamics to lie in the believe distribution\u2019s support. As a result, the learned policy is likely to exhibit high adaptability towards the real environment, and fine-tuning the policy with VPG on the real environment leads to faster convergence than training the policy from scratch or from any other MB initialization.\nSimplicity. Our approach, contrary to previous methods, is simple: it does not rely on parameter noise exploration, careful reinitialization of the model weights or policy\u2019s entropy, hard to train probabilistic models, and it does not need to address the model distribution mismatch [23, 10, 35]."
        },
        {
            "heading": "6 Experiments",
            "text": "The aim of our experimental evaluation is to examine the following questions: 1) How does MBMPO compare against state-of-the-art model-free and model-based methods in terms of sample complexity and asymptotic performance? 2) How does the model uncertainty influence the policy\u2019s plasticity? 3) How robust is our method against imperfect models?\nTo answer the posed questions, we evaluate our approach on six continuous control benchmark tasks in the Mujoco simulator [44]. A depiction of the environments as well a detailed description of the experimental setup can be found in Appendix A.3. In all of the following experiments, the pre-update policy is used to report the average returns obtained with our method. The performance reported are averages over at least three random seeds. The source code and the experiments data is available on our supplementary website \u2020."
        },
        {
            "heading": "6.1 Comparison to State-of-the-Art: Model-Free",
            "text": "We compare our method in sample complexity and performance to four state-of-the-art model free RL algorithms: Deep Deterministic Policy Gradient (DDPG) [2], Trust Region Policy Optimization [1], Proximal Policy Optimization (PPO) [45], and Actor Critic using Kronecker-Factored Trust Region (ACKTR) [46]. The results are shown in Figure 1.\nIn all the locomotion tasks we are able to achieve maximum performance using between 10 and 100 times less data than model-free methods. In the most challenging domains: ant, hopper, and\n\u2020https://sites.google.com/view/mb-mpo\nwalker2D; the data complexity of our method is two orders of magnitude less than the MF. In the easier tasks: the simulated PR2 and swimmer, our method achieves the same performance of MF using 20-50\u00d7 less data. These results highlight the benefit of MB-MPO for real robotics tasks; the amount of real-world data needed for attaining maximum return corresponds to 30 min in the case of easier domains and to 90 min in the more complex ones."
        },
        {
            "heading": "6.2 Comparison to State-of-the-Art: Model-Based",
            "text": "We also compare our method against recent model-based work: Model-Ensemble Trust-Region Policy Optimization (ME-TRPO) [10], and the model-based approach introduced in Nagabandi et al. [22], which uses MPC for planning (MB-MPC).\nThe results, shown in Figure 2, highlight the strength of MB-MPO in complex tasks. MB-MPC struggles to perform well on tasks that require robust planning, and completely fails in tasks where medium/long-term planning is necessary (as in the case of hopper). In contrast, ME-TRPO is able to learn better policies, but the convergence to such policies is slower when compared to MB-MPO . Furthermore, while ME-TRPO converges to suboptimal policies in complex domains, MB-MPO is able to achieve max-performance."
        },
        {
            "heading": "6.3 Model Uncertainty and Policy Plasticity",
            "text": "In section 6.3 we hypothesize that the meta-optimization steers the policy towards higher plasticity in regions with high dynamics model uncertainty while embedding consistent model predictions into the pre-update policy. To empirically analyze this hypothesis, we conduct an experiment in a simple 2D-Point environment where the agent, starting uniformly from [\u22122, 2]2, must go to the goal position (0, 0). We use the average KL-divergence between \u03c0\u03b8 and the different adapted policies \u03c0\u03b8\u2032k to measure the plasticity conditioned on the state s.\nFigure 3 depicts the KL-divergence between the pre- and postupdate policy, as well as the standard deviation of the predictions of the ensemble over the state space. Since the agent steers towards the center of the environment, more transition data is available in this region. As a result the models present higher accuracy in the center. The results indicate a strong positive correlation between model uncertainty and the KL-divergence between pre- and postupdate policy. We find this connection between policy plasticity\nand predictive uncertainty consistently throughout the training and among different hyper-parameter configurations."
        },
        {
            "heading": "6.4 Robustness to Imperfect Dynamic Models and Compounding Errors",
            "text": "We pose the question of how robust our proposed algorithm is w.r.t. imperfect dynamics predictions. We examine it in two ways. First, with an illustrative example of a model with clearly wrong dynamics. Specifically, we add biased Gaussian noise N (b, 0.12) to the next state prediction, whereby the bias b \u223c U(0, bmax) is re-sampled in every iteration for each model. Second, we present a realistic case on which long horizon predictions are needed. Bootstrapping the model predictions for long horizons leads to high compounding errors, making policy learning on such predictions challenging.\nFigure 4 depicts the performance comparison between our method and ME-TRPO on the half-cheetah environment for various values of bmax. Results indicate that our method consistently outperforms ME-TRPO when exposed to biased and noisy dynamics models. ME-TPRO catastrophically fails to learn a policy in the presence of strong bias (i.e. bmax = 0.5 and bmax = 1.0), but our method, despite the strongly compromised dynamic predictions, is still able to learn a locomotion behavior with a positive forward velocity.\nThis property also manifests itself in long horizon tasks. Figure 5 compares the performance of our approach with inner learning rate \u03b1 = 10\u22123 against the edge case \u03b1 = 0, where no adaption is taking place. For each random seed, MB-MPO steadily converges to maximum performance. However, when there is no adaptation, the learning becomes unstable and different seeds exhibit different behavior: proper learning, getting stuck in sub-optimal behavior, and even unlearning good behaviors."
        },
        {
            "heading": "7 Conclusion",
            "text": "In this paper, we present a simple and generally applicable algorithm, model-based meta-policy optimization (MB-MPO), that learns an ensemble of dynamics models and meta-optimizes a policy for adaptation in each of the learned models. Our experimental results demonstrate that meta-learning a policy over an ensemble of learned models provides the recipe for reaching the same level of performance as state-of-the-art model-free methods with substantially lower sample complexity. We also compare our method against previous model-based approaches, obtaining better performance and faster convergence. Our analysis demonstrate the ineffectiveness of prior approaches to combat model-bias, and showcases the robustness of our method against imperfect models. As a result, we are able to extend model-based to more complex domains and longer horizons. One direction that merits further investigation is the usage of Bayesian neural networks, instead of ensembles, to learn a distribution of dynamics models. Finally, an exciting direction of future work is the application of MB-MPO to real-world systems."
        },
        {
            "heading": "Acknowledgments",
            "text": "We thank A. Gupta, C. Finn, and T. Kurutach for the feedback on the earlier draft of the paper. IC was supported by La Caixa Fellowship. The research leading to these results received funding from the EU Horizon 2020 Research and Innovation programme under grant agreement No. 731761 (IMAGINE) and was supported by Berkeley Deep Drive, Amazon Web Services, and Huawei."
        },
        {
            "heading": "A Appendix",
            "text": "A.1 Tailored Data Collection\nWe present the effects of collecting data using tailored exploration. We refer to tailored exploration as the effect of collecting data using the post-update policies \u2013 the policies adapted to each specific model. When training policies on learned models they tend to exploit the deficiencies of the model, and thus overfitting to it. Using the post-update policies to collect data results in exploring the regions of the state space where these policies overfit and the model is inaccurate. Iteratively collecting data in the regions where the models are innacurate has been shown to greatly improve the performance [47].\nThe effect of using tailored exploration is shown in Figure 6. In the half-cheetah and the walker we get an improvement of 12% and 11%, respectively. The tailored exploration effect cannot be accomplished by robust optimization algorithms, such as ME-TRPO. Those algorithms learn a single policy that is robust across models. The data collection using such policy will not exploit the regions in which each model fails resulting in less accurate models.\nA.2 Hyperparameter Study\nWe perform a hyperparameter study (see Figure 7) to assess the sensitivity of MB-MPO to its parameters. Specifically, we vary the inner learning rate \u03b1, the size of the ensemble, and the number of meta gradient steps before collecting further real environment samples. Consistent with the results in Figure 5, we find that adaptation significantly improves the performance when compared to the non-adaptive case of \u03b1 = 0. Increasing the number of models and meta gradient steps per iteration results in higher performance at a computational cost. However, as the computational burden is increased the performance gains diminish.\nUp to a certain level, increasing the number of meta gradient steps per iteration improves performance. Though, too many meta gradients steps (i.e. 60) can lead to early convergence to a suboptimal policy. This may be due to the fact that the variance of the Gaussian policy distribution is also learned. Usually, the policies variance decreases during the training. If the number of meta-gradient steps is too large, the policy loses its exploration capabilities too early and can hardly improve once the models are more accurate. This problem can be alleviated using a fixed policy variance, or by adding an entropy bonus the learning objective.\nA.3 Experiment Setup\nIn the following we provide a detailed description of the setup used in the experiments presented in section 6:\nEnvironments:\nWe benchmark MB-MPO on six continuous control benchmark tasks in the Mujoco simulator [44], shown in Fig. 8. Five of these tasks, namely swimmer, half-cheetah, walker2D, hopper and ant, involve robotic locomotion and are provided trough the OpenAI gym [48].\nThe sixth, the 7-DoF arm of the PR2 robot, has to reach arbitrary end-effector positions. Thereby, the PR2 robot is torque controlled. The reward function is comprised of the squared distance of the end-effector (TCP) to the goal and energy / control costs:\nr(s, a) = \u2212||sTCP \u2212 xgoal||22 \u2212 0.05 \u2217 ||a||22\nIn section 6.3 we use the simple 2D-Point environment to analyze the connection between policy plasticity and model uncertainty. The corresponding MDP is defined as follows:\nS = R2\nA = [\u22120.1, 0.1]2\np0(s0) = U[\u22122,2]2(s0) (uniform distribution over [\u22122, 2]2) p(st+1|st, at) = \u03b4(st + at)\nr(st, at) = \u2212||st||22 H = 30\nPolicy: We use a Gaussian policy \u03c0\u03b8(a|s) = N (a|\u00b5(a)\u03b8\u00b5 , \u03c3\u03b8\u03c3 ) with diagonal covariance matrix. The mean \u00b5(a)\u03b8\u00b5 is computed by a neural network (2 hidden layers of size 32, tanh nonlinearity) which receives the current state s as an input. During the policy optimization, both the weights \u03b8\u00b5 of the neural network and the standard deviation vector \u03c3\u03b8\u03c3 are learned.\nAdvantage-Estimation: We use generalized advantage estimation (GAE) [49] with \u03b3 = 0.99 and \u03bb = 1 in conjunction with a linear reward baseline as in [50] to estimate advantages.\nDynamics Model Ensemble: In all experiments (except in Figure 7b) we use an ensemble of 5 fully connected neural networks. For the different environments the following hidden layer sizes were used:\n\u2022 Ant, Walker: (512, 512, 512) \u2022 PR2, Swimmer, Hopper, Half-Cheetah: (512, 512) \u2022 2D-Point-Env: (128, 128)\nIn all models, we used weight normalization and ReLu nonlinearities. For the minimization of the l2 prediction error, the Adam optimizer with a batch-size of 500 was employed. In the first iteration all models are randomly initialized. In later iterations, the models are trained with warm starts using the parameters of the previous iteration. In each iteration and for each model in the ensemble the\ntransition data buffer D is randomly split in a training (80%) and validation (20%) set. The latter split is used to compute the validation loss after each training epoch on the shuffled training split. A rolling average of the validation losses with a persistence of 0.95 is maintained throughout the epochs. Each model\u2019s training is stopped individually as soon as the rolling validation loss average decreases.\nMeta-Policy Optimization: As described in section 4.2, the policy parameters \u03b8 are optimized using the gradient-based meta learning framework MAML. For the inner adaptation step we use a gradient step-size of \u03b1 = 0.001. For maximizing the meta-objective specified in equation 3 we use the policy gradient method TPRO [1] with KL-constraint \u03b4 = 0.01. Since computing the gradients of the meta-objective involves second order terms such as the Hessian of the policy\u2019s log-likelihood, computing the necessary Hessian vector products for TRPO analytically is very compute intensive. Hence, we use a finite difference approximation of the vector product of the Fisher Information Matrix and the gradients as suggested in [11]. If not denoted differently, 30 meta-optimization steps are performed before new trajectories are collected from the real environment.\nTrajectory collection: In each algorithm iteration 4000 environment transitions (20 trajectories of 200 time steps) are collected. For the meta-optimization, 100000 imaginary environment transitions are sampled.\nA.4 Computational Analysis\nIn this section we compare the computational complexity of MB-MPO against TRPO. Specifically, we report the wall clock time that it takes both algorithms to reach maximum performance on the half-cheetah environment when running the experiments on an Amazon Web Services EC2 c4.4xlarge compute instance. Our method only requires 20% more compute time than TRPO (7 hours instead of 5.5), while attaining 70\u00d7 reduction in sample complexity. The main time bottleneck of our method compared with the model-free algorithms is training the models.\nNotice that when running real world experiment, our method will be significantly faster than modelfree approaches since the bottleneck then would shift towards the data collection step."
        }
    ],
    "title": "Model-Based Reinforcement Learning via Meta-Policy Optimization",
    "year": 2018
}