{
    "abstractText": "Teaching a computer to read and answer general questions pertaining to a document is a challenging yet unsolved problem. In this paper, we describe a novel neural network architecture called the Reasoning Network (ReasoNet) for machine comprehension tasks. ReasoNets make use of multiple turns to e ectively exploit and then reason over the relation among queries, documents, and answers. Di erent from previous approaches using a xed number of turns during inference, ReasoNets introduce a termination state to relax this constraint on the reasoning depth. With the use of reinforcement learning, ReasoNets can dynamically determine whether to continue the comprehension process after digesting intermediate results, or to terminate reading when it concludes that existing information is adequate to produce an answer. ReasoNets achieve superior performance in machine comprehension datasets, including unstructured CNN and Daily Mail datasets, the Stanford SQuAD dataset, and a structured Graph Reachability dataset.",
    "authors": [
        {
            "affiliations": [],
            "name": "Yelong Shen"
        },
        {
            "affiliations": [],
            "name": "Po-Sen Huang"
        },
        {
            "affiliations": [],
            "name": "Jianfeng Gao"
        },
        {
            "affiliations": [],
            "name": "Weizhu Chen"
        }
    ],
    "id": "SP:7ca174fc4e575fee1b803c5d5103a078d5985a20",
    "references": [
        {
            "authors": [
                "Dzmitry Bahdanau",
                "Kyunghyun Cho",
                "Yoshua Bengio"
            ],
            "title": "Neural machine translation by jointly learning to align and translate",
            "venue": "In ICLR",
            "year": 2015
        },
        {
            "authors": [
                "L\u00e9on Bottou"
            ],
            "title": "From machine learning to machine reasoning",
            "venue": "Machine Learning 94,",
            "year": 2014
        },
        {
            "authors": [
                "Danqi Chen",
                "Jason Bolton",
                "Christopher D Manning"
            ],
            "title": "A Thorough Examination of the CNN / Daily Mail Reading Comprehension",
            "year": 2016
        },
        {
            "authors": [
                "Danqi Chen",
                "Adam Fisch",
                "Jason Weston",
                "Antoine Bordes"
            ],
            "title": "Reading Wikipedia to Answer Open-Domain Questions",
            "venue": "CoRR abs/1704.00051",
            "year": 2017
        },
        {
            "authors": [
                "Yiming Cui",
                "Zhipeng Chen",
                "Si Wei",
                "Shijin Wang",
                "Ting Liu",
                "Guoping Hu"
            ],
            "title": "Attention-over-Attention Neural Networks for Reading Comprehension",
            "year": 2016
        },
        {
            "authors": [
                "Bhuwan Dhingra",
                "Hanxiao Liu",
                "William W. Cohen",
                "Ruslan Salakhutdinov"
            ],
            "title": "Gated-Attention Readers for Text Comprehension",
            "venue": "CoRR abs/1606.01549",
            "year": 2016
        },
        {
            "authors": [
                "Karm Moritz Hermann",
                "Tom\u00e1\u0161 Ko\u010disk\u00fd",
                "Edward Grefenstette",
                "Lasse Espeholt",
                "Will Kay",
                "Mustafa Suleyman",
                "Phil Blunsom"
            ],
            "title": "Teaching Machines to Read and Comprehend",
            "year": 2015
        },
        {
            "authors": [
                "Felix Hill",
                "Antoine Bordes",
                "Sumit Chopra",
                "Jason Weston"
            ],
            "title": "The Goldilocks Principle: Reading Children\u2019S Books With Explicit Memory Representations",
            "venue": "In ICLR",
            "year": 2016
        },
        {
            "authors": [
                "Rudolf Kadlec",
                "Martin Schmid",
                "Ondrej Bajgar",
                "Jan Kleindienst"
            ],
            "title": "Text Understanding with the Attention Sum Reader Network",
            "year": 2016
        },
        {
            "authors": [
                "Leslie Pack Kaelbling",
                "Michael L. Littman",
                "Anthony R. Cassandra"
            ],
            "title": "Planning and acting in partially observable stochastic domains",
            "venue": "Arti cial Intelligence",
            "year": 1998
        },
        {
            "authors": [
                "Diederik P. Kingma",
                "Jimmy Ba"
            ],
            "title": "Adam: A Method for Stochastic Optimization",
            "venue": "In ICLR",
            "year": 2015
        },
        {
            "authors": [
                "Sosuke Kobayashi",
                "Ran Tian",
                "Naoaki Okazaki",
                "Kentaro Inui"
            ],
            "title": "Dynamic Entity Representation with Max-pooling Improves Machine Reading. In Proceedings of the North American Chapter of the Association for Computational Linguistics and Human Language Technologies (NAACL-HLT)",
            "year": 2016
        },
        {
            "authors": [
                "Ankit Kumar",
                "Ozan Irsoy",
                "Peter Ondruska",
                "Mohit Iyyer",
                "James Bradbury",
                "Ishaan Gulrajani",
                "Victor Zhong",
                "Romain Paulus",
                "Richard Socher"
            ],
            "title": "Ask Me Anything: Dynamic Memory Networks for Natural Language Processing",
            "year": 2016
        },
        {
            "authors": [
                "Kenton Lee",
                "Tom Kwiatkowski",
                "Ankur P. Parikh",
                "Dipanjan Das"
            ],
            "title": "Learning Recurrent Span Representations for Extractive Question Answering",
            "year": 2016
        },
        {
            "authors": [
                "Volodymyr Mnih",
                "Nicolas Heess",
                "Alex Graves"
            ],
            "title": "Recurrent models of visual attention",
            "venue": "In Advances in Neural Information Processing Systems",
            "year": 2014
        },
        {
            "authors": [
                "Rodrigo Nogueira",
                "Kyunghyun Cho"
            ],
            "title": "WebNav: A New Large-Scale Task for Natural Language based Sequential Decision Making",
            "venue": "In Advances in Neural Information Processing Systems",
            "year": 2016
        },
        {
            "authors": [
                "Je rey Pennington",
                "Richard Socher",
                "Christopher D. Manning"
            ],
            "title": "Glove: Global Vectors for Word Representation",
            "year": 2014
        },
        {
            "authors": [
                "Pranav Rajpurkar",
                "Jian Zhang",
                "Konstantin Lopyrev",
                "Percy Liang"
            ],
            "title": "SQuAD: 100, 000+ Questions for Machine Comprehension of Text",
            "year": 2016
        },
        {
            "authors": [
                "Matthew Richardson",
                "Christopher JC Burges",
                "Erin Renshaw"
            ],
            "title": "MCTest: A Challenge Dataset for the Open-Domain Machine Comprehension of Text",
            "year": 2013
        },
        {
            "authors": [
                "Min Joon Seo",
                "Aniruddha Kembhavi",
                "Ali Farhadi",
                "Hannaneh Hajishirzi"
            ],
            "title": "Bidirectional Attention Flow for Machine Comprehension",
            "venue": "CoRR abs/1611.01603",
            "year": 2016
        },
        {
            "authors": [
                "Alessandro Sordoni",
                "Phillip Bachman",
                "Yoshua Bengio"
            ],
            "title": "Iterative Alternating Neural Attention for Machine Reading",
            "venue": "CoRR abs/1606.02245",
            "year": 2016
        },
        {
            "authors": [
                "Sainbayar Sukhbaatar",
                "Jason Weston",
                "Rob Fergus"
            ],
            "title": "End-to-end memory networks",
            "venue": "In Advances in Neural Information Processing Systems",
            "year": 2015
        },
        {
            "authors": [
                "Richard Stuart Sutton"
            ],
            "title": "Temporal Credit Assignment in Reinforcement Learning",
            "venue": "Ph.D. Dissertation",
            "year": 1984
        },
        {
            "authors": [
                "Richard S. Sutton",
                "David McAllester",
                "Satinder Singh",
                "Yishay Mansour"
            ],
            "title": "Policy Gradient Methods for Reinforcement Learning with Function Approximation",
            "year": 1999
        },
        {
            "authors": [
                "Adam Trischler",
                "Zheng Ye",
                "Xingdi Yuan",
                "Kaheer Suleman"
            ],
            "title": "Natural Language Comprehension with the EpiReader",
            "year": 2016
        },
        {
            "authors": [
                "Shuohang Wang",
                "Jing Jiang"
            ],
            "title": "Machine Comprehension Using Match- LSTM and Answer Pointer",
            "venue": "CoRR abs/1608.07905",
            "year": 2016
        },
        {
            "authors": [
                "Wenhui Wang",
                "Nan Yang",
                "Furu Wei",
                "Baobao Chang",
                "Ming Zhou"
            ],
            "title": "Gated Self-Matching Networks for Reading Comprehension and Question Answering",
            "year": 2017
        },
        {
            "authors": [
                "Zhiguo Wang",
                "Haitao Mi",
                "Wael Hamza",
                "Radu Florian"
            ],
            "title": "Multi-Perspective Context Matching for Machine Comprehension",
            "venue": "CoRR abs/1612.04211",
            "year": 2016
        },
        {
            "authors": [
                "Dirk Weissenborn"
            ],
            "title": "Separating Answers from Queries for Neural Reading Comprehension",
            "venue": "CoRR abs/1607.03316",
            "year": 2016
        },
        {
            "authors": [
                "Dirk Weissenborn",
                "Georg Wiese",
                "Laura Sei e"
            ],
            "title": "FastQA: A Simple and E cient Neural Architecture for Question Answering",
            "year": 2017
        },
        {
            "authors": [
                "Ronald J Williams"
            ],
            "title": "Simple statistical gradient-following algorithms for connectionist reinforcement learning",
            "venue": "Machine Learning",
            "year": 1992
        },
        {
            "authors": [
                "Caiming Xiong",
                "Victor Zhong",
                "Richard Socher"
            ],
            "title": "Dynamic Coattention Networks For Question Answering",
            "venue": "CoRR abs/1611.01604",
            "year": 2016
        },
        {
            "authors": [
                "Zhilin Yang",
                "Bhuwan Dhingra",
                "Ye Yuan",
                "Junjie Hu",
                "William W. Cohen",
                "Ruslan Salakhutdinov"
            ],
            "title": "Words or Characters? Fine-grained Gating for Reading Comprehension",
            "year": 2016
        },
        {
            "authors": [
                "Yang Yu",
                "Wei Zhang",
                "Kazi Hasan",
                "Mo Yu",
                "Bing Xiang",
                "Bowen Zhou"
            ],
            "title": "End-to-End Reading Comprehension with Dynamic Answer Chunk Ranking",
            "year": 2016
        },
        {
            "authors": [
                "Matthew D. Zeiler"
            ],
            "title": "ADADELTA: An Adaptive Learning Rate Method",
            "venue": "CoRR abs/1212.5701",
            "year": 2012
        },
        {
            "authors": [
                "Junbei Zhang",
                "Xiao-Dan Zhu",
                "Qian Chen",
                "Li-Rong Dai",
                "Si Wei",
                "Hui Jiang"
            ],
            "title": "Exploring Question Understanding and Adaptation in Neural-Network- Based Question Answering",
            "year": 2017
        }
    ],
    "sections": [
        {
            "text": "KEYWORDS Machine Reading Comprehension, Deep Reinforcement Learning, ReasoNet"
        },
        {
            "heading": "1 INTRODUCTION",
            "text": "Teaching machines to read, process, and comprehend natural language documents is a coveted goal for arti cial intelligence [2, 7, 19]. Genuine reading comprehension is extremely challenging, since e ective comprehension involves thorough understanding of documents and sophisticated inference. Toward solving this machine reading comprehension problem, in recent years, several works have collected various datasets, in the form of question, passage, and answer, to test machine on answering a question based on the provided passage [7, 8, 18, 19]. Some large-scale cloze-style datasets [7, 8] have gained signi cant attention along with powerful deep learning models.\nRecent approaches on cloze-style datasets can be separated into two categories: single-turn and multi-turn reasoning. Single turn reasoning models utilize attention mechanisms [1] to emphasize speci c parts of the document which are relevant to the query.\nPermission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for pro t or commercial advantage and that copies bear this notice and the full citation on the rst page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior speci c permission and/or a fee. Request permissions from permissions@acm.org. KDD\u201917, August 13-17, 2017, Halifax, NS, Canada \u00a9 2017 ACM. 978-1-4503-4887-4/17/08. . . $15.00 DOI: 10.1145/3097983.3098177\nThese attention models subsequently calculate the relevance between a query and the corresponding weighted representations of document subunits (e.g. sentences or words) to score target candidates [7\u20139]. However, considering the sophistication of the problem, after a single-turn comprehension, readers often revisit some speci c passage or the question to grasp a better understanding of the problem. With this motivation, recent advances in reading comprehension have made use of multiple turns to infer the relation between query, document and answer [6, 8, 21, 25]. By repeatedly processing the document and the question after digesting intermediate information, multi-turn reasoning can generally produce a better answer and these existing works have demonstrated its superior performance consistently.\nExisting multi-turn models have a pre-de ned number of hops or iterations in their inference without regard to the complexity of each individual query or document. However, when human read a document with a question in mind, we often decide whether we want to stop reading if we believe the observed information is adequate already to answer the question, or continue reading after digesting intermediate information until we can answer the question with con dence. This behavior generally varies from document to document or question to question because it is related to the sophistication of the document or the di culty of the question. Meanwhile, the analysis in [3] also illustrates the huge variations in the di culty level with respect to questions in the CNN/Daily Mail datasets [7]. For a signi cant part of the datasets, this analysis shows that the problem cannot be solved without appropriate reasoning on both its query and document.\nWith this motivation, we propose a novel neural network architecture called Reasoning Network (ReasoNet). which tries to mimic the inference process of human readers. With a question in mind, ReasoNets read a document repeatedly, each time focusing on di erent parts of the document until a satisfying answer is found or formed. This reminds us of a Chinese proverb: \u201cThe meaning of a book will become clear if you read it hundreds of times.\u201d. Moreover, unlike previous approaches using xed number of hops or iterations, ReasoNets introduce a termination state in the inference. This state can decide whether to continue the inference to the next turn after digesting intermediate information, or to terminate the whole inference when it concludes that existing information is sufcient to yield an answer. The number of turns in the inference is dynamically modeled by both the document and the query, and can be learned automatically according to the di culty of the problem.\nOne of the signi cant challenges ReasoNets face is how to design an e cient training method, since the termination state is discrete and not connected to the nal output. This prohibits canonical back-propagation method being directly applied to train ReasoNets.\nar X\niv :1\n60 9.\n05 28\n4v 3\n[ cs\n.L G\n] 2\n0 Ju\nn 20\n17\nMotivated by [15, 31], we tackle this challenge by proposing a reinforcement learning approach, which utilizes an instance-dependent reward baseline, to successfully train ReasoNets. Finally, by accounting for a dynamic termination state during inference and applying proposed deep reinforcement learning optimization method, ReasoNets achieve the state-of-the-art results in machine comprehension datasets, including unstructured CNN and Daily Mail datasets, and the proposed structured Graph Reachability dataset, when the paper is rst publicly available on arXiv.1 At the time of the paper submission, we apply ReasoNet to the competitive Stanford Question Answering Dataset(SQuAD), ReasoNets outperform all existing published approaches and rank at second place on the test set leaderboard.2\nThis paper is organized as follows. In Section 2, we review and compare recent work on machine reading comprehension tasks. In Section 3, we introduce our proposed ReasoNet model architecture and training objectives. Section 4 presents the experimental setting and results on unstructured and structured machine reading comprehension tasks ."
        },
        {
            "heading": "2 RELATEDWORK",
            "text": "Recently, with large-scale datasets available and the impressive advance of various statistical models, machine reading comprehension tasks have attracted much attention. Here we mainly focus on the related work in cloze-style datasets [7, 8]. Based on how they perform the inference, we can classify their models into two categories: single-turn and multi-turn reasoning.\nSingle-turn reasoning: Single turn reasoning models utilize an attention mechanism to emphasize some sections of a document which are relevant to a query. This can be thought of as treating some parts unimportant while focusing on other important ones to nd the most probable answer. Hermann et al. [7] propose the attentive reader and the impatient reader models using neural networks with an attention over passages to predict candidates. Hill et al. [8] use attention over window-based memory, which encodes a window of words around entity candidates, by leveraging an endto-end memory network [22]. Meanwhile, given the same entity candidate can appear multiple times in a passage, Kadlec et al. [9] propose the attention-sum reader to sum up all the attention scores for the same entity. This score captures the relevance between a query and a candidate. Chen et al. [3] propose using a bilinear term similarity function to calculate attention scores with pretrained word embeddings. Trischler et al. [25] propose the EpiReader which uses two neural network structures: one extracts candidates using the attention-sum reader; the other reranks candidates based on a bilinear term similarity score calculated from query and passage representations.\nMulti-turn reasoning: For complex passages and complex queries, human readers often revisit the given document in order to perform deeper inference after reading a document. Several recent studies try to simulate this revisit by combining the information in the query with the new information digested from previous iterations [6, 8, 13, 21, 29]. Hill et al. [8] use multiple hops memory network to augment the query with new information from the\n1https://arxiv.org/abs/1609.05284 2http://www.stanford-qa.com\nprevious hop. Gated Attention reader [6] is an extension of the attention-sum reader with multiple iterations by pushing the query encoding into an attention-based gate in each iteration. Iterative Alternative (IA) reader [21] produces a new query glimpse and document glimpse in each iteration and utilizes them alternatively in the next iteration. Cui et al. [5] further propose to extend the query-speci c attention to both query-to-document attention and document-to-query attention, which is built from the intermediate results in the query-speci c attention. By reading documents and enriching the query in an iterative fashion, multi-turn reasoning has demonstrated their superior performance consistently.\nOur proposed approach explores the idea of using both attentionsum to aggregate candidate attention scores and multiple turns to attain a better reasoning capability. Unlike previous approaches using a xed number of hops or iterations, motivated by [15, 16], we propose a termination module in the inference. The termination module can decide whether to continue to infer the next turn after digesting intermediate information, or to terminate the whole inference process when it concludes existing information is su cient to yield an answer. The number of turns in the inference is dynamically modeled by both a document and a query, and is generally related to the complexity of the document and the query."
        },
        {
            "heading": "3 REASONING NETWORKS",
            "text": "ReasoNets are devised to mimic the inference process of human readers. ReasoNets read a document repeatedly with attention on di erent parts each time until a satisfying answer is found. As shown in Figure 1, a ReasoNet is composed of the following components:\nMemory: The external memory is denoted as M . It is a list of word vectors, M = {mi }i=1..D , where mi is a xed dimensional vector. For example, in the Graph Reachability, mi is the vector representation of each word in the graph description encoded by a bidirectional-RNN. Please refer to Section 4 for the detailed setup in each experiment.\nAttention: The attention vectorxt is generated based on the current internal state st and the external memoryM : xt = fatt (st ,M ;\u03b8x ). Please refer to Section 4 for the detailed setup in each experiment.\nInternal State: The internal state is denoted as s which is a vector representation of the question state. Typically, the initial state s1 is the last-word vector representation of query by an RNN. The t-th time step of the internal state is represented by st . The sequence of internal states are modeled by an RNN: st+1 = RNN(st ,xt ;\u03b8s ), where xt is the attention vector mentioned above.\nTermination Gate: The termination gate generates a random variable according to the current internal state; tt \u223c p(\u00b7| ft\u0434(st ;\u03b8t\u0434))). tt is a binary random variable. If tt is true, the ReasoNet stops, and the answer module executes at time step t ; otherwise the ReasoNet generates an attention vector xt+1, and feeds the vector into the state network to update the next internal state st+1.\nAnswer: The action of answer module is triggered when the termination gate variable is true: at \u223c p(\u00b7| fa (st ;\u03b8a )).\nIn Algorithm 1, we describe the stochastic inference process of a ReasoNet. The process can be considered as solving a Partially Observable Markov Decision Process (POMDP) [10] in the reinforcement learning (RL) literature. The state sequence s1:T is hidden\nAlgorithm 1: Stochastic Inference in a ReasoNet Input :Memory M ; Initial state s1; Step t = 1; Maximum\nStep Tmax Output :Termination Step T , Answer aT\n1 Sample tt from the distribution p(\u00b7| ft\u0434(st ;\u03b8t\u0434)); 2 if tt is false, go to Step 3; otherwise Step 6; 3 Generate attention vector xt = fatt (st ,M ;\u03b8x ); 4 Update internal state st+1 = RNN(st ,xt ;\u03b8s ); 5 Set t = t + 1; if t < Tmax go to Step 1; otherwise Step 6; 6 Generate answer at \u223c p(\u00b7| fa (st ;\u03b8a )); 7 Return T = t and aT = at ;\nand dynamic, controlled by an RNN sequence model. The ReasoNet performs an answer action aT at the T -th step, which implies that the termination gate variables t1:T = (t1 = 0, t2 = 0, ..., tT\u22121 = 0, tT = 1). The ReasoNet learns a stochastic policy \u03c0 ((tt ,at )|st ;\u03b8 ) with parameters \u03b8 to get a distribution of termination actions, to continue reading or to stop, and of answer actions if the model decides to stop at the current step. The termination step T varies from instance to instance.\nThe learnable parameters \u03b8 of the ReasoNet are the embedding matrices \u03b8W , attention network \u03b8x , the state RNN network \u03b8s , the answer action network \u03b8a , and the termination gate network \u03b8t\u0434 . The parameters \u03b8 = {\u03b8W ,\u03b8x ,\u03b8s ,\u03b8a ,\u03b8t\u0434} are trained by maximizing the total expect reward. The expected reward for an instance is de ned as:\nJ (\u03b8 ) = E\u03c0 (t1:T ,aT ;\u03b8 ) [ T\u2211 t=1 rt ] The reward can only be received at the nal termination step when an answer action aT is performed. We de ne rT = 1 if tT = 1 and the answer is correct, and rT = 0 otherwise. The rewards on intermediate steps are zeros, {rt = 0}t=1...T\u22121. J can be maximized by directly applying gradient based optimization methods. The\ngradient of J is given by:\n\u2207\u03b8 J (\u03b8 ) = E\u03c0 (t1:T ,aT ;\u03b8 ) [\u2207\u03b8 log\u03c0 (t1:T ,aT ;\u03b8 )rT ]\nMotivated by the REINFORCE algorithm [31], we compute\u2207\u03b8 J (\u03b8 ):\nE\u03c0 (t1:T ,aT ;\u03b8 ) [\u2207\u03b8 log\u03c0 (t1:T ,aT ;\u03b8 )rT ] =\u2211 (t1:T ,aT )\u2208A\u2020 \u03c0 (t1:T ,aT ;\u03b8 ) [\u2207\u03b8 log\u03c0 (t1:T ,aT ;\u03b8 )(rT \u2212 bT )]\nwhere A\u2020 is all the possible episodes, T , t1:T ,aT and rT are the termination step, termination action, answer action, and reward, respectively, for the (t1:T , aT ) episode. bT is called the reward baseline in the RL literature to lower the variance [23]. It is common to select bT = E\u03c0 [rT ] [24], and can be updated via an online moving average approach : bT = \u03bbbT + (1 \u2212 \u03bb)rT . However, we empirically nd that the above approach leads to slow convergence in training ReasoNets. Intuitively, the average baselines {bT ;T = 1..Tmax} are global variables independent of instances. It is hard for these baselines to capture the dynamic termination behavior of ReasoNets. Since ReasoNets may stop at di erent time steps for di erent instances, the adoption of a global variable without considering the dynamic variance in each instance is inappropriate. To resolve this weakness in traditional methods and account for the dynamic characteristic of ReasoNets, we propose an instance-dependent baseline method to calculate \u2207\u03b8 J (\u03b8 ), as illustrated in Section 3.1. Empirical results show that the proposed reward schema achieves better results compared to baseline approaches."
        },
        {
            "heading": "3.1 Training Details",
            "text": "In the machine reading comprehension tasks, a training dataset is a collection of triplets of query q, passage p, and answer a. Say \u3008qn ,pn ,an\u3009 is the n-th training instance.\nThe rst step is to extract memory M from pn by mapping each symbolic in the passage to a contextual representation given by the concatenation of forward and backward RNN hidden states, i.e., mk = [\u2212\u2192pnk ,\u2190\u2212pn |pn |\u2212k+1], and extract initial state s1 from qn by assigning s1 = [\u2212\u2192qn |qn | ,\u2190\u2212qn1]. Given M and s1 for the n-th training instance, a ReasoNet executes |A\u2020 | episodes, where all possible episodes A\u2020 can be enumerated by setting a maximum step. Each episode generates actions and a reward from the last step: \u3008(t1:T ,aT ), rT \u3009(t1:T ,aT )\u2208A\u2020 . Therefore, the gradient of J can be rewritten as:\n\u2207\u03b8 J (\u03b8 ) = \u2211\n(t1:T ,aT )\u2208A\u2020 \u03c0 (t1:T ,aT ;\u03b8 ) [\u2207\u03b8 log\u03c0 (t1:T ,aT ;\u03b8 )(rT \u2212 b)]\nwhere the baseline b = \u2211 (t1:T ,aT )\u2208A\u2020 \u03c0 (t1:T ,aT ;\u03b8 )rT is the average reward on the |A\u2020 | episodes for the n-th training instance. It allows di erent baselines for di erent training instances. This can be benecial since the complexity of training instances varies signi cantly. In experiments, we empirically nd using ( rTb \u2212 1) in replace of (rT \u2212 b) can lead to a faster convergence. Therefore, we adopt this approach to train ReasoNets in the experiments."
        },
        {
            "heading": "4 EXPERIMENTS",
            "text": "In this section, we evaluate the performance of ReasoNets in machine comprehension datasets, including unstructured CNN and\nDaily Mail datasets, the Stanford SQuAD dataset, and a structured Graph Reachability dataset."
        },
        {
            "heading": "4.1 CNN and Daily Mail Datasets",
            "text": "We examine the performance of ReasoNets on CNN and Daily Mail datasets.3 The detailed settings of the ReasoNet model are as follows.\nVocab Size: For training our ReasoNet, we keep the most frequent |V | = 101k words (not including 584 entities and 1 placeholder marker) in the CNN dataset, and |V | = 151k words (not including 530 entities and 1 placeholder marker) in the Daily Mail dataset.\nEmbedding Layer: We choose 300-dimensional word embeddings, and use the 300-dimensional pretrained Glove word embeddings [17] for initialization. We also apply dropout with probability 0.2 to the embedding layer.\nBi-GRU Encoder: We apply bidirectional GRU for encoding query and passage into vector representations. We set the number of hidden units to be 256 and 384 for the CNN and Daily Mail datasets, respectively. The recurrent weights of GRUs are initialized with random orthogonal matrices. The other weights in GRU cell are initialized from a uniform distribution between \u22120.01 and 0.01. We use a shared GRU model for both query and passage.\nMemory andAttention: The memory of the ReasoNet on CNN and Daily Mail dataset is composed of query memory and passage memory. M = (Mquery ,Mdoc ), where Mquery and Mdoc are extracted from query bidirectional-GRU encoder and passage bidirectional-GRU encoder respectively. We choose projected cosine similarity function as the attention module. The attention score adoct,i on memory m doc i given the state st is computed as follows: adoct,i = softmaxi=1, ..., |Mdoc |\u03b3 cos(W doc 1 m doc i ,W doc 2 st ), where \u03b3 is set to 10. W doc1 and W doc 2 are weight vectors associated with mdoci and st , respectively, and are joint trained in the ReasoNet. Thus, the attention vector on passage is given by xdoct = \u2211 |Mdoc | i a doc t,i m doc i . Similarly, the attention vector on query\nis xqueryt = \u2211 |Mquery | i a query t,i m query i . The nal attention vector is the concatenation of the query attention vector and the passage attention vector xt = (xqueryt ,xdoct ). The attention module is parameterized by \u03b8x = (W query1 ,W query 2 ,W doc 1 ,W doc 2 );\nInternal State Controller: We choose GRU model as the internal state controller. The number of hidden units in the GRU state controller is 256 for CNN and 384 for Daily Mail. The initial state of the GRU controller is set to be the last-word of the query representation by a bidirectional-GRU encoder.\nTerminationModule: We adopt a logistical regression to model the termination variable at each time step:\nft\u0434(st ;\u03b8t\u0434) = sigmoid(Wt\u0434st + bt\u0434);\u03b8t\u0434 = (Wt\u0434 ,bt\u0434)\nwhereWt\u0434 and bt\u0434 are the weight matrix and bias vector, respectively.\nAnswer Module: We apply a linear projection from GRU outputs and make predictions on the entity candidates. Following the\n3The CNN and Daily Mail datasets are available at https://github.com/deepmind/rcdata\nsettings in AS Reader [9], we sum up scores from the same candidate and make a prediction. Thus, AS Reader can be viewed as a special case of ReasoNets with Tmax = 1.4\nOther Details: The maximum reasoning step, Tmax is set to 5 in experiments on both CNN and Daily Mail datasets. We use ADAM optimizer [11] for parameter optimization with an initial learning rate of 0.0005, \u03b21 = 0.9 and \u03b22 = 0.999; The absolute value of gradient on each parameter is clipped within 0.001. The batch size is 64 for both CNN and Daily Mail datasets. For each batch of the CNN and Daily Mail datasets, we randomly reshu e the assignment of named entities [7]. This forces the model to treat the named entities as semantically meaningless labels. In the prediction of test cases, we randomly reshu e named entities up to 4 times, and report the averaged answer. Models are trained on GTX TitanX 12GB. It takes 7 hours per epoch to train on the Daily Mail dataset and 3 hours per epoch to train on the CNN dataset. The models are usually converged within 6 epochs on both CNN and Daily Mail datasets. 4When ReasoNet is set with Tmax = 1 in CNN and Daily Mail, it directly applies s0 to make predictions on the entity candidates, without performing attention on the memory module. The prediction module in ReasoNets is the same as in AS Reader. It sums up the scores from the same entity candidates, where the scores are calculated by the inner product between st and mdoce , where mdoce is an embedding vector of one entity candidate in the passage.\nResults: Table 1 shows the performance of all the existing single model baselines and our proposed ReasoNet. Among all the baselines, AS Reader could be viewed as a special case of ReasoNet with Tmax = 1. Comparing with the AS Reader, ReasoNet shows the signi cant improvement by capturing multi-turn reasoning in the paragraph. Iterative Attention Reader, EpiReader and GA Reader are the three multi-turn reasoning models with xed reasoning steps. ReasoNet also outperforms all of them by integrating termination gate in the model which allows di erent reasoning steps for di erent test cases. AoA Reader is another single-turn reasoning model, it captures the word alignment signals between query and passage, and shows a big improvement over AS Reader. ReasoNet obtains comparable results with AoA Reader on CNN test set. We expect that ReasoNet could be improved further by incorporating the word alignment information in the memory module as suggested in AoA Reader.\nWe show the distribution of termination step distribution of ReasoNets in the CNN dataset in Figure 2. The distributions spread out across di erent steps. Around 70% of the instances terminate in the last step. Figure 3 gives a test example on CNN dataset, which illustrates the inference process of the ReasoNet. The model initially focuses on wrong entities with low termination probability. In the second and third steps, the model focuses on the right clue with higher termination probability. Interestingly, we also nd its query attention focuses on the placeholder token throughout all the steps."
        },
        {
            "heading": "4.2 SQuAD Dataset",
            "text": "In this section, we evaluate ReasoNet model on the task of question answering using the SQuAD dataset [18].5 SQuAD is a machine comprehension dataset on 536 Wikipedia articles, with more than 100,000 questions. Two metrics are used to evaluate models: Exact Match (EM) and a softer metric, F1 score, which measures the weighted average of the precision and recall rate at the character level. The dataset consists of 90k/10k training/dev question-contextanswer tuples with a large hidden test set. The model architecture used for this task is as follows:\n5SQuAD Competition Website is https://rajpurkar.github.io/SQuAD-explorer/\nVocab Size: We use the python NLTK tokenizer6 to preprocess passages and questions, and obtain about 100K words in the vocabulary.\nEmbedding Layer: We use the 100-dimensional pretrained Glove vectors [17] as word embeddings. These Glove vectors are xed during the model training. To alleviate the out-of-vocabulary issue, we adopt one layer 100-dimensional convolutional neural network on character-level with a width size of 5 and each character encoded as an 8-dimensional vector following the work [20]. The 100-dimensional Glove word vector and the 100-dimensional character-level vector are concatenated to obtain a 200-dimensional vector for each word.\nBi-GRU Encoder: We apply bidirectional GRU for encoding query and passage into vector representations. The number of hidden units is set to 128.\nMemory: We use bidirectional-GRU encoders to extract the query representation Mquery and the passage representation Mdoc , given a query and a passage. We compute the similarity matrix\n6NLTK package could be downloaded from http://www.nltk.org/\nbetween each word in the query and each word in the passage. The similarity matrix is denoted as S \u2208 RT\u00d7J , where T and J are the number of words in the passage and query, respectively, and St j = w \u1d40 S [M doc :t ;M query :j ;M doc :t \u25e6M query :j ] \u2208 R, where wS is a trainable weight vector, \u25e6 denotes the elementwise multiplication, and [; ] is the vector concatenation across row. We then compute the context-to-query attention and query-to-context attention from the similarity matrix S by following recent co-attention work [20] to obtain the query-aware passage representation G. We feed G to a 128-dimensional bidirectional GRU to obtain the memory M = bidirectional-GRU(G), where M \u2208 R256\u00d7T .\nInternal State Controller: We use a GRU model with 256- dimensional hidden units as the internal state controller. The initial state of the GRU controller is the last-word representation of the query bidirectional-GRU encoder.\nTermination Module: We use the same termination module as in the CNN and Daily Mail experiments.\nAnswer Module: SQuAD task requires the model to nd a span in the passage to answer the query. Thus the answer module requires to predict the start and end indices of the answer span in the passage. The probability distribution of selecting the start index over the passage at state st is computed by :\np1t = softmax(w \u1d40 p1 [M ;M \u25e6 St ])\nwhere St is given via tiling st byT times across the column andwp1 is a trainable weight vector. The probability distribution of selecting the end index over passage is computed in a similar manner:\np2t = softmax(w \u1d40 p2 [M ;M \u25e6 St ])\nOther Details: The maximum reasoning stepTmax is set to 10 in SQuAD experiments. We use AdaDelta optimizer [35] for parameter optimization with an initial learning rate of 0.5 and a batch size\nof 32. Models are trained on GTX TitanX 12GB. It takes about 40 minutes per epoch for training, with 18 epochs in total.\nResults : In the Table 2, we report the performance of all models in the SQuAD leaderboard.7 In the upper part of the Table 2, we compare ReasoNet with all published baselines at the time of submission. Speci cally, BiDAF model could be viewed as a special case of ReasoNet withTmax = 1. It is worth noting that this SQuAD leaderboard is highly active and competitive. The test set is hidden to all models and all the results on the leaderboard are produced and reported by the organizer; thus all the results here are reproducible. In Table 2, we demonstrate that ReasoNet outperforms all existing published approaches. While we compare ReasoNet with BiDAF, ReasoNet exceeds BiDAF both in single model and ensemble model cases. This demonstrates the importance of the dynamic multi-turn reasoning over a passage. In the bottom part of Table 2, we compare ReasoNet with all unpublished methods at the time of this submission, ReasoNet holds the second position in all the competing approaches in the SQuAD leaderboard."
        },
        {
            "heading": "4.3 Graph Reachability Task",
            "text": "Recent analysis and results [3] on the cloze-style machine comprehension tasks have suggested some simple models without multiturn reasoning can achieve reasonable performance. Based on these results, we construct a synthetic structured Graph Reachability dataset8 to evaluate longer range machine inference and reasoning capability, since we anticipate ReasoNets to have the capability to handle long range relationships.\nWe generate two synthetic datasets: a small graph dataset and a large graph dataset. In the small graph dataset, it contains 500K small graphs, where each graph contains 9 nodes and 16 direct\n7Results shown here re ect the SQuAD leaderboard (stanford-qa.com) as of 17 Feb 2017, 9pm PST. We include the reference in the camera-ready version. \u03b1 : Fudan University. 8The dataset is available at https://github.com/MSRDL/graph_reachability_dataset\nedges to randomly connect pairs of nodes. The large graph dataset contains 500K graphs, where each graph contains 18 nodes and 32 random direct edges. Duplicated edges are removed. Table 3 shows the graph reachability statistics on the two datasets.\nIn Table 4, we show examples of a small graph and a large graph in the synthetic dataset. Both graph and query are represented by a sequence of symbols. The details settings of the ReasoNet are listed as follows in the reachability tasks.\nEmbedding Layer We use a 100-dimensional embedding vector for each symbol in the query and graph description.\nBi-LSTM Encoder: We apply a bidirectional-LSTM layer with 128 and 256 cells on query embeddings in the small and large graph datasets, respectively. The last states of bidirectional-LSTM on query are concatenated to be the initial internal state s1 = [\u2212\u2192q |q | ,\u2190\u2212q 1] in the ReasoNet.\nMemory: We apply another bidirectional-LSTM layer with 128 and 256 cells on graph description embeddings in the small and large graph datasets, respectively. It maps each symbol \u0434i to a contextual representation given by the concatenation of forward and backward LSTM hidden statesmi = [\u2212\u2192\u0434 i ,\u2190\u2212\u0434 |\u0434 |\u2212i+1].\nInternal State Controller: We use a GRU model with 128- dimensional and 256-dimensional hidden units as the internal state controller for the small and large graph datasets, respectively. The initial state of the GRU controller is s1.\nAnswer Module: The nal answer is either \u201cYes\u201d or \u201cNo\u201d and hence logistical regression is used as the answer module: at = \u03c3 (Wast + ba ); \u03b8a = (Wa ,ba ).\nTermination Module: We use the same termination module as in the CNN and Daily Mail experiments.\nOther Details: The maximum reasoning step Tmax is set to 15 and 25 for the small graph and large graph dataset, respectively. We use AdaDelta optimizer [35] for parameter optimization with an initial learning rate of 0.5 and a batch size of 32.\nWe denote \u201cReasoNet\u201d as the standard ReasoNet with termination gate, as described in Section 3.1. To study the e ectiveness of the termination gate in ReasoNets, we remove the termination gate and use the prediction from the last state, a\u0302 = aTmax (Tmax is the maximum reasoning step), denoted as \u201cReasoNet-Last\u201d. To study the e ectiveness of multi-turn reasoning, we choose \u201cReasoNet-Tmax = 2\u201d, which only has single-turn reasoning. We compare ReasoNets with a two layer deep LSTM model [7] with 128 hidden units, denoted as \u201cDeep LSTM Reader\u201d, as a baseline. Table 5 shows the performance of these models on the graph reachability dataset. Deep LSTM Reader achieves 90.92% and 71.55% accuracy in the small and large graph dataset, respectively, which indicates the graph reachibility task is not trivial. The results of ReasoNet-Tmax = 2 are comparable with the results of Deep LSTM Reader, since both Deep LSTM Reader and ReasoNet-Tmax = 2 perform single-turn reasoning. The ReasoNet-Last model achieves 100% accuracy on the small graph dataset, while the ReasoNet-Last model achieves\nonly 78.95% accuracy on the large graph dataset, as the task becomes more challenging. Meanwhile, the ReasoNet model converges faster than the ReasoNet-Last model. The ReasoNet model converges in 20 epochs in the small graph dataset, and 40 epochs in the large graph dataset, while the ReasoNet-Last model converges around 40 epochs in the small graph dataset, and 70 epochs in the large graph dataset. The results suggest that the termination gate variable in the ReasoNet is helpful when training with sophisticated examples, and makes models converge faster. Both the ReasoNet and ReasoNet-Last models perform better than the ReasoNet-Tmax = 2 model, which demonstrates the importance of the multi-turn reasoning.\nTo further understand the inference process in ReasoNets, Figures 4 and 5 show test examples of the large graph dataset. In Figure 4, we can observe that the model does not make a rm prediction till step 9. The highest attention word at each step shows the reasoning process of the model. Interestingly, the model starts from the end node (17), traverses backward till nding the starting node (10) in step 9, and makes a rm termination prediction. On the other hand, in Figure 5, the model learns to stop in step 2. In step 1, the model looks for neighbor nodes (12, 6, 16) to 4 and 9. Then, the model gives up in step 2 and predict \u201cNo\". All of these demonstrate the dynamic termination characteristic and potential reasoning capability of ReasoNets.\nTo better grasp when ReasoNets stop reasoning, we show the distribution of termination steps in ReasoNets on the test set. The termination step is chosen with the maximum termination probability p(k) = tk \u220fk\u22121 i=1 (1 \u2212 ti ), where ti is the termination probability at step i . Figure 6 shows the termination step distribution of ReasoNets in the graph reachability dataset. The distributions spread out across di erent steps. Around 16% and 35% of the instances terminate in the last step for the small and large graph, respectively. We study the correlation between the termination steps and the complexity of test instances in Figure 7. Given the query, we use the Breadth-First Search (BFS) algorithm over the target graph to analyze the complexity of test instances. For example, BFS-Step\n= 2 indicates that there are two intermediate nodes in the shortest reachability path. Test instances with larger BFS-Steps are more challenging. We denote BFS-Step = \u22121 as there is no reachable path for the given query. Figure 7 shows that test instances with larger BFS-Steps require more reasoning steps."
        },
        {
            "heading": "5 CONCLUSION",
            "text": "In this paper, we propose ReasoNets that dynamically decide whether to continue or to terminate the inference process in machine comprehension tasks. With the use of the instance-dependent baseline method, our proposed model achieves superior results in machine comprehension datasets, including unstructured CNN and Daily Mail datasets, the Stanford SQuAD dataset, and a proposed structured Graph Reachability dataset."
        },
        {
            "heading": "6 ACKNOWLEDGMENTS",
            "text": "We thank Ming-Wei Chang, Li Deng, Lihong Li, and Xiaodong Liu for their thoughtful feedback and discussions."
        }
    ],
    "title": "ReasoNet: Learning to Stop Reading in Machine Comprehension",
    "year": 2017
}