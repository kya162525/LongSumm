{
    "abstractText": "We present a method for detecting objects in images using a single deep neural network. Our approach, named SSD, discretizes the output space of bounding boxes into a set of default boxes over different aspect ratios and scales per feature map location. At prediction time, the network generates scores for the presence of each object category in each default box and produces adjustments to the box to better match the object shape. Additionally, the network combines predictions from multiple feature maps with different resolutions to naturally handle objects of various sizes. SSD is simple relative to methods that require object proposals because it completely eliminates proposal generation and subsequent pixel or feature resampling stages and encapsulates all computation in a single network. This makes SSD easy to train and straightforward to integrate into systems that require a detection component. Experimental results on the PASCAL VOC, COCO, and ILSVRC datasets confirm that SSD has competitive accuracy to methods that utilize an additional object proposal step and is much faster, while providing a unified framework for both training and inference. For 300\u00d7 300 input, SSD achieves 74.3% mAP on VOC2007 test at 59 FPS on a Nvidia Titan X and for 512 \u00d7 512 input, SSD achieves 76.9% mAP, outperforming a comparable state-of-the-art Faster R-CNN model. Compared to other single stage methods, SSD has much better accuracy even with a smaller input image size. Code is available at: https://github.com/weiliu89/caffe/tree/ssd .",
    "authors": [
        {
            "affiliations": [],
            "name": "Wei Liu"
        },
        {
            "affiliations": [],
            "name": "Dragomir Anguelov"
        },
        {
            "affiliations": [],
            "name": "Dumitru Erhan"
        },
        {
            "affiliations": [],
            "name": "Christian Szegedy"
        },
        {
            "affiliations": [],
            "name": "Scott Reed"
        },
        {
            "affiliations": [],
            "name": "Cheng-Yang Fu"
        },
        {
            "affiliations": [],
            "name": "Alexander C. Berg"
        }
    ],
    "id": "SP:20a78d3145279dcd799cd7a856ae2714f4863a16",
    "references": [
        {
            "authors": [
                "J.R. Uijlings",
                "K.E. van de Sande",
                "T. Gevers",
                "A.W. Smeulders"
            ],
            "title": "Selective search for object recognition",
            "venue": "IJCV",
            "year": 2013
        },
        {
            "authors": [
                "S. Ren",
                "K. He",
                "R. Girshick",
                "J. Sun"
            ],
            "title": "Faster R-CNN: Towards real-time object detection with region proposal networks",
            "venue": "NIPS.",
            "year": 2015
        },
        {
            "authors": [
                "K. He",
                "X. Zhang",
                "S. Ren",
                "J. Sun"
            ],
            "title": "Deep residual learning for image recognition",
            "venue": "CVPR.",
            "year": 2016
        },
        {
            "authors": [
                "P. Sermanet",
                "D. Eigen",
                "X. Zhang",
                "M. Mathieu",
                "R. Fergus",
                "Y. LeCun"
            ],
            "title": "Overfeat: Integrated recognition, localization and detection using convolutional networks",
            "venue": "ICLR.",
            "year": 2014
        },
        {
            "authors": [
                "J. Redmon",
                "S. Divvala",
                "R. Girshick",
                "A. Farhadi"
            ],
            "title": "You only look once: Unified, real-time object detection",
            "venue": "CVPR.",
            "year": 2016
        },
        {
            "authors": [
                "R. Girshick"
            ],
            "title": "Fast R-CNN",
            "venue": "ICCV.",
            "year": 2015
        },
        {
            "authors": [
                "D. Erhan",
                "C. Szegedy",
                "A. Toshev",
                "D. Anguelov"
            ],
            "title": "Scalable object detection using deep neural networks",
            "venue": "CVPR.",
            "year": 2014
        },
        {
            "authors": [
                "C. Szegedy",
                "S. Reed",
                "D. Erhan",
                "D. Anguelov"
            ],
            "title": "Scalable, high-quality object detection",
            "venue": "arXiv preprint arXiv:1412.1441 v3",
            "year": 2015
        },
        {
            "authors": [
                "K. He",
                "X. Zhang",
                "S. Ren",
                "J. Sun"
            ],
            "title": "Spatial pyramid pooling in deep convolutional networks for visual recognition",
            "venue": "ECCV.",
            "year": 2014
        },
        {
            "authors": [
                "J. Long",
                "E. Shelhamer",
                "T. Darrell"
            ],
            "title": "Fully convolutional networks for semantic segmentation",
            "venue": "CVPR.",
            "year": 2015
        },
        {
            "authors": [
                "B. Hariharan",
                "P. Arbel\u00e1ez",
                "R. Girshick",
                "J. Malik"
            ],
            "title": "Hypercolumns for object segmentation and fine-grained localization",
            "venue": "CVPR.",
            "year": 2015
        },
        {
            "authors": [
                "W. Liu",
                "A. Rabinovich",
                "A.C. Berg"
            ],
            "title": "ParseNet: Looking wider to see better",
            "venue": "ILCR.",
            "year": 2016
        },
        {
            "authors": [
                "B. Zhou",
                "A. Khosla",
                "A. Lapedriza",
                "A. Oliva",
                "A. Torralba"
            ],
            "title": "Object detectors emerge in deep scene cnns",
            "venue": "ICLR.",
            "year": 2015
        },
        {
            "authors": [
                "A.G. Howard"
            ],
            "title": "Some improvements on deep convolutional neural network based image classification",
            "venue": "arXiv preprint arXiv:1312.5402",
            "year": 2013
        },
        {
            "authors": [
                "K. Simonyan",
                "A. Zisserman"
            ],
            "title": "Very deep convolutional networks for large-scale image recognition",
            "venue": "NIPS.",
            "year": 2015
        },
        {
            "authors": [
                "O. Russakovsky",
                "J. Deng",
                "H. Su",
                "J. Krause",
                "S. Satheesh",
                "S. Ma",
                "Z. Huang",
                "A. Karpathy",
                "A. Khosla",
                "M. Bernstein",
                "A.C. Berg",
                "L. Fei-Fei"
            ],
            "title": "Imagenet large scale visual recognition challenge",
            "venue": "IJCV",
            "year": 2015
        },
        {
            "authors": [
                "L.C. Chen",
                "G. Papandreou",
                "I. Kokkinos",
                "K. Murphy",
                "A.L. Yuille"
            ],
            "title": "Semantic image segmentation with deep convolutional nets and fully connected crfs",
            "venue": "ICLR.",
            "year": 2015
        },
        {
            "authors": [
                "M. Holschneider",
                "R. Kronland-Martinet",
                "J. Morlet",
                "P. Tchamitchian"
            ],
            "title": "A real-time algorithm for signal analysis with the help of the wavelet transform",
            "venue": "Wavelets. Springer",
            "year": 1990
        },
        {
            "authors": [
                "Y. Jia",
                "E. Shelhamer",
                "J. Donahue",
                "S. Karayev",
                "J. Long",
                "R. Girshick",
                "S. Guadarrama",
                "T. Darrell"
            ],
            "title": "Caffe: Convolutional architecture for fast feature embedding",
            "venue": "MM.",
            "year": 2014
        },
        {
            "authors": [
                "X. Glorot",
                "Y. Bengio"
            ],
            "title": "Understanding the difficulty of training deep feedforward neural networks",
            "venue": "AISTATS.",
            "year": 2010
        },
        {
            "authors": [
                "D. Hoiem",
                "Y. Chodpathumwan",
                "Q. Dai"
            ],
            "title": "Diagnosing error in object detectors",
            "venue": "ECCV 2012.",
            "year": 2012
        },
        {
            "authors": [
                "R. Girshick",
                "J. Donahue",
                "T. Darrell",
                "J. Malik"
            ],
            "title": "Rich feature hierarchies for accurate object detection and semantic segmentation",
            "venue": "CVPR.",
            "year": 2014
        },
        {
            "authors": [
                "L. Zhang",
                "L. Lin",
                "X. Liang",
                "K. He"
            ],
            "title": "Is faster r-cnn doing well for pedestrian detection",
            "venue": "ECCV.",
            "year": 2016
        },
        {
            "authors": [
                "S. Bell",
                "C.L. Zitnick",
                "K. Bala",
                "R. Girshick"
            ],
            "title": "Inside-outside net: Detecting objects in context with skip pooling and recurrent neural networks",
            "venue": "CVPR.",
            "year": 2016
        },
        {
            "authors": [
                "COCO"
            ],
            "title": "Common Objects in Context",
            "venue": "http://mscoco.org/dataset/ #detections-leaderboard",
            "year": 2016
        },
        {
            "authors": [
                "P. Felzenszwalb",
                "D. McAllester",
                "D. Ramanan"
            ],
            "title": "A discriminatively trained, multiscale, deformable part model",
            "venue": "CVPR.",
            "year": 2008
        }
    ],
    "sections": [
        {
            "text": "Keywords: Real-time Object Detection; Convolutional Neural Network"
        },
        {
            "heading": "1 Introduction",
            "text": "Current state-of-the-art object detection systems are variants of the following approach: hypothesize bounding boxes, resample pixels or features for each box, and apply a highquality classifier. This pipeline has prevailed on detection benchmarks since the Selective Search work [1] through the current leading results on PASCAL VOC, COCO, and ILSVRC detection all based on Faster R-CNN[2] albeit with deeper features such as [3]. While accurate, these approaches have been too computationally intensive for embedded systems and, even with high-end hardware, too slow for real-time applications.\n1 We achieved even better results using an improved data augmentation scheme in follow-on experiments: 77.2% mAP for 300\u00d7300 input and 79.8% mAP for 512\u00d7512 input on VOC2007. Please see Sec. 3.6 for details.\nar X\niv :1\n51 2.\n02 32\n5v 5\n[ cs\n.C V\nOften detection speed for these approaches is measured in seconds per frame (SPF), and even the fastest high-accuracy detector, Faster R-CNN, operates at only 7 frames per second (FPS). There have been many attempts to build faster detectors by attacking each stage of the detection pipeline (see related work in Sec. 4), but so far, significantly increased speed comes only at the cost of significantly decreased detection accuracy.\nThis paper presents the first deep network based object detector that does not resample pixels or features for bounding box hypotheses and and is as accurate as approaches that do. This results in a significant improvement in speed for high-accuracy detection (59 FPS with mAP 74.3% on VOC2007 test, vs. Faster R-CNN 7 FPS with mAP 73.2% or YOLO 45 FPS with mAP 63.4%). The fundamental improvement in speed comes from eliminating bounding box proposals and the subsequent pixel or feature resampling stage. We are not the first to do this (cf [4,5]), but by adding a series of improvements, we manage to increase the accuracy significantly over previous attempts. Our improvements include using a small convolutional filter to predict object categories and offsets in bounding box locations, using separate predictors (filters) for different aspect ratio detections, and applying these filters to multiple feature maps from the later stages of a network in order to perform detection at multiple scales. With these modifications\u2014especially using multiple layers for prediction at different scales\u2014we can achieve high-accuracy using relatively low resolution input, further increasing detection speed. While these contributions may seem small independently, we note that the resulting system improves accuracy on real-time detection for PASCAL VOC from 63.4% mAP for YOLO to 74.3% mAP for our SSD. This is a larger relative improvement in detection accuracy than that from the recent, very high-profile work on residual networks [3]. Furthermore, significantly improving the speed of high-quality detection can broaden the range of settings where computer vision is useful.\nWe summarize our contributions as follows:\n\u2013 We introduce SSD, a single-shot detector for multiple categories that is faster than the previous state-of-the-art for single shot detectors (YOLO), and significantly more accurate, in fact as accurate as slower techniques that perform explicit region proposals and pooling (including Faster R-CNN). \u2013 The core of SSD is predicting category scores and box offsets for a fixed set of default bounding boxes using small convolutional filters applied to feature maps. \u2013 To achieve high detection accuracy we produce predictions of different scales from feature maps of different scales, and explicitly separate predictions by aspect ratio. \u2013 These design features lead to simple end-to-end training and high accuracy, even on low resolution input images, further improving the speed vs accuracy trade-off. \u2013 Experiments include timing and accuracy analysis on models with varying input size evaluated on PASCAL VOC, COCO, and ILSVRC and are compared to a range of recent state-of-the-art approaches."
        },
        {
            "heading": "2 The Single Shot Detector (SSD)",
            "text": "This section describes our proposed SSD framework for detection (Sec. 2.1) and the associated training methodology (Sec. 2.2). Afterwards, Sec. 3 presents dataset-specific model details and experimental results."
        },
        {
            "heading": "2.1 Model",
            "text": "The SSD approach is based on a feed-forward convolutional network that produces a fixed-size collection of bounding boxes and scores for the presence of object class instances in those boxes, followed by a non-maximum suppression step to produce the final detections. The early network layers are based on a standard architecture used for high quality image classification (truncated before any classification layers), which we will call the base network2. We then add auxiliary structure to the network to produce detections with the following key features:\nMulti-scale feature maps for detection We add convolutional feature layers to the end of the truncated base network. These layers decrease in size progressively and allow predictions of detections at multiple scales. The convolutional model for predicting detections is different for each feature layer (cf Overfeat[4] and YOLO[5] that operate on a single scale feature map).\nConvolutional predictors for detection Each added feature layer (or optionally an existing feature layer from the base network) can produce a fixed set of detection predictions using a set of convolutional filters. These are indicated on top of the SSD network architecture in Fig. 2. For a feature layer of size m \u00d7 n with p channels, the basic element for predicting parameters of a potential detection is a 3 \u00d7 3 \u00d7 p small kernel that produces either a score for a category, or a shape offset relative to the default box coordinates. At each of the m\u00d7 n locations where the kernel is applied, it produces an output value. The bounding box offset output values are measured relative to a default\n2 We use the VGG-16 network as a base, but other networks should also produce good results.\nbox position relative to each feature map location (cf the architecture of YOLO[5] that uses an intermediate fully connected layer instead of a convolutional filter for this step). Default boxes and aspect ratios We associate a set of default bounding boxes with each feature map cell, for multiple feature maps at the top of the network. The default boxes tile the feature map in a convolutional manner, so that the position of each box relative to its corresponding cell is fixed. At each feature map cell, we predict the offsets relative to the default box shapes in the cell, as well as the per-class scores that indicate the presence of a class instance in each of those boxes. Specifically, for each box out of k at a given location, we compute c class scores and the 4 offsets relative to the original default box shape. This results in a total of (c+ 4)k filters that are applied around each location in the feature map, yielding (c+ 4)kmn outputs for a m\u00d7 n feature map. For an illustration of default boxes, please refer to Fig. 1. Our default boxes are similar to the anchor boxes used in Faster R-CNN [2], however we apply them to several feature maps of different resolutions. Allowing different default box shapes in several feature maps let us efficiently discretize the space of possible output box shapes."
        },
        {
            "heading": "2.2 Training",
            "text": "The key difference between training SSD and training a typical detector that uses region proposals, is that ground truth information needs to be assigned to specific outputs in the fixed set of detector outputs. Some version of this is also required for training in YOLO[5] and for the region proposal stage of Faster R-CNN[2] and MultiBox[7]. Once this assignment is determined, the loss function and back propagation are applied endto-end. Training also involves choosing the set of default boxes and scales for detection as well as the hard negative mining and data augmentation strategies.\nMatching strategy During training we need to determine which default boxes correspond to a ground truth detection and train the network accordingly. For each ground truth box we are selecting from default boxes that vary over location, aspect ratio, and scale. We begin by matching each ground truth box to the default box with the best jaccard overlap (as in MultiBox [7]). Unlike MultiBox, we then match default boxes to any ground truth with jaccard overlap higher than a threshold (0.5). This simplifies the learning problem, allowing the network to predict high scores for multiple overlapping default boxes rather than requiring it to pick only the one with maximum overlap.\nTraining objective The SSD training objective is derived from the MultiBox objective [7,8] but is extended to handle multiple object categories. Let xpij = {1, 0} be an indicator for matching the i-th default box to the j-th ground truth box of category p. In the matching strategy above, we can have \u2211 i x p ij \u2265 1. The overall objective loss function is a weighted sum of the localization loss (loc) and the confidence loss (conf):\nL(x, c, l, g) = 1\nN (Lconf (x, c) + \u03b1Lloc(x, l, g)) (1)\nwhere N is the number of matched default boxes. If N = 0, wet set the loss to 0. The localization loss is a Smooth L1 loss [6] between the predicted box (l) and the ground truth box (g) parameters. Similar to Faster R-CNN [2], we regress to offsets for the center (cx, cy) of the default bounding box (d) and for its width (w) and height (h).\nLloc(x, l, g) = N\u2211 i\u2208Pos \u2211 m\u2208{cx,cy,w,h} xkijsmoothL1(l m i \u2212 g\u0302mj )\ng\u0302cxj = (g cx j \u2212 dcxi )/dwi g\u0302cyj = (gcyj \u2212 dcyi )/dhi\ng\u0302wj = log (gwj dwi ) g\u0302hj = log (ghj dhi ) (2)\nThe confidence loss is the softmax loss over multiple classes confidences (c).\nLconf (x, c) = \u2212 N\u2211\ni\u2208Pos xpij log(c\u0302 p i )\u2212 \u2211 i\u2208Neg log(c\u03020i ) where c\u0302 p i = exp(cpi )\u2211 p exp(c p i ) (3)\nand the weight term \u03b1 is set to 1 by cross validation.\nChoosing scales and aspect ratios for default boxes To handle different object scales, some methods [4,9] suggest processing the image at different sizes and combining the results afterwards. However, by utilizing feature maps from several different layers in a single network for prediction we can mimic the same effect, while also sharing parameters across all object scales. Previous works [10,11] have shown that using feature maps from the lower layers can improve semantic segmentation quality because the lower layers capture more fine details of the input objects. Similarly, [12] showed that adding global context pooled from a feature map can help smooth the segmentation results.\nMotivated by these methods, we use both the lower and upper feature maps for detection. Figure 1 shows two exemplar feature maps (8\u00d7 8 and 4\u00d7 4) which are used in the framework. In practice, we can use many more with small computational overhead.\nFeature maps from different levels within a network are known to have different (empirical) receptive field sizes [13]. Fortunately, within the SSD framework, the default boxes do not necessary need to correspond to the actual receptive fields of each layer. We design the tiling of default boxes so that specific feature maps learn to be responsive to particular scales of the objects. Suppose we want to use m feature maps for prediction. The scale of the default boxes for each feature map is computed as:\nsk = smin + smax \u2212 smin m\u2212 1 (k \u2212 1), k \u2208 [1,m] (4)\nwhere smin is 0.2 and smax is 0.9, meaning the lowest layer has a scale of 0.2 and the highest layer has a scale of 0.9, and all layers in between are regularly spaced. We impose different aspect ratios for the default boxes, and denote them as ar \u2208 {1, 2, 3, 12 , 13}. We can compute the width (wak = sk \u221a ar) and height (hak = sk/ \u221a ar) for each default box. For the aspect ratio of 1, we also add a default box whose scale is s\u2032k = \u221a sksk+1, resulting in 6 default boxes per feature map location. We set the center of each default box to ( i+0.5|fk| , j+0.5 |fk| ), where |fk| is the size of the k-th square feature map, i, j \u2208 [0, |fk|). In practice, one can also design a distribution of default boxes to best fit a specific dataset. How to design the optimal tiling is an open question as well.\nBy combining predictions for all default boxes with different scales and aspect ratios from all locations of many feature maps, we have a diverse set of predictions, covering various input object sizes and shapes. For example, in Fig. 1, the dog is matched to a default box in the 4 \u00d7 4 feature map, but not to any default boxes in the 8 \u00d7 8 feature map. This is because those boxes have different scales and do not match the dog box, and therefore are considered as negatives during training.\nHard negative mining After the matching step, most of the default boxes are negatives, especially when the number of possible default boxes is large. This introduces a significant imbalance between the positive and negative training examples. Instead of using all the negative examples, we sort them using the highest confidence loss for each default box and pick the top ones so that the ratio between the negatives and positives is at most 3:1. We found that this leads to faster optimization and a more stable training.\nData augmentation To make the model more robust to various input object sizes and shapes, each training image is randomly sampled by one of the following options:\n\u2013 Use the entire original input image. \u2013 Sample a patch so that the minimum jaccard overlap with the objects is 0.1, 0.3,\n0.5, 0.7, or 0.9. \u2013 Randomly sample a patch.\nThe size of each sampled patch is [0.1, 1] of the original image size, and the aspect ratio is between 12 and 2. We keep the overlapped part of the ground truth box if the center of it is in the sampled patch. After the aforementioned sampling step, each sampled patch is resized to fixed size and is horizontally flipped with probability of 0.5, in addition to applying some photo-metric distortions similar to those described in [14]."
        },
        {
            "heading": "3 Experimental Results",
            "text": "Base network Our experiments are all based on VGG16 [15], which is pre-trained on the ILSVRC CLS-LOC dataset [16]. Similar to DeepLab-LargeFOV [17], we convert fc6 and fc7 to convolutional layers, subsample parameters from fc6 and fc7, change pool5 from 2 \u00d7 2 \u2212 s2 to 3 \u00d7 3 \u2212 s1, and use the a\u0300 trous algorithm [18] to fill the \u201dholes\u201d. We remove all the dropout layers and the fc8 layer. We fine-tune the resulting model using SGD with initial learning rate 10\u22123, 0.9 momentum, 0.0005 weight decay, and batch size 32. The learning rate decay policy is slightly different for each dataset, and we will describe details later. The full training and testing code is built on Caffe [19] and is open source at: https://github.com/weiliu89/caffe/tree/ssd ."
        },
        {
            "heading": "3.1 PASCAL VOC2007",
            "text": "On this dataset, we compare against Fast R-CNN [6] and Faster R-CNN [2] on VOC2007 test (4952 images). All methods fine-tune on the same pre-trained VGG16 network.\nFigure 2 shows the architecture details of the SSD300 model. We use conv4 3, conv7 (fc7), conv8 2, conv9 2, conv10 2, and conv11 2 to predict both location and confidences. We set default box with scale 0.1 on conv4 33. We initialize the parameters for all the newly added convolutional layers with the \u201dxavier\u201d method [20]. For conv4 3, conv10 2 and conv11 2, we only associate 4 default boxes at each feature map location \u2013 omitting aspect ratios of 13 and 3. For all other layers, we put 6 default boxes as described in Sec. 2.2. Since, as pointed out in [12], conv4 3 has a different feature scale compared to the other layers, we use the L2 normalization technique introduced in [12] to scale the feature norm at each location in the feature map to 20 and learn the scale during back propagation. We use the 10\u22123 learning rate for 40k iterations, then continue training for 10k iterations with 10\u22124 and 10\u22125. When training on VOC2007 trainval, Table 1 shows that our low resolution SSD300 model is already more accurate than Fast R-CNN. When we train SSD on a larger 512\u00d7 512 input image, it is even more accurate, surpassing Faster R-CNN by 1.7% mAP. If we train SSD with more (i.e. 07+12) data, we see that SSD300 is already better than Faster R-CNN by 1.1% and that SSD512 is 3.6% better. If we take models trained on COCO trainval35k as described in Sec. 3.4 and fine-tuning them on the 07+12 dataset with SSD512, we achieve the best results: 81.6% mAP.\nTo understand the performance of our two SSD models in more details, we used the detection analysis tool from [21]. Figure 3 shows that SSD can detect various object categories with high quality (large white area). The majority of its confident detections are correct. The recall is around 85-90%, and is much higher with \u201cweak\u201d (0.1 jaccard overlap) criteria. Compared to R-CNN [22], SSD has less localization error, indicating that SSD can localize objects better because it directly learns to regress the object shape and classify object categories instead of using two decoupled steps. However, SSD has more confusions with similar object categories (especially for animals), partly because we share locations for multiple categories. Figure 4 shows that SSD is very sensitive to the bounding box size. In other words, it has much worse performance on smaller\n3 For SSD512 model, we add extra conv12 2 for prediction, set smin to 0.15, and 0.07 on conv4 3.\nobjects than bigger objects. This is not surprising because those small objects may not even have any information at the very top layers. Increasing the input size (e.g. from 300\u00d7300 to 512\u00d7512) can help improve detecting small objects, but there is still a lot of room to improve. On the positive side, we can clearly see that SSD performs really well on large objects. And it is very robust to different object aspect ratios because we use default boxes of various aspect ratios per feature map location."
        },
        {
            "heading": "3.2 Model analysis",
            "text": "To understand SSD better, we carried out controlled experiments to examine how each component affects performance. For all the experiments, we use the same settings and input size (300\u00d7 300), except for specified changes to the settings or component(s).\nData augmentation is crucial. Fast and Faster R-CNN use the original image and the horizontal flip to train. We use a more extensive sampling strategy, similar to YOLO [5]. Table 2 shows that we can improve 8.8% mAP with this sampling strategy. We do not know how much our sampling strategy will benefit Fast and Faster R-CNN, but they are likely to benefit less because they use a feature pooling step during classification that is relatively robust to object translation by design.\nMore default box shapes is better. As described in Sec. 2.2, by default we use 6 default boxes per location. If we remove the boxes with 13 and 3 aspect ratios, the performance drops by 0.6%. By further removing the boxes with 12 and 2 aspect ratios, the performance drops another 2.1%. Using a variety of default box shapes seems to make the task of predicting boxes easier for the network.\nAtrous is faster. As described in Sec. 3, we used the atrous version of a subsampled VGG16, following DeepLab-LargeFOV [17]. If we use the full VGG16, keeping pool5 with 2\u00d7 2\u2212 s2 and not subsampling parameters from fc6 and fc7, and add conv5 3 for prediction, the result is about the same while the speed is about 20% slower.\nMultiple output layers at different resolutions is better. A major contribution of SSD is using default boxes of different scales on different output layers. To measure the advantage gained, we progressively remove layers and compare results. For a fair comparison, every time we remove a layer, we adjust the default box tiling to keep the total number of boxes similar to the original (8732). This is done by stacking more scales of boxes on remaining layers and adjusting scales of boxes if needed. We do not exhaustively optimize the tiling for each setting. Table 3 shows a decrease in accuracy with fewer layers, dropping monotonically from 74.3 to 62.4. When we stack boxes of multiple scales on a layer, many are on the image boundary and need to be handled carefully. We tried the strategy used in Faster R-CNN [2], ignoring boxes which are on the boundary. We observe some interesting trends. For example, it hurts the performance by a large margin if we use very coarse feature maps (e.g. conv11 2 (1 \u00d7 1) or conv10 2 (3 \u00d7 3)). The reason might be that we do not have enough large boxes to cover large objects after the pruning. When we use primarily finer resolution maps, the performance starts increasing again because even after pruning a sufficient number of large boxes remains. If we only use conv7 for prediction, the performance is the worst, reinforcing the message that it is critical to spread boxes of different scales over different layers. Besides, since our predictions do not rely on ROI pooling as in [6], we do not have the collapsing bins problem in low-resolution feature maps [23]. The SSD architecture combines predictions from feature maps of various resolutions to achieve comparable accuracy to Faster R-CNN, while using lower resolution input images."
        },
        {
            "heading": "3.3 PASCAL VOC2012",
            "text": "We use the same settings as those used for our basic VOC2007 experiments above, except that we use VOC2012 trainval and VOC2007 trainval and test (21503 images) for training, and test on VOC2012 test (10991 images). We train the models with 10\u22123 learning rate for 60k iterations, then 10\u22124 for 20k iterations. Table 4 shows the results of our SSD300 and SSD5124 model. We see the same performance trend as we observed on VOC2007 test. Our SSD300 improves accuracy over Fast/Faster RCNN. By increasing the training and testing image size to 512\u00d7512, we are 4.5% more accurate than Faster R-CNN. Compared to YOLO, SSD is significantly more accurate, likely due to the use of convolutional default boxes from multiple feature maps and our matching strategy during training. When fine-tuned from models trained on COCO, our SSD512 achieves 80.0% mAP, which is 4.1% higher than Faster R-CNN."
        },
        {
            "heading": "3.4 COCO",
            "text": "To further validate the SSD framework, we trained our SSD300 and SSD512 architectures on the COCO dataset. Since objects in COCO tend to be smaller than PASCAL VOC, we use smaller default boxes for all layers. We follow the strategy mentioned in Sec. 2.2, but now our smallest default box has a scale of 0.15 instead of 0.2, and the scale of the default box on conv4 3 is 0.07 (e.g. 21 pixels for a 300\u00d7 300 image)5.\nWe use the trainval35k [24] for training. We first train the model with 10\u22123 learning rate for 160k iterations, and then continue training for 40k iterations with 10\u22124 and 40k iterations with 10\u22125. Table 5 shows the results on test-dev2015. Similar to what we observed on the PASCAL VOC dataset, SSD300 is better than Fast R-CNN in both mAP@0.5 and mAP@[0.5:0.95]. SSD300 has a similar mAP@0.75 as ION [24] and Faster R-CNN [25], but is worse in mAP@0.5. By increasing the image size to 512 \u00d7 512, our SSD512 is better than Faster R-CNN [25] in both criteria. Interestingly, we observe that SSD512 is 5.3% better in mAP@0.75, but is only 1.2% better in mAP@0.5. We also observe that it has much better AP (4.8%) and AR (4.6%) for large objects, but has relatively less improvement in AP (1.3%) and AR (2.0%) for\n4 http://host.robots.ox.ac.uk:8080/leaderboard/displaylb.php?cls=mean&challengeid=11&compid=4 5 For SSD512 model, we add extra conv12 2 for prediction, set smin to 0.1, and 0.04 on conv4 3.\nsmall objects. Compared to ION, the improvement in AR for large and small objects is more similar (5.4% vs. 3.9%). We conjecture that Faster R-CNN is more competitive on smaller objects with SSD because it performs two box refinement steps, in both the RPN part and in the Fast R-CNN part. In Fig. 5, we show some detection examples on COCO test-dev with the SSD512 model."
        },
        {
            "heading": "3.5 Preliminary ILSVRC results",
            "text": "We applied the same network architecture we used for COCO to the ILSVRC DET dataset [16]. We train a SSD300 model using the ILSVRC2014 DET train and val1 as used in [22]. We first train the model with 10\u22123 learning rate for 320k iterations, and then continue training for 80k iterations with 10\u22124 and 40k iterations with 10\u22125. We can achieve 43.4 mAP on the val2 set [22]. Again, it validates that SSD is a general framework for high quality real-time detection."
        },
        {
            "heading": "3.6 Data Augmentation for Small Object Accuracy",
            "text": "Without a follow-up feature resampling step as in Faster R-CNN, the classification task for small objects is relatively hard for SSD, as demonstrated in our analysis (see Fig. 4). The data augmentation strategy described in Sec. 2.2 helps to improve the performance dramatically, especially on small datasets such as PASCAL VOC. The random crops generated by the strategy can be thought of as a \u201dzoom in\u201d operation and can generate many larger training examples. To implement a \u201dzoom out\u201d operation that creates more small training examples, we first randomly place an image on a canvas of 16\u00d7 of the original image size filled with mean values before we do any random crop operation. Because we have more training images by introducing this new \u201dexpansion\u201d data augmentation trick, we have to double the training iterations. We have seen a consistent increase of 2%-3% mAP across multiple datasets, as shown in Table 6. In specific, Figure 6 shows that the new augmentation trick significantly improves the performance on small objects. This result underscores the importance of the data augmentation strategy for the final model accuracy.\nAn alternative way of improving SSD is to design a better tiling of default boxes so that its position and scale are better aligned with the receptive field of each position on a feature map. We leave this for future work."
        },
        {
            "heading": "3.7 Inference time",
            "text": "Considering the large number of boxes generated from our method, it is essential to perform non-maximum suppression (nms) efficiently during inference. By using a confidence threshold of 0.01, we can filter out most boxes. We then apply nms with jaccard overlap of 0.45 per class and keep the top 200 detections per image. This step costs about 1.7 msec per image for SSD300 and 20 VOC classes, which is close to the total time (2.4 msec) spent on all newly added layers. We measure the speed with batch size 8 using Titan X and cuDNN v4 with Intel Xeon E5-2667v3@3.20GHz.\nTable 7 shows the comparison between SSD, Faster R-CNN[2], and YOLO[5]. Both our SSD300 and SSD512 method outperforms Faster R-CNN in both speed and accuracy. Although Fast YOLO[5] can run at 155 FPS, it has lower accuracy by almost 22% mAP. To the best of our knowledge, SSD300 is the first real-time method to achieve above 70% mAP. Note that about 80% of the forward time is spent on the base network (VGG16 in our case). Therefore, using a faster base network could even further improve the speed, which can possibly make the SSD512 model real-time as well."
        },
        {
            "heading": "4 Related Work",
            "text": "There are two established classes of methods for object detection in images, one based on sliding windows and the other based on region proposal classification. Before the advent of convolutional neural networks, the state of the art for those two approaches \u2013 Deformable Part Model (DPM) [26] and Selective Search [1] \u2013 had comparable performance. However, after the dramatic improvement brought on by R-CNN [22], which combines selective search region proposals and convolutional network based post-classification, region proposal object detection methods became prevalent.\nThe original R-CNN approach has been improved in a variety of ways. The first set of approaches improve the quality and speed of post-classification, since it requires\nthe classification of thousands of image crops, which is expensive and time-consuming. SPPnet [9] speeds up the original R-CNN approach significantly. It introduces a spatial pyramid pooling layer that is more robust to region size and scale and allows the classification layers to reuse features computed over feature maps generated at several image resolutions. Fast R-CNN [6] extends SPPnet so that it can fine-tune all layers end-toend by minimizing a loss for both confidences and bounding box regression, which was first introduced in MultiBox [7] for learning objectness.\nThe second set of approaches improve the quality of proposal generation using deep neural networks. In the most recent works like MultiBox [7,8], the Selective Search region proposals, which are based on low-level image features, are replaced by proposals generated directly from a separate deep neural network. This further improves the detection accuracy but results in a somewhat complex setup, requiring the training of two neural networks with a dependency between them. Faster R-CNN [2] replaces selective search proposals by ones learned from a region proposal network (RPN), and introduces a method to integrate the RPN with Fast R-CNN by alternating between finetuning shared convolutional layers and prediction layers for these two networks. This way region proposals are used to pool mid-level features and the final classification step is less expensive. Our SSD is very similar to the region proposal network (RPN) in Faster R-CNN in that we also use a fixed set of (default) boxes for prediction, similar to the anchor boxes in the RPN. But instead of using these to pool features and evaluate another classifier, we simultaneously produce a score for each object category in each box. Thus, our approach avoids the complication of merging RPN with Fast R-CNN and is easier to train, faster, and straightforward to integrate in other tasks.\nAnother set of methods, which are directly related to our approach, skip the proposal step altogether and predict bounding boxes and confidences for multiple categories directly. OverFeat [4], a deep version of the sliding window method, predicts a bounding box directly from each location of the topmost feature map after knowing the confidences of the underlying object categories. YOLO [5] uses the whole topmost feature map to predict both confidences for multiple categories and bounding boxes (which are shared for these categories). Our SSD method falls in this category because we do not have the proposal step but use the default boxes. However, our approach is more flexible than the existing methods because we can use default boxes of different aspect\nratios on each feature location from multiple feature maps at different scales. If we only use one default box per location from the topmost feature map, our SSD would have similar architecture to OverFeat [4]; if we use the whole topmost feature map and add a fully connected layer for predictions instead of our convolutional predictors, and do not explicitly consider multiple aspect ratios, we can approximately reproduce YOLO [5]."
        },
        {
            "heading": "5 Conclusions",
            "text": "This paper introduces SSD, a fast single-shot object detector for multiple categories. A key feature of our model is the use of multi-scale convolutional bounding box outputs attached to multiple feature maps at the top of the network. This representation allows us to efficiently model the space of possible box shapes. We experimentally validate that given appropriate training strategies, a larger number of carefully chosen default bounding boxes results in improved performance. We build SSD models with at least an order of magnitude more box predictions sampling location, scale, and aspect ratio, than existing methods [5,7]. We demonstrate that given the same VGG-16 base architecture, SSD compares favorably to its state-of-the-art object detector counterparts in terms of both accuracy and speed. Our SSD512 model significantly outperforms the state-of-theart Faster R-CNN [2] in terms of accuracy on PASCAL VOC and COCO, while being 3\u00d7 faster. Our real time SSD300 model runs at 59 FPS, which is faster than the current real time YOLO [5] alternative, while producing markedly superior detection accuracy.\nApart from its standalone utility, we believe that our monolithic and relatively simple SSD model provides a useful building block for larger systems that employ an object detection component. A promising future direction is to explore its use as part of a system using recurrent neural networks to detect and track objects in video simultaneously."
        },
        {
            "heading": "6 Acknowledgment",
            "text": "This work was started as an internship project at Google and continued at UNC. We would like to thank Alex Toshev for helpful discussions and are indebted to the Image Understanding and DistBelief teams at Google. We also thank Philip Ammirato and Patrick Poirson for helpful comments. We thank NVIDIA for providing GPUs and acknowledge support from NSF 1452851, 1446631, 1526367, 1533771."
        }
    ],
    "title": "SSD: Single Shot MultiBox Detector",
    "year": 2016
}