{
    "abstractText": "We identify two issues with the family of algorithms based on the Adversarial Imitation Learning framework. The first problem is implicit bias present in the reward functions used in these algorithms. While these biases might work well for some environments, they can also lead to sub-optimal behavior in others. Secondly, even though these algorithms can learn from few expert demonstrations, they require a prohibitively large number of interactions with the environment in order to imitate the expert for many real-world applications. In order to address these issues, we propose a new algorithm called Discriminator-Actor-Critic that uses off-policy Reinforcement Learning to reduce policy-environment interaction sample complexity by an average factor of 10. Furthermore, since our reward function is designed to be unbiased, we can apply our algorithm to many problems without making any task-specific adjustments.",
    "authors": [
        {
            "affiliations": [],
            "name": "IMITATION LEARNING"
        },
        {
            "affiliations": [],
            "name": "Ilya Kostrikov"
        },
        {
            "affiliations": [],
            "name": "Kumar Krishna Agrawal"
        },
        {
            "affiliations": [],
            "name": "Debidatta Dwibedi"
        },
        {
            "affiliations": [],
            "name": "Sergey Levine"
        },
        {
            "affiliations": [],
            "name": "Jonathan Tompson"
        }
    ],
    "id": "SP:1de1e749668a65cf6b88b8138389581108bb129a",
    "references": [
        {
            "authors": [
                "Vincent Vanhoucke",
                "Vijay Vasudevan",
                "Fernanda Vi\u00e9gas",
                "Oriol Vinyals",
                "Pete Warden",
                "Martin Wattenberg",
                "Martin Wicke",
                "Yuan Yu",
                "Xiaoqiang Zheng"
            ],
            "title": "TensorFlow: Large-scale machine learning on heterogeneous systems",
            "year": 2015
        },
        {
            "authors": [
                "Pieter Abbeel",
                "Andrew Y Ng"
            ],
            "title": "Apprenticeship learning via inverse reinforcement learning",
            "venue": "In Proceedings of the twenty-first international conference on Machine learning,",
            "year": 2004
        },
        {
            "authors": [
                "Michael Bain",
                "Claude Sommut"
            ],
            "title": "A framework for behavioural cloning",
            "venue": "Machine intelligence,",
            "year": 1999
        },
        {
            "authors": [
                "Nir Baram",
                "Oron Anschel",
                "Itai Caspi",
                "Shie Mannor"
            ],
            "title": "End-to-end differentiable adversarial imitation learning",
            "venue": "In International Conference on Machine Learning,",
            "year": 2017
        },
        {
            "authors": [
                "E Coumans",
                "Y Bai"
            ],
            "title": "Pybullet, a python module for physics simulation for games, robotics and machine learning",
            "venue": "GitHub repository,",
            "year": 2016
        },
        {
            "authors": [
                "Chelsea Finn",
                "Paul Christiano",
                "Pieter Abbeel",
                "Sergey Levine"
            ],
            "title": "A connection between generative adversarial networks, inverse reinforcement learning, and energy-based models",
            "venue": "NIPS Workshop on Adversarial Training,",
            "year": 2016
        },
        {
            "authors": [
                "Chelsea Finn",
                "Sergey Levine",
                "Pieter Abbeel"
            ],
            "title": "Guided cost learning: Deep inverse optimal control via policy optimization",
            "venue": "In International Conference on Machine Learning,",
            "year": 2016
        },
        {
            "authors": [
                "Justin Fu",
                "Katie Luo",
                "Sergey Levine"
            ],
            "title": "Learning robust rewards with adversarial inverse reinforcement learning",
            "venue": "arXiv preprint arXiv:1710.11248,",
            "year": 2017
        },
        {
            "authors": [
                "Scott Fujimoto",
                "Herke van Hoof",
                "Dave Meger"
            ],
            "title": "Addressing function approximation error in actor-critic methods",
            "venue": "arXiv preprint arXiv:1802.09477,",
            "year": 2018
        },
        {
            "authors": [
                "Ian Goodfellow",
                "Jean Pouget-Abadie",
                "Mehdi Mirza",
                "Bing Xu",
                "David Warde-Farley",
                "Sherjil Ozair",
                "Aaron Courville",
                "Yoshua Bengio"
            ],
            "title": "Generative adversarial nets",
            "venue": "In Advances in neural information processing systems,",
            "year": 2014
        },
        {
            "authors": [
                "Ishaan Gulrajani",
                "Faruk Ahmed",
                "Martin Arjovsky",
                "Vincent Dumoulin",
                "Aaron C Courville"
            ],
            "title": "Improved training of wasserstein gans",
            "venue": "In Advances in Neural Information Processing Systems,",
            "year": 2017
        },
        {
            "authors": [
                "Tuomas Haarnoja",
                "Kristian Hartikainen",
                "Pieter Abbeel",
                "Sergey Levine"
            ],
            "title": "Latent space policies for hierarchical reinforcement learning",
            "venue": "arXiv preprint arXiv:1804.02808,",
            "year": 2018
        },
        {
            "authors": [
                "Tuomas Haarnoja",
                "Aurick Zhou",
                "Pieter Abbeel",
                "Sergey Levine"
            ],
            "title": "Soft actor-critic: Offpolicy maximum entropy deep reinforcement learning with a stochastic actor",
            "venue": "arXiv preprint arXiv:1801.01290,",
            "year": 2018
        },
        {
            "authors": [
                "Peter Henderson",
                "Riashat Islam",
                "Philip Bachman",
                "Joelle Pineau",
                "Doina Precup",
                "David Meger"
            ],
            "title": "Deep reinforcement learning that matters",
            "venue": "arXiv preprint arXiv:1709.06560,",
            "year": 2017
        },
        {
            "authors": [
                "Todd Hester",
                "Matej Vecerik",
                "Olivier Pietquin",
                "Marc Lanctot",
                "Tom Schaul",
                "Bilal Piot",
                "Dan Horgan",
                "John Quan",
                "Andrew Sendonaris",
                "Gabriel Dulac-Arnold"
            ],
            "title": "Deep q-learning from demonstrations",
            "venue": "arXiv preprint arXiv:1704.03732,",
            "year": 2017
        },
        {
            "authors": [
                "Jonathan Ho",
                "Stefano Ermon"
            ],
            "title": "Generative adversarial imitation learning",
            "venue": "In Advances in Neural Information Processing Systems,",
            "year": 2016
        },
        {
            "authors": [
                "Bingyi Kang",
                "Zequn Jie",
                "Jiashi Feng"
            ],
            "title": "Policy optimization with demonstrations",
            "venue": "In Proceedings of the 35th International Conference on Machine Learning,",
            "year": 2018
        },
        {
            "authors": [
                "Kee-Eung Kim",
                "Hyun Soo Park"
            ],
            "title": "Imitation learning via kernel mean embedding",
            "year": 2018
        },
        {
            "authors": [
                "Diederik P Kingma",
                "Jimmy Ba"
            ],
            "title": "Adam: A method for stochastic optimization",
            "venue": "arXiv preprint arXiv:1412.6980,",
            "year": 2014
        },
        {
            "authors": [
                "Hoang M Le",
                "Nan Jiang",
                "Alekh Agarwal",
                "Miroslav Dud\u0131\u0301k",
                "Yisong Yue",
                "Hal Daum\u00e9 III"
            ],
            "title": "Hierarchical imitation and reinforcement learning",
            "venue": "arXiv preprint arXiv:1803.00590,",
            "year": 2018
        },
        {
            "authors": [
                "Mario Lucic",
                "Karol Kurach",
                "Marcin Michalski",
                "Sylvain Gelly",
                "Olivier Bousquet"
            ],
            "title": "Are gans created equal? a large-scale study",
            "venue": "arXiv preprint arXiv:1711.10337,",
            "year": 2017
        },
        {
            "authors": [
                "Ashvin Nair",
                "Bob McGrew",
                "Marcin Andrychowicz",
                "Wojciech Zaremba",
                "Pieter Abbeel"
            ],
            "title": "Overcoming exploration in reinforcement learning with demonstrations",
            "venue": "arXiv preprint arXiv:1709.10089,",
            "year": 2017
        },
        {
            "authors": [
                "Andrew Y. Ng",
                "Stuart Russell"
            ],
            "title": "Algorithms for inverse reinforcement learning",
            "venue": "In in Proc. 17th International Conf. on Machine Learning,",
            "year": 2000
        },
        {
            "authors": [
                "Andrew Y Ng",
                "Daishi Harada",
                "Stuart Russell"
            ],
            "title": "Policy invariance under reward transformations: Theory and application to reward shaping",
            "venue": "In ICML,",
            "year": 1999
        },
        {
            "authors": [
                "Razvan Pascanu",
                "Tomas Mikolov",
                "Yoshua Bengio"
            ],
            "title": "On the difficulty of training recurrent neural networks",
            "venue": "In International Conference on Machine Learning,",
            "year": 2013
        },
        {
            "authors": [
                "Jan Peters",
                "Stefan Schaal"
            ],
            "title": "Reinforcement learning of motor skills with policy gradients",
            "venue": "Neural networks,",
            "year": 2008
        },
        {
            "authors": [
                "Nathan D Ratliff",
                "J Andrew Bagnell",
                "Martin A Zinkevich"
            ],
            "title": "Maximum margin planning",
            "venue": "In Proceedings of the 23rd international conference on Machine learning,",
            "year": 2006
        },
        {
            "authors": [
                "Danilo Jimenez Rezende",
                "Shakir Mohamed"
            ],
            "title": "Variational inference with normalizing flows",
            "venue": "arXiv preprint arXiv:1505.05770,",
            "year": 2015
        },
        {
            "authors": [
                "St\u00e9phane Ross",
                "Geoffrey Gordon",
                "Drew Bagnell"
            ],
            "title": "A reduction of imitation learning and structured prediction to no-regret online learning",
            "venue": "In Proceedings of the fourteenth international conference on artificial intelligence and statistics,",
            "year": 2011
        },
        {
            "authors": [
                "John Schulman",
                "Sergey Levine",
                "Pieter Abbeel",
                "Michael Jordan",
                "Philipp Moritz"
            ],
            "title": "Trust region policy optimization",
            "venue": "In International Conference on Machine Learning,",
            "year": 2015
        },
        {
            "authors": [
                "John Schulman",
                "Filip Wolski",
                "Prafulla Dhariwal",
                "Alec Radford",
                "Oleg Klimov"
            ],
            "title": "Proximal policy optimization algorithms",
            "venue": "arXiv preprint arXiv:1707.06347,",
            "year": 2017
        },
        {
            "authors": [
                "Richard S Sutton",
                "Andrew G Barto"
            ],
            "title": "Reinforcement learning: An introduction",
            "venue": "MIT press,",
            "year": 1998
        },
        {
            "authors": [
                "Umar Syed",
                "Michael Bowling",
                "Robert E Schapire"
            ],
            "title": "Apprenticeship learning using linear programming",
            "venue": "In Proceedings of the 25th international conference on Machine learning,",
            "year": 2008
        },
        {
            "authors": [
                "Emanuel Todorov",
                "Tom Erez",
                "Yuval Tassa"
            ],
            "title": "Mujoco: A physics engine for model-based control",
            "venue": "In Intelligent Robots and Systems (IROS),",
            "year": 2012
        },
        {
            "authors": [
                "Faraz Torabi",
                "Garrett Warnell",
                "Peter Stone"
            ],
            "title": "Generative adversarial imitation from observation",
            "venue": "arXiv preprint arXiv:1807.06158,",
            "year": 2018
        },
        {
            "authors": [
                "Matej Vecer\u0131\u0301k",
                "Todd Hester",
                "Jonathan Scholz",
                "Fumin Wang",
                "Olivier Pietquin",
                "Bilal Piot",
                "Nicolas Heess",
                "Thomas Roth\u00f6rl",
                "Thomas Lampe",
                "Martin A Riedmiller"
            ],
            "title": "Leveraging demonstrations for deep reinforcement learning on robotics problems with sparse rewards",
            "year": 2017
        },
        {
            "authors": [
                "Ziyu Wang",
                "Josh S Merel",
                "Scott E Reed",
                "Nando de Freitas",
                "Gregory Wayne",
                "Nicolas Heess"
            ],
            "title": "Robust imitation of diverse behaviors",
            "venue": "In Advances in Neural Information Processing Systems,",
            "year": 2017
        },
        {
            "authors": [
                "Yuke Zhu",
                "Ziyu Wang",
                "Josh Merel",
                "Andrei Rusu",
                "Tom Erez",
                "Serkan Cabi",
                "Saran Tunyasuvunakool",
                "J\u00e1nos Kram\u00e1r",
                "Raia Hadsell",
                "Nando de Freitas"
            ],
            "title": "Reinforcement and imitation learning for diverse visuomotor skills",
            "venue": "arXiv preprint arXiv:1802.09564,",
            "year": 2018
        },
        {
            "authors": [
                "Brian D Ziebart",
                "Andrew L Maas",
                "J Andrew Bagnell",
                "Anind K Dey"
            ],
            "title": "Maximum entropy inverse reinforcement learning",
            "venue": "In AAAI,",
            "year": 2008
        }
    ],
    "sections": [
        {
            "text": "We identify two issues with the family of algorithms based on the Adversarial Imitation Learning framework. The first problem is implicit bias present in the reward functions used in these algorithms. While these biases might work well for some environments, they can also lead to sub-optimal behavior in others. Secondly, even though these algorithms can learn from few expert demonstrations, they require a prohibitively large number of interactions with the environment in order to imitate the expert for many real-world applications. In order to address these issues, we propose a new algorithm called Discriminator-Actor-Critic that uses off-policy Reinforcement Learning to reduce policy-environment interaction sample complexity by an average factor of 10. Furthermore, since our reward function is designed to be unbiased, we can apply our algorithm to many problems without making any task-specific adjustments."
        },
        {
            "heading": "1 INTRODUCTION",
            "text": "The Adversarial Imitation Learning (AIL) class of algorithms learns a policy that robustly imitates an expert\u2019s actions via a collection of expert demonstrations, an adversarial discriminator and a reinforcement learning method. For example, the Generative Adversarial Imitation Learning (GAIL) algorithm (Ho & Ermon, 2016) uses a discriminator reward and a policy gradient algorithm to imitate an expert RL policy on standard benchmark tasks. Similarly, the Adversarial Inverse Reinforcement Learning (AIRL) algorithm (Fu et al., 2017) makes use of a modified GAIL discriminator to recover a reward function that can be used to perform Inverse Reinforcement Learning (IRL) (Abbeel & Ng, 2004) and who\u2018s subsequent dense reward is robust to changes in dynamics or environment properties. Importantly, AIL algorithms such as GAIL and AIRL, obtain higher performance than supervised Behavioral Cloning (BC) when using a small number of expert demonstrations; experimentally suggesting that AIL algorithms alleviate some of the distributional drift (Ross et al., 2011) issues associated with BC. However, both these AIL methods suffer from two important issues that will be addressed by this work: 1) a large number of policy interactions with the learning environment is required for policy convergence and 2) bias in the reward function formulation and improper handling of environment terminal states introduces implicit rewards priors that can either improve or degrade policy performance.\nWhile GAIL requires as little as 200 expert frame transitions (from 4 expert trajectories) to learn a robust reward function on most MuJoCo (Todorov et al., 2012) tasks, the number of policy frame transitions sampled from the environment can be as high as 25 million in order to reach convergence. If PPO (Schulman et al., 2017) is used in place of TRPO (Schulman et al., 2015), the sample complexity can be reduced somewhat (for example, as in Figure 4, 25 million steps reduces to approximately 10 million steps), however it is still intractable for many robotics or real-world applications. In this work we address this issue by incorporating an off-policy RL algorithm (TD3 (Fujimoto\nar X\niv :1\n80 9.\n02 92\n5v 2\n[ cs\n.L G\n] 1\n5 O\nct 2\net al., 2018)) and an off-policy discriminator to dramatically decrease the sample complexity by many orders of magnitude.\nIn this work we will also illustrate how the specific form of AIL reward function used has a large impact on agent performance for episodic environments. For instance, as we will show, a strictly positive reward function prevents the agent from solving tasks in a minimal number of steps and a strictly negative reward function is not able to emulate a survival bonus. Therefore, one must have some knowledge of the true environment reward and incorporate such priors to choose a suitable reward function for successful application of GAIL and AIRL. We will discuss these issues in formal detail, and present a simple - yet effective - solution that drastically improves policy performance for episodic environments; we explicitly handle absorbing state transitions by learning the reward associated with these states.\nWe propose a new algorithm, which we call Discriminator-Actor-Critic (DAC), that is compatible with both the popular GAIL and AIRL frameworks, incorporates explicit terminal state handling, an off-policy discriminator and an off-policy actor-critic reinforcement learning algorithm. DAC achieves state-of-the-art AIL performance for a number of difficult imitation learning tasks. More specifically, in this work we:\n\u2022 Identify, and propose solutions for the problem of bias in discriminator-based reward estimation in imitation learning.\n\u2022 Accelerate learning from demonstrations by providing an off-policy variant for AIL algorithms, which significantly reduces the number of agent-environment interactions.\n\u2022 Illustrate the robustness of DAC to noisy, multi-modal and constrained expert demonstrations, by performing experiments with human demonstrations on non-trivial robotic tasks."
        },
        {
            "heading": "2 RELATED WORK",
            "text": "Imitation learning has been broadly studied under the twin umbrellas of Behavioral Cloning (BC) (Bain & Sommut, 1999; Ross et al., 2011) and Inverse Reinforcement Learning (IRL) (Ng & Russell, 2000). To recover the underlying policy, IRL performs an intermediate step of estimating the reward function followed by RL on this function (Abbeel & Ng, 2004; Ratliff et al., 2006). Operating in the Maximum Entropy IRL formulation (Ziebart et al., 2008), Finn et al. (2016b) introduce an iterative-sampling based estimator for the partition function, deriving an algorithm for recovering non-linear reward functions in high-dimensional state and action spaces. Finn et al. (2016a) and Fu et al. (2017) further extend this by exploring the theory and practical considerations of an adversarial IRL framework, and draw connections between IRL and cost learning in GANs (Goodfellow et al., 2014).\nIn practical scenarios, we are often interested in recovering the expert\u2019s policy, rather than the reward function. Following Syed et al. (2008), and by treating imitation learning as an occupancy matching problem, Ho & Ermon (2016) proposed a Generative Adversarial Imitation Learning (GAIL) framework for learning a policy from demonstrations, which bypasses the need to recover the expert\u2019s reward function. More recent work extends the framework by improving on stability and robustness (Wang et al., 2017; Kim & Park, 2018) and making connections to model-based imitation learning (Baram et al., 2017). These approaches generally use on-policy algorithms for policy optimization, trading off sample efficiency for training stability.\nLearning complex behaviors from sparse reward signals poses a significant challenge in reinforcement learning. In this context, expert demonstrations or template trajectories have been successfully used (Peters & Schaal, 2008) for initalizing RL policies. There has been a growing interest in combining extrinsic sparse reward signals with imitation learning for guided exploration (Zhu et al., 2018; Kang et al., 2018; Le et al., 2018; Vecer\u0131\u0301k et al., 2017). Off policy learning from demonstration has been previously studied under the umbrella of accelerating reinforcement learning by structured exploration (Nair et al., 2017; Hester et al., 2017) An implicit assumption of these approaches is access to demonstrations and reward from the environment; our approach requires access only to expert demonstrations.\nOur work is most related to AIL algorithms (Ho & Ermon, 2016; Fu et al., 2017; Torabi et al., 2018). In contrast to Ho & Ermon (2016) which assumes (state-action-state\u2019) transition tuples, Torabi et al. (2018) has weaker assumptions, by relying only on observations and removing the dependency on actions. The contributions in this work are complementary (and compatible) to Torabi et al. (2018)."
        },
        {
            "heading": "3 BACKGROUND",
            "text": ""
        },
        {
            "heading": "3.1 MARKOV DECISION PROCESS",
            "text": "We consider problems that satisfy the definition of a Markov Decision Process (MDP), formalized by the tuple: (S,A, p(s), p(s\u2032|s, a), r(s, a, s\u2032), \u03b3). Here S, A represent the state and action spaces respectively, p(s) is the initial state distribution, p(s\u2032|s, a) defines environment dynamics represented as a conditional state distribution, r(s, a, s\u2032) is reward function and \u03b3 the return discount factor.\nIn continuing tasks, where environment interactions are unbounded in sequence length, the returns for a trajectory \u03c4 = {(st, at)}\u221et=0, are defined as Rt = \u2211\u221e k=t \u03b3\nk\u2212tr(sk, ak, sk+1). In order to use the same notation for episodic tasks, whose finite length episodes end when reaching a terminal state, we can define a set of absorbing states sa (Sutton et al., 1998) that an agent enters after the end of episode, has zero reward and transitions to itself for all agent actions: sa \u223c p(\u00b7|sT , aT ), r(sa, \u00b7, \u00b7) = 0 and sa \u223c p(\u00b7|sa, \u00b7) (see Figure 3.1). With this above absorbing state notation, returns can be defined simply as Rt = \u2211T k=t \u03b3\nk\u2212tr(sk, ak, sk+1). In reinforcement learning, the goal is to learn a policy that maximizes expected returns.\nIn many imitation learning and IRL algorithms a common assumption is to assign zero reward value, often implicitly, to absorbing states. As we will discuss in detail in Section 4.2, our DAC algorithm will assign a learned, potentially non-zero reward for absorbing states and we will demonstrate empirically in Section 4.1.1, that it is extremely important to properly handle the absorbing states for algorithms where rewards are learned."
        },
        {
            "heading": "3.2 ADVERSARIAL IMITATION LEARNING",
            "text": "In order to learn a robust reward function we use the GAIL framework (Ho & Ermon, 2016). Inspired by maximum entropy IRL (Ziebart et al., 2008) and Generative Adversarial Networks (GANs) (Goodfellow et al., 2014), GAIL trains a binary classifier, D(s, a), referred to as the discriminator, to distinguish between transitions sampled from an expert and those generated by the trained policy. In standard GAN frameworks, a generator gradient is calculated by backprop through the learned discriminator. However, in GAIL the policy is instead provided a reward for confusing the discriminator, which is then maximized via some on-policy RL optimization scheme (e.g. TRPO (Schulman et al., 2015)):\nmax \u03c0 max D E\u03c0[log(D(s, a))] + E\u03c0E [log(1\u2212D(s, a))]\u2212 \u03bbH(\u03c0) (1)\nwhere H(\u03c0) is an entropy regularization term.\nThe rewards learned by GAIL might not correspond to a true reward (Fu et al., 2017) but can be used to match the expert occupancy measure, which is defined as \u03c1\u03c0E (s, a) = \u2211\u221e t=0 \u03b3\ntp(st = s, at = a|\u03c0E). Ho & Ermon (2016) draw analogies between distribution matching using GANs and occupancy matching with GAIL. They demonstrate that by maximizing the above reward, the algorithm matches occupancy measures of the expert and trained policies with some regulation term defined by the choice of GAN loss function.\nIn principle, GAIL can be incorporated with any on-policy RL algorithm. However, in this work we adapt it for off-policy training (discussed in Section 4.3). As can be seen from Equation 1, the algorithm requires state-action pairs to be sampled from the learned policy. In Section 4.3 we will discuss what modifications are necessary to adapt the algorithm to off-policy training."
        },
        {
            "heading": "4 DISCRIMINATOR-ACTOR-CRITIC",
            "text": "In this section we will present the Discriminator-Actor-Critic (DAC) algorithm. This algorithm is comprised of two parts: a method for unbiasing adversarial reward functions, discussed in Section 4.2, and an off-policy discriminator formulation of AIL, discussed in Section 4.3. A high level pictorial representation of this algorithm is also shown in Figure 1. The algorithm is formally summarized in Appendix A."
        },
        {
            "heading": "4.1 BIAS IN REWARD FUNCTIONS",
            "text": "In the following section, we present examples of bias present in reward functions in different AIL algorithms:\n\u2022 In the GAIL framework, and follow-up methods, such as GMMIL (Kim & Park, 2018) and AIRL, zero reward is implicitly assigned for absorbing states, while some reward function, r(s, a), assigns rewards for intermediate states depending on properties of a task.\n\u2022 For certain environments, a survival bonus in the form of per-step positive reward is added to the rewards received by the agent. This encourages agents to survive longer in the environment to collect more rewards. We observe that a commonly used form of the reward function: r(s, a) = \u2212 log(1 \u2212 D(s, a)) has worked well for environments that require a survival bonus. However, since the recovered reward function can never be negative, it cannot recover the true reward function for environments where an agent is required to solve the task as quickly as possible. Using this form of the reward function will lead to sub-optimal solutions. The agent is now incentivized to move in loops or take small actions (in continuous action spaces) that keep it close to the states in the expert\u2019s trajectories. The agent keeps collecting positive rewards without actually attempting to solve the task demonstrated by the expert (see Section 4.1).1\n\u2022 Another reward formulation is r(s, a) = log(D(s, a)). This is often used for tasks with a per step penalty, when a part of a reward function consists of a negative constant assigned unconditionally of states and actions. However, this variant assigns only negative rewards and cannot learn a survival bonus. Such strong priors might lead to good results even with no expert trajectories (as shown in Figure 5).\nFrom an end-user\u2019s perspective, it is undesirable to have to craft a different reward function for every new task. In the next section, we describe an illustrative example of a typical failure of biased reward functions. We also propose a method to unbias the reward function in our imitation learning algorithm such that it is able to recover different reward functions without adjusting the form of reward function."
        },
        {
            "heading": "4.1.1 AN ILLUSTRATIVE EXAMPLE OF REWARD BIAS",
            "text": "Firstly, we illustrate how r(s, a) = \u2212 log(1 \u2212 D(s, a)) cannot match the expert trajectories with environments with per-step penalties. Consider a simple MDP with 3 states: s1, s2, sg , where sg is\n1Note that this behavior was described in the early reward shaping literature (Ng et al., 1999).\na goal state and agents receive a reward by reaching the goal state, and 3 actions: a1\u21922, a2\u21921, a2\u2192g; where ai\u2192j is such that sj \u223c p(\u00b7|si, ai\u2192j), as shown in Figure 4.1 a). And for every state the expert demonstration is the following: \u03c0E(s1) = a1\u21922, \u03c0E(s2) = a2\u2192g , (as shown in Figure 4.1 b), and which clearly reaches the goal state in the optimal number of steps. Now consider the trajectory of\nFigure 4.1 c): (s1, a1\u21922) \u2192 (s2, a2\u21921) \u2192 (s1, a1\u21922) \u2192 (s2, a2\u2192g). This trajectory will have the returnR\u03c0 = r(s1, a1\u21922)+\u03b3r(s2, a2\u21921)+\u03b32r(s1, a1\u21922)+\u03b33r(s2, a2\u2192g). While the expert return is RE = r(s1, a1\u21922) + \u03b3r(s2, a2\u2192g).\nAssuming that we have a discriminator trained to convergence, it will assign r(s2, a2\u21921) a value that is close to zero, since it never appears in expert demonstrations. Therefore, from R\u03c0 < RE one can derive r(s1, a1\u21922) < (1\u2212\u03b32) \u03b3 r(s2, a2\u2192g). Thus, for the loopy trajectory to have a smaller return than our expert policy, we need r(s1, a1\u21922) < 0.01990.99 \u00b7 r(s2, a2\u2192g), if \u03b3 = 0.99 (a standard value). However, the optimal values for GAN discriminator in this case are r(s1, a1\u21922) = \u2212log(1\u22120.5) \u2248 0.3 and r(s2, a2\u2192g) = \u2212log(1\u22122/3) \u2248 0.477. Hence, the inequality above does not hold. As such, the convergence of GAIL to the expert policy with this reward function is possible under only certain values of \u03b3, and this value depends heavily on the task MDP. At the same time, since the reward function is strictly positive it implicitly provides a survival bonus. In other words, regardless of how the discriminator actually classifies state-action tuples, it always rewards the policy for avoiding absorbing states (see Section 5.2). Fundamentally, this characteristic makes it difficult to attribute policy performance to the robustness of the GAIL learned reward since the RL optimizer can often solve the task as long as the reward is strictly positive.\nAnother common reward variant, r(s, a) = log(D(s, a)), which corresponds to the original saturating loss for GANs, penalizes every step and leads to collapsing in environments with a survival bonus. This phenomenon can be demonstrated using a reasoning similar to the one stated above.\nFinally, AIRL uses the reward function: r(s, a, s\u2032) = log(D(s, a, s\u2032)\u2212 log(1\u2212D(s, a, s\u2032)), which can assign both positive and negative rewards for each time step. In AIRL, as in the original GAIL, the agent receives zero reward at the end of the episode, leading to sub-optimal policies (and training instability) in environments with a survival bonus. In the beginning of training this reward function assigns rewards with a negative bias because it is easy for the discriminator to distinguish samples for an untrained policy and an expert, and so it is common for learned agents to finish an episode earlier (to avoid additional negative penalty) instead of trying to imitate the expert."
        },
        {
            "heading": "4.2 UNBIASING REWARD FUNCTIONS",
            "text": "In order to resolve the issues described in Section 4.1.1, we suggest explicitly learning rewards for absorbing states for expert demonstrations and trajectories produced by a policy. Thus, the returns for final states are defined now RT = r(sT , aT ) + \u2211\u221e t=T+1 \u03b3\nt\u2212T r(sa, \u00b7) with a learned reward r(sa, \u00b7) instead of just RT = r(sT , aT ). We implemented these absorbing states by adding an extra indicator dimension that indicates whether the state is absorbing or not, for absorbing states we set the indicator dimension to one and all other dimensions to zero. The GAIL discriminator can distinguish whether reaching an absorbing state is a desirable behavior from the expert\u2019s perspective and assign the rewards accordingly.\nInstead of recursively computing the Q values, this issue can be addressed by analytically deriving the following returns for the terminal states: RT = r(sT , aT ) + \u03b3r(sa,\u00b7) 1\u2212\u03b3 . However, in practice this alternative was much less stable."
        },
        {
            "heading": "4.3 ADDRESSING SAMPLE INEFFICIENCY",
            "text": "As previously mentioned, GAIL requires a significant number of interactions with a learning environment in order to imitate an expert policy. To address the sample inefficiency of GAIL, we use an off-policy RL algorithm and perform off-policy training of the GAIL discriminator performed in the following way: instead of sampling trajectories from a policy directly, we sample transitions from a replay bufferR collected while performing off-policy training:\nmax D ER[log(D(s, a))] + E\u03c0E [log(1\u2212D(s, a))]\u2212 \u03bbH(\u03c0). (2)\nEquation 2 tries to match the occupancy measures between the expert and the distribution induced by the replay buffer R, which can be seen as a mixture of all policy distributions that appeared during training, instead of the latest trained policy \u03c0. In order to recover the original on-policy expectation, one needs to use importance sampling:\nmax D\nER [ p\u03c0\u03b8 (s, a)\npR(s, a) log(D(s, a))\n] + E\u03c0E [log(1\u2212D(s, a))]\u2212 \u03bbH(\u03c0). (3)\nHowever, it can be challenging to properly estimate these densities and the discriminator updates might have large variance. We found that the algorithm works well in practice with the importance weight omitted.\nWe use the GAIL discriminator in order to define rewards for training a policy using TD3; we update per-step rewards every time when we pull transitions from the replay buffer using the latest discriminator. The TD3 algorithm provides a good balance between sample complexity and simplicity of implementation and so is a good candidate for practical applications. Additionally, depending on the distribution of expert demonstrations and properties of the task, off-policy RL algorithms can effectively handle multi-modal action distributions; for example, this can be achieved for the Soft Actor Critic algorithm (Haarnoja et al., 2018b) using the reparametrization trick (Kingma & Ba, 2014) with a normalizing flow (Rezende & Mohamed, 2015) as described in Haarnoja et al. (2018a)."
        },
        {
            "heading": "5 EXPERIMENTS",
            "text": "We implemented the DAC algorithm described in Section 4.3 using TensorFlow Eager (Abadi et al., 2015) and we evaluated it on popular benchmarks for continuous control simulated in MuJoCo (Todorov et al., 2012). We also define a new set of robotic continuous control tasks (described in detail below) simulated in PyBullet (Coumans & Bai, 2016), and a Virtual Reality (VR) system for capturing human examples in this environment; human examples constitute a particularly challenging demonstration source due to their noisy, multi-modal and potentially sub-optimal nature, and we define episodic multi-task environments as a challenging setup for adversarial imitation learning.\nFor the critic and policy networks we used the same architecture as in Fujimoto et al. (2018): a 2 layer MLP with ReLU activations and 400 and 300 hidden units correspondingly. We also add gradient clipping (Pascanu et al., 2013) to the actor network with clipping value of 40. For the discriminator we used the same architecture as in Ho & Ermon (2016): a 2 layer MLP with 100 hidden units and tanh activations. We trained all networks with the Adam optimizer (Kingma & Ba, 2014) and decay learning rate by starting with initial learning rate of 10\u22123 and decaying it by 0.5 every 105 training steps for the actor network.\nIn order to make the algorithm more stable, especially in the off-policy regime when the discriminator can easily over-fit to training data, we use regularization in the form of gradient penalties (Gulrajani et al., 2017) for the discriminator. Originally, this was introduced as an alternative to weight clipping for Wasserstein GANs (Arjovsky et al., 2017), but later it was shown that it helps to make JS-based GANs more stable as well (Lucic et al., 2017).\nWe replicate the experimental setup of Ho & Ermon (2016): expert trajectories are sub-sampled by retaining every 20 time steps starting with a random offset (and fixed stride). It is worth mentioning that, as in Ho & Ermon (2016), this procedure is done in order to make the imitation learning task harder. With full trajectories, behavioral cloning provides competitive results to GAIL.\nFollowing Henderson et al. (2017) and Fujimoto et al. (2018), we perform evaluation using 10 different random seeds. For each seed, we compute average episode reward using 10 episodes and running the policy without random noise. As in Ho & Ermon (2016) we plot reward normalized in such a way that zero corresponds to a random reward while one corresponds to expert rewards. We compute mean over all seeds and visualize half standard deviations. In order to produce the same evaluation for GAIL we used the original implementation2 of the algorithm."
        },
        {
            "heading": "5.1 OFF POLICY DAC ALGORITHM",
            "text": "Evaluation results of the DAC algorithm on a suite of MuJoCo tasks are shown in Figure 4, as are the GAIL (TRPO) and BC basline results. In the top-left plot, we show DAC is an order of magnitude more sample efficent than then TRPO and PPO based GAIL baselines. In the other plots, we show that by using a significantly smaller number of environment steps (orders of magnitude fewer), our DAC algorithm reaches comparable expected reward as the GAIL baseline. Furthermore, DAC outperforms the GAIL baseline on all environments within a 1 million step threshold. A comprehensive suit of results can be found in Appendix B, Figure 8."
        },
        {
            "heading": "5.2 REWARD BIAS",
            "text": "As discussed in Section 4.1.1, the reward function variants used with GAIL can have implicit biases when used without handling absorbing states. Figure 5 demonstrates how bias affects results on an environment with survival bonus when using the reward function of Ho & Ermon (2016): r(s, a) = \u2212 log(1\u2212D(s, a)). Surprisingly, when using a fixed and untrained GAIL discriminator that outputs 0.5 for every state-action pair, we were able to reach episode rewards of around 1000 on the Hopper environment, corresponding to approximately one third of the expert performance. Without any reward learning, and using no expert demonstrations, the agent can learn a policy that outperforms behavioral cloning (Figure 5). Therefore, the choice of a specific reward function might already provide strong prior knowledge that helps the RL algorithm to move towards recovering the expert policy, irrespective of the quality of the learned reward.\nAdditionally, we evaluated our method on two environments with per-step penalty (see Figure 6). These environment are simulated in PyBullet and consist of a Kuka IIWA arm and 3 blocks on a virtual table. A rendering of the environment can be found in Appendix C, Figure 9. Using a Cartesian displacement action for the gripper end-effector and a compact observation-space (consisting of each block\u2019s 6DOF pose and the Kuka\u2019s end-effector pose), the agent must either a) reach one of the 3 blocks in the shortest number of frames possible (the target block is provided to the policy as a one-hot vector), which we call Kuka-Reach, or b) push one block along the table so that it is adjacent to another block, which we call Kuka-PushNext. For evaluation, we define a sparse reward\n2https://github.com/openai/imitation\nindicating successful task completion (within some threshold). For these imitation learning experiments, we use human demonstrations collected with a VR setup, where the participant wears a VR headset and controls in real-time the gripper end-effector using a 6DOF controller.\nUsing the reward defined as r(s, a) = \u2212log(1 \u2212 D(s, a)) and without absorbing state handling, the agent completely fails to recover the expert policy given 600 expert trajectories without subsampling (as shown in Figure 5). In contrast, our DAC algorithm quickly learns to imitate the expert, despite using noisy and potentially sub-optimal human demonstrations.\nAs discussed, alternative reward functions do not have this positive bias but still require proper handling of the absorbing states as well in order to avoid early termination due to incorrectly assigned per-frame penalty. Figure 7 illustrates results for AIRL with and without learning rewards for absorbing states. For these experiments we use the discriminator structure from Fu et al. (2017) in combination with the TD3 algorithm."
        },
        {
            "heading": "6 CONCLUSION",
            "text": "In this work we address several important issues associated with the popular GAIL framework. In particular, we address 1) sample inefficiency with respect to policy transitions in the environment and 2) we demonstrate a number of reward biases that can either implicitly impose prior knowledge about the true reward, or alternatively, prevent the policy from imitating the optimal expert. To address reward bias, we propose a simple mechanism whereby the rewards for absorbing states are also learned, which negates the need to hand-craft a discriminator reward function for the properties of the task at hand. In order to improve sample efficiency, we perform off-policy training of the\ndiscriminator and use an off-policy RL algorithm. We show that our algorithm reaches state-of-theart performance for an imitation learning algorithm on several standard RL benchmarks, and is able to recover the expert policy given a significantly smaller number of samples than in recent GAIL work. We will make the code for this project public following review."
        },
        {
            "heading": "A DAC ALGORITHM",
            "text": "Algorithm 1 Discriminative-Actor-Critic Adversarial Imitation Learning Algorithm Input: expert replay bufferRE\nprocedure WRAPFORABSORBINGSTATES(\u03c4 ) if sT is a terminal state then\n(sT , aT , \u00b7, s\u2032T )\u2190 (sT , aT , \u00b7, sa) \u03c4 \u2190 \u03c4 \u222a {(sa, \u00b7, \u00b7, sa)}\nend if return \u03c4\nend procedure\nInitialize replay bufferR \u2190 \u2205 for \u03c4 = {(st, at, \u00b7, s\u2032t)}Tt=1 \u2208 RE do\n\u03c4 \u2190WrapForAbsorbingState(\u03c4) . Wrap expert rollouts with absorbing states end for for n = 1, . . . , do\nSample \u03c4 = {(st, at, \u00b7, s\u2032t)}Tt=1 with \u03c0\u03b8 R \u2190 R\u222aWrapForAbsorbingState(\u03c4) . Update Policy Replay Buffer for i = 1, . . . , |\u03c4 | do {(st, at, \u00b7, \u00b7)}Bt=1 \u223c R, {(s\u2032t, a\u2032t, \u00b7, \u00b7)}Bt=1 \u223c RE . Mini-batch sampling L = \u2211B b=1 logD(sb, ab)\u2212 log(1\u2212D(s\u2032b, a\u2032b))\nUpdate D with GAN+GP end for for i = 1, . . . , |\u03c4 | do {(st, at, \u00b7, s\u2032t)}Bt=1 \u223c R for b = 1, . . . , B do\nr \u2190 logD(sb, ab)\u2212 log(1\u2212D(sb, ab)) (sb, ab, \u00b7, s\u2032b)\u2190 (sb, ab, r, s\u2032b) . Use current reward estimate.\nend for Update \u03c0\u03b8 with TD3\nend for end for"
        },
        {
            "heading": "B SUPPLEMENTARY RESULTS ON MUJOCO ENVIRONMENTS",
            "text": ""
        },
        {
            "heading": "C KUKA-IIWA SIMULATED ENVIRONMENT",
            "text": ""
        }
    ],
    "year": 2018
}