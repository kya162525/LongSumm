{
    "abstractText": "We introduce the \u201cNoBackTrack\u201d algorithm to train the parameters of dynamical systems such as recurrent neural networks. This algorithm works in an online, memoryless setting, thus requiring no backpropagation through time, and is scalable, avoiding the large computational and memory cost of maintaining the full gradient of the current state with respect to the parameters. The algorithm essentially maintains, at each time, a single search direction in parameter space. The evolution of this search direction is partly stochastic and is constructed in such a way to provide, at every time, an unbiased random estimate of the gradient of the loss function with respect to the parameters. Because the gradient estimate is unbiased, on average over time the parameter is updated as it should. The resulting gradient estimate can then be fed to a lightweight Kalman-like filter to yield an improved algorithm. For recurrent neural networks, the resulting algorithms scale linearly with the number of parameters. Small-scale experiments confirm the suitability of the approach, showing that the stochastic approximation of the gradient introduced in the algorithm is not detrimental to learning. In particular, the Kalman-like version of NoBackTrack is superior to backpropagation through time (BPTT) when the time span of dependencies in the data is longer than the truncation span for BPTT. Consider the problem of training the parameters \u03b8 of a dynamical system over a variable h \u2208 Rn subjected to the evolution equation h(t + 1) = f(h(t), x(t), \u03b8) (1) where f is a fixed function of h and of an input signal x(t), depending on parameters \u03b8. The goal is online minimization of a loss function \u2211\ufe00 t lt(y(t), y(t)) between a desired output y(t) at time t and a prediction1 y(t) = Y (h(t), \u03c6) (2) 1The prediction y may not live in the same set as y. Often, y encodes a probability distribution over the possible values of y, and the loss is the logarithmic loss l = \u2212 log py(y). 1 ar X iv :1 50 7. 07 68 0v 2 [ cs .N E ] 2 0 N ov 2 01 5 computed from h(t) and additional parameters \u03c6. A typical example we have in mind is a recurrent neural network, with activities ai(t) := sigm(hi(t)) and evolution equation hi(t + 1) = bi + \u2211\ufe00 k rkixk(t) + \u2211\ufe00 j Wjiaj(t), with parameter \u03b8 = (bi, rki, Wji)i,j,k. If the full target sequence y(t)t\u2208[0;T ] is known in advance, one strategy is to use the backpropagation through time algorithm (BPTT, see e.g. [Jae02]) to compute the gradient of the total loss LT := \u2211\ufe00T t=0 lt with respect to the parameters \u03b8 and \u03c6, and use gradient descent on \u03b8 and \u03c6. However, if the data y(t + 1) arrive one at a time in a streaming fashion, backpropagation through time would require making a full backward computation from time t + 1 to time 0 after each new data point becomes available. This results in an \u03a9(t2) complexity and in the necessity to store past states, inputs, and outputs. A possible strategy is to only backtrack by a finite number of time steps [Jae02] rather than going back all the way to t = 0. But this provides biased gradient estimates and may impair detection of time dependencies with a longer range than the backtracking time range. By contrast, methods which are fully online are typically not scalable. One strategy, known as real-time recurrent learning (RTRL) in the recurrent network community,2 maintains the full gradient of the current state with respect to the parameters: G(t) := \u2202h(t) \u2202\u03b8 (3) which satisfies the evolution equation G(t + 1) = \u2202f(h(t), x(t), \u03b8) \u2202h G(t) + \u2202f(h(t), x(t), \u03b8) \u2202\u03b8 (4) (by differentiating (1)). Knowing G(t) allows to minimize the loss via a stochastic gradient descent on the parameters \u03b8, namely,3 \u03b8 \u2190 \u03b8 \u2212 \u03b7t \u2202lt \u2202\u03b8 \u22a4 (5) with learning rate \u03b7t. Indeed, the latter quantity can be computed from Gt and from the way the predictions depend on h(t), via the chain rule \u2202lt \u2202\u03b8 = \u2202lt(Y (h(t), \u03c6), y(t)) \u2202h G(t) (6) However, the full gradient G(t) is an object of dimension dim h \u00d7 dim \u03b8. This prevents computing or even storing G(t) for moderately largedimensional dynamical systems, such as recurrent neural networks. 2This amounts to applying forward automatic differentiation. 3We use the standard convention for Jacobian matrices, namely, \u2202x/\u2202y is the matrix with entries \u2202xi/\u2202yj . Then the chain rule writes \u2202x \u2202y \u2202y \u2202z = \u2202x \u2202z . This makes the derivatives \u2202lt/\u2202\u03b8 into row vectors so that gradient descent is \u03b8 \u2190 \u03b8 \u2212 (\u2202lt/\u2202\u03b8).",
    "authors": [
        {
            "affiliations": [],
            "name": "Yann Ollivier"
        },
        {
            "affiliations": [],
            "name": "Corentin Tallec"
        },
        {
            "affiliations": [],
            "name": "Guillaume Charpiat"
        }
    ],
    "id": "SP:5a5679bdae3507d2af06c88e06af31d86544a909",
    "references": [
        {
            "authors": [
                "Ron Begleiter",
                "Ran El-Yaniv",
                "Golan Yona"
            ],
            "title": "On prediction using variable order markov models",
            "venue": "Journal of Artificial Intelligence Research,",
            "year": 2004
        },
        {
            "authors": [
                "Olivier Capp\u00e9"
            ],
            "title": "Online EM algorithm for hidden Markov models",
            "venue": "J. Comput. Graph. Statist.,",
            "year": 2011
        },
        {
            "authors": [
                "Simon Haykin"
            ],
            "title": "Kalman filtering and neural networks",
            "year": 2004
        },
        {
            "authors": [
                "Herbert Jaeger"
            ],
            "title": "Tutorial on training recurrent neural networks, covering BPTT, RTRL, EKF and the \u2018\u2018echo state network\u2019",
            "venue": "Technical Report 159,",
            "year": 2002
        },
        {
            "authors": [
                "Yann Ollivier"
            ],
            "title": "Riemannian metrics for neural networks I: feedforward networks",
            "venue": "Information and Inference,",
            "year": 2015
        },
        {
            "authors": [
                "Yann Ollivier"
            ],
            "title": "Riemannian metrics for neural networks II: recurrent networks and learning symbolic data sequences",
            "venue": "Information and Inference,",
            "year": 2015
        }
    ],
    "sections": [
        {
            "text": "The algorithm essentially maintains, at each time, a single search direction in parameter space. The evolution of this search direction is partly stochastic and is constructed in such a way to provide, at every time, an unbiased random estimate of the gradient of the loss function with respect to the parameters. Because the gradient estimate is unbiased, on average over time the parameter is updated as it should.\nThe resulting gradient estimate can then be fed to a lightweight Kalman-like filter to yield an improved algorithm. For recurrent neural networks, the resulting algorithms scale linearly with the number of parameters.\nSmall-scale experiments confirm the suitability of the approach, showing that the stochastic approximation of the gradient introduced in the algorithm is not detrimental to learning. In particular, the Kalman-like version of NoBackTrack is superior to backpropagation through time (BPTT) when the time span of dependencies in the data is longer than the truncation span for BPTT.\nConsider the problem of training the parameters \ud835\udf03 of a dynamical system over a variable \u210e \u2208 R\ud835\udc5b subjected to the evolution equation\n\u210e(\ud835\udc61 + 1) = \ud835\udc53(\u210e(\ud835\udc61), \ud835\udc65(\ud835\udc61), \ud835\udf03) (1)\nwhere \ud835\udc53 is a fixed function of \u210e and of an input signal \ud835\udc65(\ud835\udc61), depending on parameters \ud835\udf03. The goal is online minimization of a loss function \u2211\ufe00 \ud835\udc61 \u2113\ud835\udc61(\ud835\udc66(\ud835\udc61), \ud835\udc66(\ud835\udc61)) between a desired output \ud835\udc66(\ud835\udc61) at time \ud835\udc61 and a prediction1\n\ud835\udc66(\ud835\udc61) = \ud835\udc4c (\u210e(\ud835\udc61), \ud835\udf19) (2) 1The prediction \ud835\udc66 may not live in the same set as \ud835\udc66. Often, \ud835\udc66 encodes a probability distribution over the possible values of \ud835\udc66, and the loss is the logarithmic loss \u2113 = \u2212 log \ud835\udc5d\ud835\udc66(\ud835\udc66).\nar X\niv :1\n50 7.\n07 68\n0v 2\n[ cs\n.N E\n] 2\n0 N\nov 2\n01 5\ncomputed from \u210e(\ud835\udc61) and additional parameters \ud835\udf19. A typical example we have in mind is a recurrent neural network, with activities \ud835\udc4e\ud835\udc56(\ud835\udc61) := sigm(\u210e\ud835\udc56(\ud835\udc61)) and evolution equation \u210e\ud835\udc56(\ud835\udc61 + 1) = \ud835\udc4f\ud835\udc56 + \u2211\ufe00 \ud835\udc58 \ud835\udc5f\ud835\udc58\ud835\udc56\ud835\udc65\ud835\udc58(\ud835\udc61) + \u2211\ufe00 \ud835\udc57 \ud835\udc4a\ud835\udc57\ud835\udc56\ud835\udc4e\ud835\udc57(\ud835\udc61), with parameter \ud835\udf03 = (\ud835\udc4f\ud835\udc56, \ud835\udc5f\ud835\udc58\ud835\udc56, \ud835\udc4a\ud835\udc57\ud835\udc56)\ud835\udc56,\ud835\udc57,\ud835\udc58.\nIf the full target sequence \ud835\udc66(\ud835\udc61)\ud835\udc61\u2208[0;\ud835\udc47 ] is known in advance, one strategy is to use the backpropagation through time algorithm (BPTT, see e.g. [Jae02]) to compute the gradient of the total loss \ud835\udc3f\ud835\udc47 := \u2211\ufe00\ud835\udc47 \ud835\udc61=0 \u2113\ud835\udc61 with respect to the parameters \ud835\udf03 and \ud835\udf19, and use gradient descent on \ud835\udf03 and \ud835\udf19. However, if the data \ud835\udc66(\ud835\udc61 + 1) arrive one at a time in a streaming fashion, backpropagation through time would require making a full backward computation from time \ud835\udc61 + 1 to time 0 after each new data point becomes available. This results in an \u03a9(\ud835\udc612) complexity and in the necessity to store past states, inputs, and outputs. A possible strategy is to only backtrack by a finite number of time steps [Jae02] rather than going back all the way to \ud835\udc61 = 0. But this provides biased gradient estimates and may impair detection of time dependencies with a longer range than the backtracking time range.\nBy contrast, methods which are fully online are typically not scalable. One strategy, known as real-time recurrent learning (RTRL) in the recurrent network community,2 maintains the full gradient of the current state with respect to the parameters:\n\ud835\udc3a(\ud835\udc61) := \ud835\udf15\u210e(\ud835\udc61) \ud835\udf15\ud835\udf03\n(3)\nwhich satisfies the evolution equation\n\ud835\udc3a(\ud835\udc61 + 1) = \ud835\udf15\ud835\udc53(\u210e(\ud835\udc61), \ud835\udc65(\ud835\udc61), \ud835\udf03) \ud835\udf15\u210e \ud835\udc3a(\ud835\udc61) + \ud835\udf15\ud835\udc53(\u210e(\ud835\udc61), \ud835\udc65(\ud835\udc61), \ud835\udf03) \ud835\udf15\ud835\udf03\n(4)\n(by differentiating (1)). Knowing \ud835\udc3a(\ud835\udc61) allows to minimize the loss via a stochastic gradient descent on the parameters \ud835\udf03, namely,3\n\ud835\udf03 \u2190 \ud835\udf03 \u2212 \ud835\udf02\ud835\udc61 \ud835\udf15\u2113\ud835\udc61 \ud835\udf15\ud835\udf03\n\u22a4 (5)\nwith learning rate \ud835\udf02\ud835\udc61. Indeed, the latter quantity can be computed from \ud835\udc3a\ud835\udc61 and from the way the predictions depend on \u210e(\ud835\udc61), via the chain rule\n\ud835\udf15\u2113\ud835\udc61 \ud835\udf15\ud835\udf03 = \ud835\udf15\u2113\ud835\udc61(\ud835\udc4c (\u210e(\ud835\udc61), \ud835\udf19), \ud835\udc66(\ud835\udc61)) \ud835\udf15\u210e \ud835\udc3a(\ud835\udc61) (6)\nHowever, the full gradient \ud835\udc3a(\ud835\udc61) is an object of dimension dim \u210e \u00d7 dim \ud835\udf03. This prevents computing or even storing \ud835\udc3a(\ud835\udc61) for moderately largedimensional dynamical systems, such as recurrent neural networks.\n2This amounts to applying forward automatic differentiation. 3We use the standard convention for Jacobian matrices, namely, \ud835\udf15\ud835\udc65/\ud835\udf15\ud835\udc66 is the matrix\nwith entries \ud835\udf15\ud835\udc65\ud835\udc56/\ud835\udf15\ud835\udc66\ud835\udc57 . Then the chain rule writes \ud835\udf15\ud835\udc65\ud835\udf15\ud835\udc66 \ud835\udf15\ud835\udc66 \ud835\udf15\ud835\udc67 = \ud835\udf15\ud835\udc65 \ud835\udf15\ud835\udc67 . This makes the derivatives \ud835\udf15\u2113\ud835\udc61/\ud835\udf15\ud835\udf03 into row vectors so that gradient descent is \ud835\udf03 \u2190 \ud835\udf03 \u2212 (\ud835\udf15\u2113\ud835\udc61/\ud835\udf15\ud835\udf03)\u22a4.\nAlgorithms using a Kalman filter on \ud835\udf03 also4 rely on this derivative \ud835\udf15\u2113\ud835\udc61\ud835\udf15\ud835\udf03 (see [Hay04, Jae02] for the case of recurrent networks). So any efficient way of estimating this derivative can be fed, in turn, to a Kalman-type algorithm.\nAlgorithms suggested to train hidden Markov models online (e.g., [Cap11], based on expectation-maximization instead of gradient descent) share the same algebraic structure and suffer from the same problem."
        },
        {
            "heading": "1 The NoBackTrack algorithm",
            "text": ""
        },
        {
            "heading": "1.1 The rank-one trick: an expectation-preserving reduction",
            "text": "We propose to build an approximation ?\u0303?(\ud835\udc61) of \ud835\udc3a(\ud835\udc61) with a more sustainable algorithmic cost; ?\u0303?(\ud835\udc61) will be random with the property E?\u0303?(\ud835\udc61) = \ud835\udc3a(\ud835\udc61) for all \ud835\udc61. Then the stochastic gradient (5) based on ?\u0303?(\ud835\udc61) will introduce noise, but no bias, on the learning of \ud835\udf03: the average change in \ud835\udf03 after a large number of time steps will reflect the true gradient direction. (This is true only if the noises on ?\u0303?(\ud835\udc61) at different times \ud835\udc61 are sufficiently decorrelated. This is the case if the dynamical system (1) is sufficiently ergodic.) Such unbiasedness does not hold, for instance, if the gradient estimate is simply projected onto the nearest small-rank or diagonal plus small-rank approximation.5\nThe construction of an unbiased ?\u0303? is based on the following \u201crank-one trick\u201d.\nProposition 1 (Rank-one trick). Given a decomposition of a matrix \ud835\udc34 as a sum of rank-one outer products, \ud835\udc34 = \u2211\ufe00 \ud835\udc56 \ud835\udc63\ud835\udc56\ud835\udc64 \u22a4 \ud835\udc56 , and independent uniform random signs \ud835\udf00\ud835\udc56 \u2208 {\u22121, 1}, then\n\ud835\udc34 := ( \u2211\ufe00 \ud835\udc56\ud835\udf00\ud835\udc56\ud835\udc63\ud835\udc56) (\ufe01\u2211\ufe00 \ud835\udc57\ud835\udf00\ud835\udc57\ud835\udc64\ud835\udc57 )\ufe01\u22a4\n(7)\nsatisfies E\ud835\udc34 = \u2211\ufe01 \ud835\udc56 \ud835\udc63\ud835\udc56\ud835\udc64 \u22a4 \ud835\udc56 = \ud835\udc34 (8)\nthat is, \ud835\udc34 is an expectation-preserving rank-one approximation of \ud835\udc34. Moreover, one can minimize the variance of \ud835\udc34 by taking advantage of additional degrees of freedom in this decomposition, namely, one may first replace \ud835\udc63\ud835\udc56 and \ud835\udc64\ud835\udc56 with \ud835\udf0c\ud835\udc56\ud835\udc63\ud835\udc56 and \ud835\udc64\ud835\udc56/\ud835\udf0c\ud835\udc56 for any \ud835\udf0c\ud835\udc56 \u2208 R*. The choice of \ud835\udf0c\ud835\udc56 which yields minimal variance of \ud835\udc34 is when the norms of \ud835\udc63\ud835\udc56 and \ud835\udc64\ud835\udc56 become equal, namely, \ud835\udf0c\ud835\udc56 = \u221a\ufe00 \u2016\ud835\udc64\ud835\udc56\u2016 / \u2016\ud835\udc63\ud835\udc56\u2016.\n4One may use Kalman filtering either on \ud835\udf03 alone or on the pair (\ud835\udf03, \u210e). In the first case, \ud835\udf15\u2113\ud835\udc61 \ud835\udf15\ud835\udf03\nis explicitly needed. In the second case, all the information about how \ud835\udf03 influences the current state \u210e(\ud835\udc61) is contained in the covariance between \ud835\udf03 and \u210e, which the algorithm must maintain, and which is as costly as maintaining \ud835\udc3a(\ud835\udc61) above.\n5We tried such methods first, with less satisfying results. In practice, consecutive projections tend to interact badly and reduce too much the older contributions to the gradient.\nThe proof of the first statement is immediate. The statement about minimizing variance is proven in Appendix A. Minimizing variance thanks to \ud835\udf0c\ud835\udc56 is quite important in practice, see Section 1.3. The rank-one trick also extends to tensors of arbitrary order; this may be useful in more complex situations.6 The rank-one reduction \ud835\udc34 depends, not only on the value of \ud835\udc34, but also on the way \ud835\udc34 is decomposed as a sum of rank-one terms. In the applications to recurrent networks below, there is a natural such choice.7\nWe use this reduction operation at each step of the dynamical system, to build an approximation ?\u0303? of \ud835\udc3a. A key property is that the evolution equation (4) satisfied by \ud835\udc3a is affine, so that if ?\u0303?(\ud835\udc61) is an unbiased estimate of \ud835\udc3a(\ud835\udc61), then \ud835\udf15\ud835\udc53(\u210e(\ud835\udc61),\ud835\udc65(\ud835\udc61),\ud835\udf03)\ud835\udf15\u210e ?\u0303?(\ud835\udc61) + \ud835\udf15\ud835\udc53(\u210e(\ud835\udc61),\ud835\udc65(\ud835\udc61),\ud835\udf03) \ud835\udf15\ud835\udf03 is an unbiased estimate of \ud835\udc3a(\ud835\udc61 + 1).\nThis leads to the NoBackTrack algorithm (Euclidean version) described in Algorithm 1. At each step, this algorithm maintains an approximation of \ud835\udc3a as\n?\u0303? = \ud835\udc63?\u0304?\u22a4+ \u2211\ufe01\n\ud835\udc56\n\ud835\udc52\ud835\udc56\ud835\udc64 \u22a4 \ud835\udc56 (9)\nwhere \ud835\udc52\ud835\udc56 is the \ud835\udc56-th basis vector in space \u210e, and \ud835\udc64\ud835\udc56 := \ud835\udf15\ud835\udc53\ud835\udc56\ud835\udf15\ud835\udf03 \u22a4 are sparse vectors.\nTo understand this structure, say that ?\u0303?(\ud835\udc61 \u2212 1) = \ud835\udc63?\u0304?\u22a4 is a rank-one unbiased approximation of \ud835\udc3a(\ud835\udc61\u2212 1). Then the evolution equation (4) for \ud835\udc3a yields (\ufe01 \ud835\udf15\ud835\udc53 \ud835\udf15\u210e )\ufe01 (\ufe01 \ud835\udc63?\u0304?\u22a4 )\ufe01 + \ud835\udf15\ud835\udc53\ud835\udf15\ud835\udf03 = (\ufe01 \ud835\udf15\ud835\udc53 \ud835\udf15\u210e\ud835\udc63 )\ufe01 ?\u0304?\u22a4+ \u2211\ufe00 \ud835\udc56 \ud835\udc52\ud835\udc56 \ud835\udf15\ud835\udc53\ud835\udc56 \ud835\udf15\ud835\udf03 as an approximation of ?\u0303?(\ud835\udc61). This new approximation is not rank-one any more, but it can be used to perform a gradient step on \ud835\udf03, and then reduced to a rank-one approximation before the next time step.\nNote that handling \ud835\udf15\ud835\udc53\ud835\udc56\ud835\udf15\ud835\udf03 is usually cheap: in many situations, only a small subset of the parameter \ud835\udf03 directly influences each component \u210e\ud835\udc56(\ud835\udc61 + 1) given \u210e(\ud835\udc61), so that for each component \ud835\udc56 of the state space, \ud835\udf15\ud835\udc53\ud835\udc56\ud835\udf15\ud835\udf03 has few non-zero components. For instance, for a recurrent neural network with activities\n6The most symmetric way to do this is to use complex roots of unity, for instance, \u2211\ufe00\n\ud835\udc56 \ud835\udc62\ud835\udc56\u2297 \ud835\udc63\ud835\udc56 \u2297 \ud835\udc64\ud835\udc56 = ERe (\ufe01 ( \u2211\ufe00\n\ud835\udc56 \ud835\udf01\ud835\udc56\ud835\udc62\ud835\udc56)( \u2211\ufe00 \ud835\udc57 \ud835\udf01\ud835\udc57\ud835\udc63\ud835\udc57)( \u2211\ufe00 \ud835\udc58 \ud835\udf01\ud835\udc58\ud835\udc64\ud835\udc58) )\ufe01 where each \ud835\udf01\ud835\udc56 is taken independently at\nrandom among {1, e\u00b12\ud835\udc56\ud835\udf0b/3}. This involves complex numbers but there is no need to complexify the original dynamical system (1). Another, complex-free possibility is to apply the rank-one trick recursively to tensors of smaller order, for instance, \u2211\ufe00 \ud835\udc56 \ud835\udc62\ud835\udc56\u2297\ud835\udc63\ud835\udc56\u2297\ud835\udc64\ud835\udc56\u2297\ud835\udc65\ud835\udc56 =\u2211\ufe00\n\ud835\udc56 (\ud835\udc62\ud835\udc56 \u2297 \ud835\udc63\ud835\udc56)\u2297 (\ud835\udc64\ud835\udc56 \u2297 \ud835\udc65\ud835\udc56) = E\n[\ufe01 ( \u2211\ufe00\n\ud835\udc56 \ud835\udf00\ud835\udc56\ud835\udc62\ud835\udc56 \u2297 \ud835\udc63\ud835\udc56)( \u2211\ufe00 \ud835\udc57 \ud835\udf00\ud835\udc57\ud835\udc64\ud835\udc57 \u2297 \ud835\udc65\ud835\udc57) ]\ufe01\nand then apply independent rank-one decompositions in turn to \u2211\ufe00 \ud835\udc56 \ud835\udf00\ud835\udc56\ud835\udc62\ud835\udc56 \u2297 \ud835\udc63\ud835\udc56 and to \u2211\ufe00 \ud835\udc57\n\ud835\udf00\ud835\udc57\ud835\udc64\ud835\udc57 \u2297 \ud835\udc65\ud835\udc57 . 7The rank-one trick may also be performed using random Gaussian vectors, namely \ud835\udc34 = E[\ud835\udf09(\ud835\udf09\u22a4\u03a3\u22121\ud835\udc34)] with \ud835\udf09 = \ud835\udca9 (0, \u03a3). This version does not depend on a chosen decomposition of \ud835\udc34, but depends on a choice of \u03a3. Variance can be much larger in this case: for instance, if \ud835\udc34 = \ud835\udc63\ud835\udc64\u22a4 is actually rank-one, then (\ud835\udf00\ud835\udc63)(\ud835\udf00\ud835\udc64\u22a4) = \ud835\udc63\ud835\udc64\u22a4 so that the rank-one trick with random signs is exact, whereas the Gaussian version yields (\ud835\udf09\ud835\udf09\u22a4\u03a3\u22121)\ud835\udc63\ud835\udc64\u22a4 which is correct only in expectation. This case is particularly relevant because we are going to apply a reduction at each time step, thus working on objects that stay close to rank-one. The generalization to tensors is also more cumbersome in the Gaussian case.\n\ud835\udc4e\ud835\udc56(\ud835\udc61) := sigm(\u210e\ud835\udc56(\ud835\udc61)) and evolution equation \u210e\ud835\udc56(\ud835\udc61 + 1) = \ud835\udc4f\ud835\udc56 + \u2211\ufe00\n\ud835\udc58 \ud835\udc5f\ud835\udc56\ud835\udc58\ud835\udc65\ud835\udc58(\ud835\udc61) +\u2211\ufe00 \ud835\udc57 \ud835\udc4a\ud835\udc57\ud835\udc56\ud835\udc4e\ud835\udc57(\ud835\udc61), the derivative of \u210e\ud835\udc56(\ud835\udc61 + 1) with respect to the parameter \ud835\udf03 = (\ud835\udc4f, \ud835\udc5f, \ud835\udc4a ) only involves the parameters \ud835\udc4f\ud835\udc56, \ud835\udc5f\ud835\udc56\ud835\udc58, \ud835\udc4a\ud835\udc57\ud835\udc56 of unit \ud835\udc56. In such situations, the total cost of computing and storing all the \ud835\udc64\ud835\udc56\u2019s is of the same order as the cost of computing \u210e(\ud835\udc61 + 1) itself. See Section 1.3 for details on this example.\nAfter the reduction step of Algorithm 1, ?\u0304? may be interpreted as a \u201csearch direction\u201d in parameter space \ud835\udf03, while \ud835\udc63 is an estimate of the effect on the current state \u210e(\ud835\udc61) of changing \ud835\udf03 in the direction ?\u0304?. The search direction ?\u0304? evolves stochastically, but not fully at random, over time, so that on average \ud835\udc63?\u0304?\u22a4 is a fair estimate of the actual influence of the parameter \ud835\udf03.\nNote that in Algorithm 1, the non-recurrent output parameters \ud835\udf19 are trained according to their exact gradient. The rank-one trick is used only for the recurrent part of the system.\nBy construction, at each step of Algorithm 1, the quantity ?\u0303?\ud835\udc61 := \ud835\udc63?\u0304?\u22a4+\u2211\ufe00 \ud835\udc56 \ud835\udc52\ud835\udc56\ud835\udc64 \u22a4 \ud835\udc56 satisfies E?\u0303?\ud835\udc61 = \ud835\udf15\u210e(\ud835\udc61) \ud835\udf15\ud835\udf03 . However, since the value of \ud835\udf03 changes along the algorithm, we must be careful about the meaning of this statement. Intuitively, this derivative with respect to \ud835\udf03 is taken along the actual trajectory of parameters \ud835\udf03\ud835\udc61 realized by the algorithm.\nMore formally, let \ud835\udf03 = (\ud835\udf030, . . . , \ud835\udf03\ud835\udc61, . . .) be any sequence of parameters. Let \ud835\udc53 be any function depending on this sequence \ud835\udf03, such as the state of the system at time \ud835\udc61 (all functions considered below will depend only on a finite initial segment of \ud835\udf03). Define \ud835\udf03 + \ud835\udf00 := (\ud835\udf030 + \ud835\udf00, . . . , \ud835\udf03\ud835\udc61 + \ud835\udf00, . . .) and say that \ud835\udc53 has derivative \ud835\udf15\ud835\udc53\ud835\udf15\ud835\udf03 with respect to \ud835\udf03 if \ud835\udc53(\ud835\udf03 + \ud835\udf00) = \ud835\udc53(\ud835\udf03) + \ud835\udf00 \ud835\udf15\ud835\udc53 \ud835\udf15\ud835\udf03 + \ud835\udc42(\ud835\udf00\n2) for small \ud835\udf00.\nThanks to this convention, the evolution equation (4) for the evolution of \ud835\udc3a(\ud835\udc61) holds for any sequence of parameters \ud835\udf03, with \ud835\udc3a(\ud835\udc61) defined as \ud835\udf15\u210e(\ud835\udc61)\ud835\udf15\ud835\udf03 . The following statement is then easily proved by induction.\nProposition 2 (Unbiased rank-one gradient estimate for dynamical systems). At each time step \ud835\udc61, the quantity ?\u0303?\ud835\udc61 := \ud835\udc63?\u0304?\u22a4 +\u2211\ufe00\n\ud835\udc56 \ud835\udc52\ud835\udc56\ud835\udc64 \u22a4 \ud835\udc56 from Algorithm 1 is an unbiased estimate of the gradient of the state\nof the system with respect to the parameter:\nE?\u0303?\ud835\udc61 = \ud835\udf15\u210e(\ud835\udc61)\n\ud835\udf15\ud835\udf03 (19)\nwhere \ud835\udf03 is the sequence of parameters produced by the algorithm.\nIn particular, for learning rates \ud835\udf02 tending to 0, the parameter evolves slowly so that the derivative \ud835\udf15\u210e(\ud835\udc61)\ud835\udf15\ud835\udf03 is close to a derivative with respect to the current value \ud835\udf03\ud835\udc61 of the parameter. Thus, in this regime, \ud835\udf15\u210e(\ud835\udc61)\ud835\udf15\ud835\udf03 tends to \ud835\udf15\u210e(\ud835\udc61) \ud835\udf15\ud835\udf03\ud835\udc61\n, and since ?\u0303?\ud835\udc61 is an unbiased estimate of \ud835\udc3a\ud835\udc61, the situation gets closer and closer to an ordinary stochastic gradient descent if \ud835\udf02 is small. Presumably\nParameters: \u210e(0) (initial state), \ud835\udf030, \ud835\udf190 (initial value of the internal and output parameters), \ud835\udf02\ud835\udc61 (learning rate scheme); Data: \ud835\udc65(\ud835\udc61) (input signal), \ud835\udc66(\ud835\udc61) (output signal); Maintains: \u210e(\ud835\udc61) (current state), \ud835\udf03, \ud835\udf19 (internal and output parameters), \ud835\udc63 (column vector of size dim \u210e), ?\u0304? (column vector of size dim \ud835\udf03), \ud835\udc64\ud835\udc56 (sparse column vectors of size dim \ud835\udf03) for \ud835\udc56 = 1, . . . , dim \u210e. Initialization: \ud835\udf03 \u2190 \ud835\udf030, \ud835\udf19\u2190 \ud835\udf190, \ud835\udc63 \u2190 0, ?\u0304? \u2190 0, \ud835\udc64\ud835\udc56 \u2190 0; for \ud835\udc61 = 0 to end-of-time do\nObservation step: Compute prediction \ud835\udc66(\ud835\udc61) = \ud835\udc4c (\u210e(\ud835\udc61), \ud835\udf19) from current state \u210e(\ud835\udc61). Observe \ud835\udc66(\ud835\udc61) and incur loss \u2113\ud835\udc61(\ud835\udc66(\ud835\udc61), \ud835\udc66(\ud835\udc61)). Update step: Compute derivative of loss with respect to output parameters, \ud835\udf15\u2113\ud835\udc61\ud835\udf15\ud835\udf19 = \ud835\udf15\u2113\ud835\udc61(\ud835\udc4c (\u210e(\ud835\udc61),\ud835\udf19),\ud835\udc66(\ud835\udc61)) \ud835\udf15\ud835\udf19 , and update output parameters:\n\ud835\udf19\u2190 \ud835\udf19\u2212 \ud835\udf02\ud835\udc61 \ud835\udf15\u2113\ud835\udc61 \ud835\udf15\ud835\udf19\n\u22a4 (10)\nCompute derivative of loss with respect to current state,\n\ud835\udc3b \u2190 \ud835\udf15\u2113\ud835\udc61 (\ud835\udc4c (\u210e(\ud835\udc61), \ud835\udf19), \ud835\udc66(\ud835\udc61)) \ud835\udf15\u210e\n(11)\nUpdate internal parameters \ud835\udf03:\n\ud835\udf03 \u2190 \ud835\udf03 \u2212 \ud835\udf02\ud835\udc61 (\ud835\udc3b\ud835\udc63)?\u0304? \u2212 \ud835\udf02\ud835\udc61 \u2211\ufe00 \ud835\udc56\ud835\udc3b\ud835\udc56\ud835\udc64\ud835\udc56 (12)\n(this is a gradient step \ud835\udf03 \u2190 \ud835\udf03 \u2212 \ud835\udf02\ud835\udc61(\ud835\udc3b?\u0303?)\u22a4 using the current gradient estimate ?\u0303? from (9)). Reduction step: Draw independent uniform random signs \ud835\udf00\ud835\udc56 = \u00b11. Let \ud835\udc52\ud835\udc56 be the \ud835\udc56-th basis vector in state space. Compute \ud835\udf0c := \u221a\ufe00 \u2016?\u0304?\u2016 / \u2016\ud835\udc63\u2016 and \ud835\udf0c\ud835\udc56 := \u221a\ufe00 \u2016\ud835\udc64\ud835\udc56\u2016 / \u2016\ud835\udc52\ud835\udc56\u2016 for each \ud835\udc56. Update\n\ud835\udc63 \u2190 \ud835\udf0c\ud835\udc63 + \u2211\ufe00\n\ud835\udc56\ud835\udf00\ud835\udc56\ud835\udf0c\ud835\udc56\ud835\udc52\ud835\udc56 (13) ?\u0304? \u2190 ?\u0304?/\ud835\udf0c + \u2211\ufe00 \ud835\udc56\ud835\udf00\ud835\udc56\ud835\udc64\ud835\udc56/\ud835\udf0c\ud835\udc56 (14) \ud835\udc64\ud835\udc56 \u2190 0 (15)\nTransition step: Observe new value of input signal \ud835\udc65(\ud835\udc61) and compute next state \u210e(\ud835\udc61 + 1) = \ud835\udc53(\u210e(\ud835\udc61), \ud835\udc65(\ud835\udc61), \ud835\udf03). Update estimate ?\u0303?:\n\ud835\udc63 \u2190 \ud835\udf15\ud835\udc53(\u210e(\ud835\udc61), \ud835\udc65(\ud835\udc61), \ud835\udf03) \ud835\udf15\u210e \ud835\udc63 (16)\n\ud835\udc64\ud835\udc56 \u2190 \ud835\udf15\ud835\udc53\ud835\udc56(\u210e(\ud835\udc61), \ud835\udc65(\ud835\udc61), \ud835\udf03)\n\ud835\udf15\ud835\udf03\n\u22a4 (17)\n\ud835\udc61\u2190 \ud835\udc61 + 1 (18)\nend Algorithm 1: NoBackTrack algorithm, Euclidean version.\nthis happens whenever the learning rate is small enough for \ud835\udf03 not to change too much within a time range corresponding to a \u201cforgetting time\u201d of the dynamical system, although more work is needed here.\n1.2 Feeding the gradient estimate to an extended Kalman filter\nThe Euclidean version of the NoBackTrack algorithm presented in Algorithm 1 is not enough to obtain good performance fast. Online estimation often yields best results when using filters from the Kalman family. We refer to [Hay04, Jae02] for a discussion of Kalman filtering applied to recurrent neural networks.\nKalman-based approaches rely on a covariance matrix estimate \ud835\udc43 (\ud835\udc61) on \ud835\udf03. After observing \ud835\udc66(\ud835\udc61), the parameter \ud835\udf03 gets adjusted via8\n\ud835\udf03 \u2190 \ud835\udf03 \u2212 \ud835\udc43 (\ud835\udc61)\ud835\udf15\u2113\ud835\udc61 \ud835\udf15\ud835\udf03\n\u22a4 (20)\nwhere the derivative of the loss with respect to \ud835\udf03 is computed, as above, via the product of the derivative of the loss with respect to the current state \u210e(\ud835\udc61), and the derivative \ud835\udc3a(\ud835\udc61) = \ud835\udf15\u210e(\ud835\udc61)\ud835\udf15\ud835\udf03 .\nMaintaining a full covariance matrix on \ud835\udf03 is usually too costly. However, having a good approximation of \ud835\udc43 (\ud835\udc61) is not as critical as having a good approximation of \ud835\udf15\u2113\ud835\udc61\ud835\udf15\ud835\udf03 . Indeed, given an unbiased approximation of \ud835\udf15\u2113\ud835\udc61 \ud835\udf15\ud835\udf03 , any symmetric positive definite matrix \ud835\udc43 (\ud835\udc61) which changes slowly enough in time will yield an unbiased trajectory for \ud835\udf03.\nThus, we will use more aggressive matrix reduction techniques on \ud835\udc43 (\ud835\udc61), such as block-diagonal (as in [Hay04]) or quasi-diagonal [Oll15a] approximations. In our setting, the main point of using the covariance matrix is to get both a sensible scaling of the learning rate for each component of \ud835\udf03, and reparametrization-invariance properties [Oll15a].\nIn Kalman filtering, in the case when the \u201ctrue\u201d underlying parameter \ud835\udf03 in the extended Kalman filter is constant, it is better to work with the inverse covariance matrix \ud835\udc3d(\ud835\udc61) := \ud835\udc43 (\ud835\udc61)\u22121, and the extended Kalman filter on \ud835\udf03 can be rewritten as\n\ud835\udc3d(\ud835\udc61)\u2190 \ud835\udc3d(\ud835\udc61\u2212 1) + \ud835\udf15\ud835\udc66\ud835\udc61 \ud835\udf15\ud835\udf03\n\u22a4 \ud835\udc3c\ud835\udc61\n\ud835\udf15\ud835\udc66\ud835\udc61 \ud835\udf15\ud835\udf03\n(21)\n\ud835\udf03 \u2190 \ud835\udf03 \u2212 \ud835\udc3d(\ud835\udc61)\u22121 \ud835\udf15\u2113\ud835\udc61 \ud835\udf15\ud835\udf03\n\u22a4 (22)\nwhere \ud835\udc66\ud835\udc61 is the prediction at time \ud835\udc61, where both \ud835\udf15\ud835\udc66\ud835\udc61\ud835\udf15\ud835\udf03 and \ud835\udf15\u2113\ud835\udc61 \ud835\udf15\ud835\udf03 can be computed from \u210e(\ud835\udc61) via the chain rule if \ud835\udc3a(\ud835\udc61) = \ud835\udf15\u210e(\ud835\udc61)\ud835\udf15\ud835\udf03 is known, and where \ud835\udc3c\ud835\udc61 is the 8Indeed, in standard Kalman filter notation, one has \ud835\udc3e\ud835\udc61\ud835\udc45 = \ud835\udc43\ud835\udc61\ud835\udc3b\u22a4\ud835\udc61 , so that for the quadratic loss \u2113 = 12 (\ud835\udc66 \u2212 \ud835\udc66) \u22a4\ud835\udc45\u22121(\ud835\udc66 \u2212 \ud835\udc66) (log-loss of a Gaussian model with coraviance matrix \ud835\udc45), the Kalman update for \ud835\udf03 is equivalent to \ud835\udf03 \u2190 \ud835\udf03 \u2212 \ud835\udc43 (\ud835\udc61) \ud835\udf15\u2113\ud835\udc61 \ud835\udf15\ud835\udf03 \u22a4.\nFisher information matrix of \ud835\udc66\ud835\udc61 as a probability distribution on \ud835\udc66\ud835\udc61. (For exponential families this is just the Hessian \u2212\ud835\udf152\u2113\ud835\udc61\n\ud835\udf15\ud835\udc662\ud835\udc61 of the loss with respect\nto the prediction). This is the so-called information filter, because \ud835\udc3d(\ud835\udc61) approximates the Fisher information matrix on \ud835\udf03 given the observations up to time \ud835\udc61. This is basically a natural gradient descent on \ud835\udf03.\nThis approach is summarized in Algorithm 2, which we describe more loosely since matrix approximation schemes may depend on the application.\nAlgorithm 2 uses a decay factor (1\u2212\ud835\udefe\ud835\udc61) on the inverse covariance matrices to limit the influence of old computations made with outdated values of \ud835\udf03. The factor \ud835\udefe\ud835\udc61 also controls the effective learning rate of the algorithm, since, in line with Kalman filtering, we have not included a learning rate for the update of \ud835\udf03 (namely, \ud835\udf02\ud835\udc61 = 1): the step size is adapted via the magnitude of \ud835\udc3d . For \ud835\udefe\ud835\udc61 = 0, \ud835\udc3d grows linearly so that step size is \ud835\udc42(1/\ud835\udc61).\nMoreover, we have included a regularization term \u039b for matrix inversion; in the Bayesian interpretation of Kalman filtering this corresponds to having a Gaussian prior on the parameters with inverse covariance matrix \u039b. This is important to avoid fast divergence in the very first steps.\nIn practice we have used \ud835\udefe\ud835\udc61 = \ud835\udc42(1/ \u221a\n\ud835\udc61) and \u039b = (dim \u210e). Id. The simplest and fastest way to approximate the Fisher matrix in Algorithm 2 is the outer product approximation (see discussion in [Oll15a]), which we have used in the experiments below. Namely, we simply use \ud835\udc3c\ud835\udc61 \u2190 \ud835\udf15\u2113\ud835\udc61\ud835\udf15\ud835\udc66\ud835\udc61 \u22a4\ud835\udf15\u2113\ud835\udc61 \ud835\udf15\ud835\udc66\ud835\udc61 so that the updates to \ud835\udc3d\ud835\udf19 and \ud835\udc3d\ud835\udf03 simplify and become rank-one outer product updates using the gradient of the loss, namely, \ud835\udc3d\ud835\udf03 \u2190 (1\u2212 \ud835\udefe\ud835\udc61)\ud835\udc3d\ud835\udf03 + \ud835\udf15\u2113\ud835\udc61\ud835\udf15\ud835\udf03 \u22a4\ud835\udf15\u2113\ud835\udc61 \ud835\udf15\ud835\udf03 and likewise for \ud835\udf19. Here the derivative \ud835\udf15\u2113\ud835\udc61\ud835\udf15\ud835\udf03 is estimated from the current gradient estimate ?\u0303?.\nFor the matrix reductions, we have used a block-wise quasi-diagonal reduction as in [Oll15a]. This makes the cost of handling the various matrices linear in the number of parameters."
        },
        {
            "heading": "1.3 Examples",
            "text": "Let us show how Algorithm 1 works out on explicit examples.\nThe importance of norm rescaling. Let us first consider a simple dynamical system which illustrates the importance of rescaling the norms by \ud835\udf0c and \ud835\udf0c\ud835\udc56. Let 0 < \ud835\udefc < 1 and consider the system\n\u210e(\ud835\udc61 + 1) = (1\u2212 \ud835\udefc)\u210e(\ud835\udc61) + \ud835\udf03 (28)\nwith both \u210e and \ud835\udf03 in R\ud835\udc5b. This quickly converges towards \ud835\udf03/\ud835\udefc. We have \ud835\udf15\ud835\udc53/\ud835\udf15\u210e = (1 \u2212 \ud835\udefc) Id and \ud835\udf15\ud835\udc53/\ud835\udf15\ud835\udf03 = Id and so \ud835\udf15\ud835\udc53\ud835\udc56/\ud835\udf15\ud835\udf03\u22a4 = \ud835\udc52\ud835\udc56, the \ud835\udc56-th basis vector. Then the reduction and transition steps in Algorithm 1, if the scalings\nParameters: \u210e(0) (initial state), \ud835\udf030, \ud835\udf190 (initial value of the parameters), 0 6 \ud835\udefe\ud835\udc61 < 1 (covariance decay parameter scheme), \u039b\ud835\udf19 and \u039b\ud835\udf03 (inverse covariance matrix of the prior on the parameters); Maintains: Same as Algorithm 1, plus a representation of matrices \ud835\udc3d\ud835\udf03 and \ud835\udc3d\ud835\udf19 allowing for efficient inversion; Subroutines: A matrix reduction method MatrixReduce(\ud835\udc40) which only evaluates a small number of entries of its argument \ud835\udc40 and returns an approximation of \ud835\udc40 that can be inverted efficiently; A routine FisherApprox(\ud835\udc66\ud835\udc61, \ud835\udc66\ud835\udc61) which returns either a positive definite approximation of the Fisher information matrix of \ud835\udc66\ud835\udc61 as a probability distribution on \ud835\udc66\ud835\udc61, or a positive definite approximation of the Hessian \u2212\ud835\udf152\u2113\ud835\udc61\n\ud835\udf15\ud835\udc662\ud835\udc61 of the loss with respect to the prediction.\nInitialization: as in Algorithm 1, and \ud835\udc3d\ud835\udf03 \u2190 0, \ud835\udc3d\ud835\udf19 \u2190 0; for \ud835\udc61 = 0 to end-of-time do\nObservation step: as in Algorithm 1. Update step: Compute approximate Fisher information matrix w.r.t. \ud835\udc66\ud835\udc61:\n\ud835\udc3c\ud835\udc61 \u2190 FisherApprox(\ud835\udc66\ud835\udc61, \ud835\udc66\ud835\udc61) (23)\nCompute derivative of prediction and of loss with respect to output parameters, \ud835\udf15\ud835\udc66\ud835\udc61\ud835\udf15\ud835\udf19 and \ud835\udf15\u2113\ud835\udc61 \ud835\udf15\ud835\udf19 . Update inverse covariance matrix of output parameters \ud835\udf19:\n\ud835\udc3d\ud835\udf19 \u2190 (1\u2212 \ud835\udefe\ud835\udc61)\ud835\udc3d\ud835\udf19 + MatrixReduce (\ufe03\n\ud835\udf15\ud835\udc66\ud835\udc61 \ud835\udf15\ud835\udf19\n\u22a4 \ud835\udc3c\ud835\udc61\n\ud835\udf15\ud835\udc66\ud835\udc61 \ud835\udf15\ud835\udf19\n)\ufe03 (24)\nand update output parameters:\n\ud835\udf19\u2190 \ud835\udf19\u2212 (\ud835\udc3d\ud835\udf19 + \u039b\ud835\udf19)\u22121 \ud835\udf15\u2113\ud835\udc61 \ud835\udf15\ud835\udf19\n\u22a4 (25)\nCompute derivative \ud835\udf15\ud835\udc66\ud835\udc61\ud835\udf15\u210e of prediction with respect to current state \u210e(\ud835\udc61). Update inverse covariance matrix of internal parameters \ud835\udf03:\n\ud835\udc3d\ud835\udf03 \u2190 (1\u2212 \ud835\udefe\ud835\udc61)\ud835\udc3d\ud835\udf03 + MatrixReduce (\ufe03\n?\u0303?\u22a4 \ud835\udf15\ud835\udc66\ud835\udc61 \ud835\udf15\u210e\n\u22a4 \ud835\udc3c\ud835\udc61\n\ud835\udf15\ud835\udc66\ud835\udc61 \ud835\udf15\u210e ?\u0303?\n)\ufe03 (26)\nand update internal parameters \ud835\udf03:\n\ud835\udf03 \u2190 \ud835\udf03 \u2212 (\ud835\udc3d\ud835\udf03 + \u039b\ud835\udf03)\u22121\ud835\udeff\ud835\udf03 (27)\nwhere \ud835\udeff\ud835\udf03 := (\ud835\udc3b\ud835\udc63)?\u0304? \u2212 \u2211\ufe00\n\ud835\udc56\ud835\udc3b\ud835\udc56\ud835\udc64\ud835\udc56 is the update of \ud835\udf03 from Algorithm 1. Reduction step: Same as in Algorithm 1, but the norms used to compute \ud835\udf0c and \ud835\udf0c\ud835\udc56 are derived from \ud835\udc3d\u22121\ud835\udf03 (cf. Appendix B). Transition step: Same as in Algorithm 1.\nend Algorithm 2: NoBackTrack algorithm, Kalman version.\n\ud835\udf0c are not used, amount to\n\ud835\udc63\ud835\udc61+1 = (1\u2212 \ud835\udefc) (\ud835\udc63\ud835\udc61 + \u2211\ufe00\n\ud835\udc56\ud835\udf00\ud835\udc56(\ud835\udc61)\ud835\udc52\ud835\udc56) (29) ?\u0304?\ud835\udc61+1 = ?\u0304?\ud835\udc61 + \u2211\ufe00 \ud835\udc56\ud835\udf00\ud835\udc56(\ud835\udc61)\ud835\udc52\ud835\udc56 (30)\nwith the \ud835\udf00\ud835\udc56(\ud835\udc61) independent at each step \ud835\udc61. The resulting estimate of \ud835\udf15\u210e(\ud835\udc61)/\ud835\udf15\ud835\udf03 is unbiased, but its variance grows linearly with time. Indeed, the dynamics of \ud835\udc63\ud835\udc61 is stationary thanks to the factor (1 \u2212 \ud835\udefc), but the dynamics of ?\u0304?\ud835\udc61 is purely additive so that \ud835\udc64\ud835\udc61 is just a \ud835\udc51-dimensional random walk. On the other hand, if rescaling by \ud835\udf0c is used, then both \ud835\udc63 and ?\u0304? get rescaled by \u221a 1\u2212 \ud835\udefc at each step,9 so that their dynamics becomes stationary and variance does not grow.\nRecurrent neural networks. The next example is a standard recurrent neural network (RNN). The state of the system is the set of pre-activation values \u210e\ud835\udc56(\ud835\udc61), and the activities are \ud835\udc4e\ud835\udc56(\ud835\udc61) := \ud835\udf0e(\u210e\ud835\udc56(\ud835\udc61)) where \ud835\udf0e is some activation function such as tanh or sigmoid. The recurrent dynamics of \u210e is\n\u210e\ud835\udc56(\ud835\udc61 + 1) = \u2211\ufe01 \ud835\udc57\u2192\ud835\udc56 \ud835\udc4a\ud835\udc57\ud835\udc56 \ud835\udf0e(\u210e\ud835\udc57(\ud835\udc61)) + \u2211\ufe01 \ud835\udc59 \ud835\udc5f\ud835\udc59\ud835\udc56\ud835\udc65\ud835\udc59(\ud835\udc61) (31)\nin which \u210e(\ud835\udc61), \u210e(\ud835\udc61+1) \u2208 R\ud835\udc5b, (\ud835\udc4a\ud835\udc57\ud835\udc56)\ud835\udc57\u2192\ud835\udc56 are a set of weights defining a graph on \ud835\udc5b nodes, and (\ud835\udc5f\ud835\udc59\ud835\udc56)(\ud835\udc56,\ud835\udc59) are the input weights.10 The parameter is \ud835\udf03 = (\ud835\udc4a, \ud835\udc5f). We hereby omit the output part of the network,11 as it is of no use to analyze the estimation of \ud835\udf15\u210e(\ud835\udc61)/\ud835\udf15\ud835\udf03.\n(We have chosen the pre-activation values \u210e, rather than the activities \ud835\udc4e = \ud835\udf0e(\u210e), as the state of the system. This results in simpler expressions, especially for the input weights \ud835\udc5f.)\nThus, the function \ud835\udc53 defining the dynamical system for the variable \u210e is (31). The derivatives of \ud835\udc53 are immediately computed as \ud835\udf15\ud835\udc53\ud835\udc56/\ud835\udf15\ud835\udc4a\ud835\udc57\ud835\udc56 = \ud835\udf0e(\u210e\ud835\udc57), \ud835\udf15\ud835\udc53\ud835\udc56/\ud835\udf15\ud835\udc5f\ud835\udc59\ud835\udc56 = \ud835\udc65\ud835\udc59, \ud835\udf15\ud835\udc53\ud835\udc56/\ud835\udf15\u210e\ud835\udc57 = \ud835\udc4a\ud835\udc57\ud835\udc56 \ud835\udf0e\u2032(\u210e\ud835\udc57), and all other derivatives are 0.\nAlgorithm 1 maintains, after the reduction step, an approximation \ud835\udf15\u210e(\ud835\udc61)\ud835\udf15\ud835\udf03 \u2248 \ud835\udc63(\ud835\udc61)?\u0304?(\ud835\udc61)\u22a4. We can decompose ?\u0304?(\ud835\udc61) = (?\u0304? (\ud835\udc61), \ud835\udc5f(\ud835\udc61)) into the components corresponding to the internal and input weights of the parameter \ud835\udf03 = (\ud835\udc4a, \ud835\udc5f), so that\n\ud835\udf15\u210e\ud835\udc56(\ud835\udc61) \ud835\udf15\ud835\udc4a\ud835\udc58\ud835\udc57 \u2248 \ud835\udc63\ud835\udc56(\ud835\udc61)?\u0304?\ud835\udc58\ud835\udc57(\ud835\udc61) (32) \ud835\udf15\u210e\ud835\udc56(\ud835\udc61) \ud835\udf15\ud835\udc5f\ud835\udc59\ud835\udc57 \u2248 \ud835\udc63\ud835\udc56(\ud835\udc61)\ud835\udc5f\ud835\udc59\ud835\udc57(\ud835\udc61). (33)\n9Proof: By induction one has \ud835\udc63 = ?\u0304? after the reduction step and \ud835\udc63 = (1\u2212 \ud835\udefc)?\u0304? after the transition step, and \ud835\udf0c = 1/ \u221a 1\u2212 \ud835\udefc.\n10Biases are omitted; they can be treated by the inclusion of an always-activated united \ud835\udc560 with \ud835\udc4e\ud835\udc560 (\ud835\udc61) \u2261 1.\n11The experiments below use a softmax output with output parameters \ud835\udf19, see Section 2.\nBy plugging the values of the partial derivatives of \ud835\udc53 into Algorithm 1, we find the following update equations for the value of \ud835\udc63, ?\u0304? and \ud835\udc5f right after the reduction step:\n\ud835\udc63\ud835\udc56(\ud835\udc61 + 1) = \ud835\udf0c \u2211\ufe01 \ud835\udc57\u2192\ud835\udc56 \ud835\udc4a\ud835\udc57\ud835\udc56 \ud835\udf0e \u2032(\u210e\ud835\udc57(\ud835\udc61)) \ud835\udc63\ud835\udc57(\ud835\udc61) + \ud835\udf00\ud835\udc56\ud835\udf0c\ud835\udc56 (34)\n?\u0304?\ud835\udc58\ud835\udc57(\ud835\udc61 + 0) = ?\u0304?\ud835\udc58\ud835\udc57(\ud835\udc61)\n\ud835\udf0c + \ud835\udf00\ud835\udc57 \ud835\udf0e(\u210e\ud835\udc58(\ud835\udc61)) \ud835\udf0c\ud835\udc57\n(35)\n\ud835\udc5f\ud835\udc59\ud835\udc57(\ud835\udc61 + 1) = \ud835\udc5f\ud835\udc59\ud835\udc57(\ud835\udc61)\n\ud835\udf0c + \ud835\udf00\ud835\udc57 \ud835\udc65\ud835\udc59(\ud835\udc61) \ud835\udf0c\ud835\udc57\n(36)\nwhere the \ud835\udf00\ud835\udc57 are independent symmetric binary random variables, taking values \u00b11 with probability 12 . Any non-zero choice of \ud835\udf0c\ud835\udc57 leads to an unbiased estimation, though the values are to be optimized as mentioned above.\nApplying this update has the same algorithmic cost as implementing one step (31) of the recurrent network itself.\nLeaky recurrent neural networks. To capture long-term dependencies, in the experiments below we also use a leaky RNN, obtained via the addition of a direct feedback term:\n\u210e\ud835\udc56(\ud835\udc61 + 1) = \ud835\udefc\ud835\udc56\u210e\ud835\udc56(\ud835\udc61) + \u2211\ufe01\n\ud835\udc59\n\ud835\udc5f\ud835\udc59\ud835\udc56\ud835\udc65\ud835\udc59(\ud835\udc61) + \u2211\ufe01\n\ud835\udc57\n\ud835\udc4a\ud835\udc57\ud835\udc56\ud835\udc4e\ud835\udc57(\ud835\udc61) \ud835\udc4e\ud835\udc57(\ud835\udc61) := \ud835\udf0e(\u210e\ud835\udc57(\ud835\udc61)) (37)\nwith \ud835\udefc\ud835\udc56 \u2208 [0; 1] for all \ud835\udc56. (See [Jae02] for similar models.) This feedback term reduces the impact of the vanishing gradient issue and keeps a longer memory of past inputs.\nThis only changes the derivative of \ud835\udc53\ud835\udc56 with respect to \u210e\ud835\udc57 , which becomes \ud835\udf15\ud835\udc53\ud835\udc56/\ud835\udf15\u210e\ud835\udc57 = \ud835\udc4a\ud835\udc57\ud835\udc56\ud835\udf0e\u2032(\u210e\ud835\udc57) + \ud835\udefc\ud835\udc56\ud835\udeff\ud835\udc56\ud835\udc57 . Consequently the update rules (35)\u2013(36) for ?\u0304? and \ud835\udc5f are unchanged, while the update of \ud835\udc63 becomes\n\ud835\udc63\ud835\udc56(\ud835\udc61 + 1) = \ud835\udf0c\ud835\udefc\ud835\udc56\ud835\udc63\ud835\udc56(\ud835\udc61) + \ud835\udf0c \u2211\ufe01 \ud835\udc57\u2192\ud835\udc56 \ud835\udc4a\ud835\udc57\ud835\udc56 \ud835\udf0e \u2032(\u210e\ud835\udc57(\ud835\udc61)) \ud835\udc63\ud835\udc57(\ud835\udc61) + \ud835\udf00\ud835\udc56\ud835\udf0c\ud835\udc56 (38)\nMultilayer recurrent neural networks. Let us now treat the case of a multilayer recurrent neural network with dynamics\n\u210e(1)(\ud835\udc61 + 1) = \ud835\udc53 (1)(\ud835\udc65(\ud835\udc61), \u210e(1)(\ud835\udc61), \ud835\udf031) (39) \u210e(2)(\ud835\udc61 + 1) = \ud835\udc53 (2)(\ud835\udc65(\ud835\udc61), \u210e(1)(\ud835\udc61 + 1), \u210e(2)(\ud835\udc61), \ud835\udf032) (40) ... (41) \u210e(\ud835\udc5b)(\ud835\udc61 + 1) = \ud835\udc53 (\ud835\udc5b)(\ud835\udc65(\ud835\udc61), \u210e(\ud835\udc5b\u22121)(\ud835\udc61 + 1), \u210e(\ud835\udc5b)(\ud835\udc61), \ud835\udf03\ud835\udc5b) (42)\nwhere each layer \u210e(\ud835\udc56) and \ud835\udc53 (\ud835\udc56) define an RNN as in (31) above. Directly applying the rank-one approximation to the function \ud835\udc53 = (\ud835\udc53 (1), \ud835\udc53 (2), . . . , \ud835\udc53 (\ud835\udc5b))\nwould be cumbersome: since the activity of a neuron of the \ud835\udc56-th layer at time \ud835\udc61 + 1 depends on all parameters from the previous \ud835\udc56\u2212 1 layers, the derivative \ud835\udf15\ud835\udc53/\ud835\udf15\ud835\udf03 is not sparse.\nTo cope with this, a natural approach is to treat the dynamics in a \u201crolling\u201d fashion and apply the rank-one approximation at each layer in turn. Formally, this amounts to defining the following model\n\u210e\u0303(1)(\ud835\udc5b\ud835\udc61 + 1) = \ud835\udc53 (1)(?\u0303?(\ud835\udc5b\ud835\udc61), \u210e\u0303(1)(\ud835\udc5b\ud835\udc61), \ud835\udf031) (43) \u210e\u0303(2)(\ud835\udc5b\ud835\udc61 + 2) = \ud835\udc53 (2)(?\u0303?(\ud835\udc5b\ud835\udc61 + 1), \u210e\u0303(2)(\ud835\udc5b\ud835\udc61 + 1), \ud835\udf032) (44) ... (45) \u210e\u0303(\ud835\udc5b)(\ud835\udc5b\ud835\udc61 + \ud835\udc5b) = \ud835\udc53 (\ud835\udc5b)(?\u0303?(\ud835\udc5b\ud835\udc61 + \ud835\udc5b\u2212 1), \u210e\u0303(\ud835\udc5b)(\ud835\udc5b\ud835\udc61 + \ud835\udc5b\u2212 1), \ud835\udf03\ud835\udc5b) (46)\nwith ?\u0303?(\ud835\udc61) := \ud835\udc65(\u230a\ud835\udc61/\ud835\udc5b\u230b), and where states not explicitly appearing in these equations stay unchanged (\u210e(\ud835\udc56)(\ud835\udc5b\ud835\udc61 + \ud835\udc57) = \u210e(\ud835\udc56)(\ud835\udc5b\ud835\udc61 + \ud835\udc57 \u2212 1) for \ud835\udc56 \u0338= \ud835\udc57). Thus, the transition function explicitly depends on time (more precisely, on time modulo the number of layers), and is sparse at each step. Indeed, at each step, applying the transition function amounts to applying one of the \ud835\udc53 (\ud835\udc56) to the corresponding layer, and leaving the other layers unchanged. Thus the derivative of \ud835\udc53 (\ud835\udc56) with respect to any \ud835\udf03\ud835\udc57 , \ud835\udc57 \u0338= \ud835\udc56, is zero; this leaves only the gradient of \ud835\udc53 (\ud835\udc56) wrt \ud835\udf03\ud835\udc56 to be dealt with, and Algorithm 1 or 2 can be applied at little cost."
        },
        {
            "heading": "1.4 Extensions",
            "text": "Rank-\ud835\udc3e reductions. A first obvious extension is to use higher-rank reductions. The simplest way to achieve this is to take several independent random rank-one \ud835\udc63\ud835\udc58?\u0304?\u22a4\ud835\udc58 reductions in (7) and average them. Note that \ud835\udc64\ud835\udc56 (Algorithm 1) has to be evaluated only once in this case. It might be slightly more efficient to first split the parameter components into \ud835\udc3e blocks (e.g., at random) so that the \ud835\udc58-th term ?\u0304?\u22a4\ud835\udc58 only involves parameters from the \ud835\udc58-th block: indeed, applying the evolution equation for \ud835\udc3a preserves this structure so this requires less memory for storage of the ?\u0304?\ud835\udc58.\nAlgorithms similar to RTRL. Other algorithms have been proposed that have the same structure and shortcomings as real-time recurrent learning, for instance, the online EM algorithm for hidden Markov models from [Cap11]. In principle, the approach presented here can be extended to such settings.\nContinuous-time systems. Another extension concerns continuous-time dynamical systems\nd\u210e(\ud835\udc61) d\ud835\udc61 = \ud835\udc39 (\u210e(\ud835\udc61), \ud835\udc65(\ud835\udc61), \ud835\udf03) (47)\nwhich can be discretized as \u210e(\ud835\udc61 + \ud835\udeff\ud835\udc61) = \u210e(\ud835\udc61) + \ud835\udeff\ud835\udc61\ud835\udc39 (\u210e(\ud835\udc61), \ud835\udc65(\ud835\udc61), \ud835\udf03). Thus this is analogous to the discrete-time case via \ud835\udc53 = Id +\ud835\udeff\ud835\udc61\ud835\udc39 , and Algorithm 1 may be applied to this discretization.\nWhen performing the rank-one reduction (7), the scaling by \ud835\udf0c\ud835\udc56 = \u221a\ufe00 \u2016\ud835\udc64\ud835\udc56\u2016 / \u2016\ud835\udc63\ud835\udc56\u2016\nis important in this case: it ensures that both \ud835\udc63 and ?\u0304? change by \ud835\udc42( \u221a\n\ud835\udeff\ud835\udc61) times a random quantity at each step. This is the expected correct scaling for a continuous-time stochastic evolution equation, corresponding to the increment of a Wiener process during a time interval \ud835\udeff\ud835\udc61. (Without scaling by \ud835\udf0c\ud835\udc56, there will be no well-defined limit as \ud835\udeff\ud835\udc61 \u2192 0, because \ud835\udc63 would change by \ud835\udc42(1) at each step \ud835\udc61\u2190 \ud835\udc61 + \ud835\udeff\ud835\udc61, while ?\u0304? would evolve by \ud835\udeff\ud835\udc61 times a centered random quantity so that it would be constant in the limit.) Further work is needed to study this continuous-time limit."
        },
        {
            "heading": "2 Experiments",
            "text": "We report here a series of small-scale experiments on text prediction tasks. The experiments focus on two questions: First, does learning using the rank-one approximation ?\u0303? accurately reflect learning based on the actual gradient \ud835\udc3a computed exactly via RTRL, or is the noise introduced in this method detrimental to learning? Second, how does this approach compare to truncated backpropagation through time?\nWe used the RNN or leaky RNN models described above to predict a sequence of characters \ud835\udc66(\ud835\udc61) in a finite alphabet \ud835\udc9c, given the past observations \ud835\udc65(\ud835\udc60) = \ud835\udc66(\ud835\udc60) for 1 6 \ud835\udc60 6 \ud835\udc61 \u2212 1. At each time, the network outputs a probability distribution on the next character \ud835\udc67; explicitly, the output at time \ud835\udc61 is \ud835\udc66(\ud835\udc61) \u2208 R\ud835\udc9c defined by\n\ud835\udc66(\ud835\udc61)\ud835\udc67 := \ud835\udf19\ud835\udc67 + \u2211\ufe01\n\ud835\udc56\n\ud835\udf19\ud835\udc56\ud835\udc67\ud835\udc4e\ud835\udc56(\ud835\udc61) (48)\nfor each \ud835\udc67 \u2208 \ud835\udc9c, with parameters \ud835\udf19 = (\ud835\udf19\ud835\udc67, \ud835\udf19\ud835\udc56\ud835\udc67)\ud835\udc56,\ud835\udc67. The output \ud835\udc66 = (\ud835\udc66\ud835\udc66)\ud835\udc66\u2208\ud835\udc9c defines a probability distribution on \ud835\udc9c via a softmax \ud835\udc5d\ud835\udc66(\ud835\udc66) := \ud835\udc52 \ud835\udc66\ud835\udc66\u2211\ufe00 \ud835\udc67\u2208\ud835\udc34\ud835\udc59 \ud835\udc52 \ud835\udc66\ud835\udc67 , and the loss function is the log-loss on prediction of the next character, \u2113\ud835\udc61 := \u2212 log2 \ud835\udc5d\ud835\udc66(\ud835\udc61)(\ud835\udc66(\ud835\udc61)). The internal and output parameters \ud835\udf03 and \ud835\udf19 are trained according to Algorithms 1 and 2.\nWe used three datasets. The first is a \u201ctext\u201d representing synthetic music notation with several syntactic, rhythmic and harmonic constraints (Example 3 from [Oll15b]). The data was a file of length \u2248 105 characters, after which the signal cycled over the same file. The second dataset is the classical \ud835\udc4e\ud835\udc5b\ud835\udc4f\ud835\udc5b example, synthesized by repeatedly picking an integer \ud835\udc5b at random in some interval, then outputting a series of \ud835\udc5b \ud835\udc4e\u2019s followed by a line break, then \ud835\udc5b \ud835\udc4f\u2019s and another line break. This model tests the ability of a learning algorithm to learn precise timing and time dependencies. The\nthird example is the full set of Shakespeare\u2019s works, obtained from Project Gutenberg.12 The file is roughly 5.106 characters long.\nThe benchmarks included are gzip, a standard non-online compression algorithm, and context tree weighting (CTW) [BEYY04], a more advanced online text compression algorithm, as well as the actual entropy rate of the generative model for synthetic music and \ud835\udc4e\ud835\udc5b\ud835\udc4f\ud835\udc5b.\nThe code used in the experiments is available at http://www.yann-ollivier. org/rech/code/nobacktrack/code_nobacktrack_exp.tar.gz\nEuclidean NoBackTrack. We first study whether the low rank approximation in the Euclidean version of NoBackTrack impacts the gradient descent. For this first set of experiments, we use a fully connected RNN with 20 units, as described above, on the synthetic music example. We compared RTRL, Euclidean rank-one NoBackTrack, and Euclidean NoBackTrack using ranktwo and rank-ten reductions (obtained by averaging two or ten independent rank-one reductions, as discussion in Section 1.4).\nThe results are summed up in Figure 1 and Figure 2. All the models were trained using the same learning rate \ud835\udf02\ud835\udc61 = 1/ \u221a \ud835\udc61 for Figure 1 and \ud835\udf02\ud835\udc61 = 0.03/ \u221a \ud835\udc61 for Figure 2. The various algorithms were run for the same amount of time. This is reflected in the different curve lengths for the different algorithms; in particular, the curve for RTRL is much shorter, reflecting its higher computational cost. (Note the log scale on the \ud835\udc61 axis: RTRL is roughly 20 times slower with 20 units.)\nThe impact of stochasticity of the low-rank approximation when using large learning rates is highlighted on Figure 1: Euclidean NoBackTrack with a large learning rate displays instabilities, even when increasing the rank of the approximation.\nSmaller learning rates allow the algorithm to cope with this, as the noise in the gradients is averaged out over longer time spans. This is illustrated in Figure 2, in which the trajectories of Euclidean NoBackTrack track those of RTRL closely even with a rank-two approximation.\nKalman NoBackTrack. Next, we report the results of the Kalman version of NoBackTrack on the same experimental setup. A quasi-diagonal outer product (QDOP) approximation [Oll15a] of the full Kalman inverse covariance matrix is used, to keep complexity low.\nWe compare the low-rank approximations to RTRL. To make the comparison clear, for RTRL we also use a quasi-diagonal (QDOP) approximation of the Kalman filtering algorithm on top of the exact gradient computed by RTRL.\n12www.gutenberg.org\nLearning rates were set to 1 and all algorithms were run for the same amount of time.\nThe use of the QDOP-approximated Kalman inverse covariance appears to fully fix the unstable behaviour. Overall, low-rank approximations appear to be roughly on par with QDOP RTRL. There is no obvious gain, on this particular example, in using higher-rank approximations.\nStill, on this particular task and with this particular network size, none of the RNN algorithms (including BPTT reported below) match the performance of Context Tree Weighting. RNNs beat CTW on this task if trained using a non-online, Riemannian gradient descent [Oll15b] (analogous to using the Kalman inverse covariance). So this is arguably an effect of imperfect online RNN training.\nKalman NoBackTrack and truncated BPTT. Our next set of experiments aims at comparing Kalman NoBackTrack to truncated BPTT, with truncation13 parameter \ud835\udc47 = 15. As BPTT truncates the full gradient by\n13In the version of BPTT used here, the algorithm does not backtrack by \ud835\udc47 steps at every time step \ud835\udc61; rather, it waits for \ud835\udc47 steps between \ud835\udc61 and \ud835\udc61 + \ud835\udc47 , then backtracks by \ud835\udc47 steps and collects all gradients in this interval. Otherwise, truncated BPTT would be \ud835\udc47 times slower, which was unacceptable for our experiments.\nremoving dependencies at distances longer than the truncation parameter, we expect Kalman NoBackTrack to learn better models on datasets presenting long term correlations.\nThe two algorithms are first compared on the synthetic music dataset, with the same experimental setup as above, for the same amount of time, with a learning rate \ud835\udf02\ud835\udc61 = 1/ \u221a \ud835\udc61 for truncated BPTT and \ud835\udefe\ud835\udc61 = 1/ \u221a \ud835\udc61 for Kalman NoBackTrack.14 The results are shown in Figure 4. On this example, truncated BPTT perfoms better than Kalman NoBackTrack, even though the two algorithms display broadly comparable performance. Noticeably, RTRL and truncated BPTT are roughly on par here, with truncated BPTT slightly outperforming RTRL in the end: apparently, maintaining long term dependencies in gradient calculations does not improve learning in this synthetic music example.\nNext, to compare NoBackTrack and truncated BPTT on their specific ability to learn precise middle and long term dependencies, we present experiments on the \ud835\udc4e\ud835\udc5b\ud835\udc4f\ud835\udc5b example. This will clearly illustrate the biased nature of the gradients computed by truncated BPTT.\n14These learning rates have different meanings for Kalman NoBackTrack and truncated BPTT, and are not directly comparable.\nThe \ud835\udc4e\ud835\udc5b\ud835\udc4f\ud835\udc5b[\ud835\udc58;\ud835\udc59] dataset is synthesized by sequentially picking a number \ud835\udc5b between \ud835\udc58 and \ud835\udc59 uniformly at random, then outputting a series of \ud835\udc5b \ud835\udc4e\u2019s followed by a line break, then \ud835\udc5b \ud835\udc4f\u2019s and another line break. The true entropy rate is log2(\ud835\udc59\u2212\ud835\udc58+1)\ud835\udc59+\ud835\udc58+2 in this example.\n15 A roughly 106 character long input sequence was synthesized, using [\ud835\udc58; \ud835\udc59] = [1; 32].\nAs standard RNN models do not seem to be able to deal with this example, whatever the training algorithm, we used a leaky RNN16 as presented in Section 1.3, again with 20 fully connected units. All the algorithms used a learning rate of 1/ \u221a \ud835\udc61. The results are reported on Figure 5, which also includes the entropy rate of the exact \ud835\udc4e\ud835\udc5b\ud835\udc4f\ud835\udc5b model and the (twice larger) entropy rate of an \ud835\udc4e\ud835\udc5b\ud835\udc4f\ud835\udc5d model with independent \ud835\udc5b and \ud835\udc5d.\nKalman NoBackTrack clearly outperforms truncated BPTT on this dataset. This was to be expected, as the typical time range of the temporal dependencies exceeds the truncation range for BPTT, so that the\n15Indeed, log2(\ud835\udc59 \u2212 \ud835\udc58 + 1) bits are needed to encode the value of \ud835\udc5b in each \ud835\udc4e\ud835\udc5b\ud835\udc4f\ud835\udc5b block (this is the entropy of a uniform distribution on {\ud835\udc58, . . . , \ud835\udc59}), and the average value of \ud835\udc5b is (\ud835\udc58 + \ud835\udc59)/2 so that the average length of an \ud835\udc4e\ud835\udc5b\ud835\udc4f\ud835\udc5b block, including the two newline symbols, is 2\u00d7 (\ud835\udc59 + \ud835\udc58)/2 + 2.\n16The parameter \ud835\udefc of the LRNN can be learned, but this sometimes produces numerical instabilities unless cumbersome changes of variables are introduced. We just initialized \ud835\udefc to a random value separately for each unit and kept it fixed.\napproximated gradients computed by truncated BPTT are significantly biased.\nKeeping track of the long term dependencies is key here, and RTRL outperforms all the algorithms epochwise, though it is still penalized by its high complexity. Truncated BPTT is unable to learn the full dependencies between \ud835\udc4e\u2019s and \ud835\udc4f\u2019s, and ends up closer to the entropy of an \ud835\udc4e\ud835\udc5b\ud835\udc4f\ud835\udc5d model with independent values of \ud835\udc5b and \ud835\udc5d (presumably, it still manages to learn the \ud835\udc4e\ud835\udc5b\ud835\udc4f\ud835\udc5b blocks where \ud835\udc5b is short). At some point the learning curve of truncated BPTT appears not to decrease anymore and even goes slightly up, which is consistent with a biased gradient estimate.\nOn the other hand, Kalman NoBackTrack seems to be mostly successful in learning the dependencies. This is confirmed by visual inspection of the output of the learned model. The small remaining gap between the true model and the learned model could be related to incomplete training, or to an imperfect modelling of the exact uniform law for \ud835\udc5b \u2208 [\ud835\udc58; \ud835\udc59].\nFinally, we report performance of truncated BPTT and Kalman NoBackTrack on Shakespeare\u2019s works. The same 20-unit RNN model is used, again with all algorithms run for the same amount of time using the same learning rate 1/ \u221a \ud835\udc61. The curves obtained are displayed in Figure 6.\nOn this example, RTRL, truncated BPTT, and Kalman NoBackTrack\nwith various ranks all have a similar performance; it is not clear whether the differences on Figure 6 are statistically significant. This proves, once more, that the stochasticity and rank reduction inherent to NoBackTrack are not detrimental to learning, and allow it to keep up with exact gradient algorithms.\nAll RNN algorithms have a significantly worse performance than CTW on this example, thus proving that a 20-unit RNN does not accurately model Shakespeare\u2019s works.\nConclusion. We have introduced an algorithm that computes a stochastic, provably unbiased estimate of the derivative of the current state of a dynamical system with respect to its parameters, in a fully online fashion. For recurrent neural networks, the computational cost of this algorithm is comparable to that of running the network itself. Previously known algorithms were either not fully online or had a significantly higher computational cost.\nIn our experiments, this algorithm appears as a practical alternative to truncated backpropagation through time, especially in its Kalman version, while the Euclidean version requires smaller learning rates. The (unbiased) noise and rank reduction introduced in the gradient approximation do not appear to prevent learning. The interest of NoBackTrack with respect to truncated BPTT depends on the situation at hand, especially on the scale of time dependencies in the data (which results in biased gradient estimates for BPTT), and on whether the storage of past states and past data required by truncated BPTT is acceptable or not.\nAcknowledgments. The authors would like to thank Hugo Larochelle for his helpful questions that resulted in several clarifications of the text.\nA Variance of the rank-one trick Keep the notation of Proposition 1 and let \u2016\u00b7\u2016 be a Euclidean norm on the vector space in which the \ud835\udc63\ud835\udc56 and \ud835\udc64\ud835\udc56 live.\nTo measure the variance of \ud835\udc34 we use the Hilbert\u2013Schmidt norm \u20e6\u20e6 \ud835\udc34 \u20e6\u20e62\nHS := Tr(\ud835\udc34\u22a4\ud835\udc34). This norm satisfies \u20e6\u20e6 \ud835\udc63\ud835\udc64\u22a4\u20e6\u20e6 HS = \u2016\ud835\udc63\u2016 \u2016\ud835\udc64\u2016, and \u27e8\ufe00 \ud835\udc631\ud835\udc64 \u22a4 1 | \ud835\udc632\ud835\udc64\u22a42 \u27e9\ufe00 HS = \u27e8 \ud835\udc631 | \ud835\udc632 \u27e9 \u27e8\ud835\udc641 | \ud835\udc642 \u27e9 for the associated scalar product. Let us evaluate the variance of \ud835\udc34 in this norm. Since Var \ud835\udc34 = E \u20e6\u20e6 \ud835\udc34 \u20e6\u20e62 HS\u2212 \u20e6\u20e6 E\ud835\udc34 \u20e6\u20e62\nHS and E\ud835\udc34 = \ud835\udc34 is fixed, it is enough to evaluate the second moment E \u20e6\u20e6 \ud835\udc34 \u20e6\u20e62\nHS. We claim that\nE \u20e6\u20e6 \ud835\udc34 \u20e6\u20e62 HS = ( \u2211\ufe01\n\ud835\udc56\n\u2016\ud835\udc63\ud835\udc56\u20162)( \u2211\ufe01\n\ud835\udc57\n\u2016\ud835\udc64\ud835\udc57\u20162) + 2 \u2211\ufe01\n\ud835\udc56 \u2211\ufe01 \ud835\udc57 \u0338=\ud835\udc56 \u27e8 \ud835\udc63\ud835\udc56 | \ud835\udc63\ud835\udc57 \u27e9 \u27e8\ud835\udc64\ud835\udc56 | \ud835\udc64\ud835\udc57 \u27e9 (49)\nIndeed, \ud835\udc34 = \u2211\ufe00\n\ud835\udc56\ud835\udc57 \ud835\udf00\ud835\udc56\ud835\udf00\ud835\udc57\ud835\udc63\ud835\udc56\ud835\udc64 \u22a4 \ud835\udc57 so, by bilinearity of the Hilbert\u2013Schmidt scalar product,\nE \u20e6\u20e6 \ud835\udc34 \u20e6\u20e62 HS = E \u27e8\ufe00 \ud835\udc34 | \ud835\udc34 \u27e9\ufe00 HS = E \u2211\ufe01 \ud835\udc56\ud835\udc57\ud835\udc58\ud835\udc59 \ud835\udf00\ud835\udc56\ud835\udf00\ud835\udc57\ud835\udf00\ud835\udc58\ud835\udf00\ud835\udc59 \u27e8 \ud835\udc63\ud835\udc56 | \ud835\udc63\ud835\udc57 \u27e9 \u27e8\ud835\udc64\ud835\udc58 | \ud835\udc64\ud835\udc59 \u27e9 (50)\nSince E\ud835\udf00\ud835\udc56 = 0 and E(\ud835\udf00\ud835\udc56\ud835\udf00\ud835\udc57) = 0 for \ud835\udc56 \u0338= \ud835\udc57, the only cases to consider are: 1. \ud835\udc56 = \ud835\udc57 and \ud835\udc58 = \ud835\udc59 and \ud835\udc56 \u0338= \ud835\udc58: contribution \u2211\ufe00\n\ud835\udc56 \u2211\ufe00 \ud835\udc58 \u0338=\ud835\udc56 \u2016\ud835\udc63\ud835\udc56\u2016 2 \u2016\ud835\udc64\ud835\udc58\u20162\n2. \ud835\udc56 = \ud835\udc58 and \ud835\udc57 = \ud835\udc59 and \ud835\udc56 \u0338= \ud835\udc57: contribution \u2211\ufe00\n\ud835\udc56 \u2211\ufe00 \ud835\udc57 \u0338=\ud835\udc56 \u27e8 \ud835\udc63\ud835\udc56 | \ud835\udc63\ud835\udc57 \u27e9 \u27e8\ud835\udc64\ud835\udc56 | \ud835\udc64\ud835\udc57 \u27e9\n3. \ud835\udc56 = \ud835\udc59 and \ud835\udc57 = \ud835\udc58 and \ud835\udc56 \u0338= \ud835\udc57: same contribution as the previous one 4. \ud835\udc56 = \ud835\udc57 = \ud835\udc58 = \ud835\udc59: contribution \u2211\ufe00\n\ud835\udc56 \u2016\ud835\udc63\ud835\udc56\u2016 2 \u2016\ud835\udc64\ud835\udc56\u20162\n5. all other cases contribute 0. The first and fourth contributions add up to ( \u2211\ufe00 \ud835\udc56 \u2016\ud835\udc63\ud835\udc56\u2016 2)( \u2211\ufe00 \ud835\udc58 \u2016\ud835\udc64\ud835\udc58\u2016 2). This proves (49). Let us minimize variance over the degrees of freedom given by \ud835\udc63\ud835\udc56\ud835\udc64\u22a4\ud835\udc56 = (\ud835\udf0c\ud835\udc56\ud835\udc63\ud835\udc56)(\ud835\udc64\ud835\udc56/\ud835\udf0c\ud835\udc56)\u22a4.\n\ud835\udf0c\ud835\udc56 does not change the last contribution to E \u20e6\u20e6 \ud835\udc34 \u20e6\u20e62\nHS in (49), neither does it change the expectation E\ud835\udc34 = \ud835\udc34, so to minimize the variance we only have to minimize the first term ( \u2211\ufe00 \ud835\udc56 \u2016\ud835\udc63\ud835\udc56\u2016 2)( \u2211\ufe00 \ud835\udc58 \u2016\ud835\udc64\ud835\udc58\u2016 2). Applying the scaling, this term becomes\n( \u2211\ufe01\n\ud835\udc56\n\u2016\ud835\udc63\ud835\udc56\u20162 \ud835\udf0c2\ud835\udc56 )( \u2211\ufe01\n\ud835\udc58\n\u2016\ud835\udc64\ud835\udc58\u20162 /\ud835\udf0c2\ud835\udc58) (51)\nand, by differentiation with respect to a single \ud835\udf0c\ud835\udc56, one checks that this is minimal for \ud835\udf0c\ud835\udc56 \u221d \u221a\ufe00 \u2016\ud835\udc64\ud835\udc56\u2016 / \u2016\ud835\udc63\ud835\udc56\u2016 (52)\n(mutliplying all \ud835\udf0c\ud835\udc56\u2019s by a common factor does not change the result). So, after optimal scaling,\n\ud835\udc34 = (\ufe03\u2211\ufe01\n\ud835\udc56\n\ud835\udf00\ud835\udc56\ud835\udc63\ud835\udc56 \u221a\ufe00 \u2016\ud835\udc64\ud835\udc56\u2016 / \u2016\ud835\udc63\ud835\udc56\u2016 )\ufe03 \u2297 (\ufe03\u2211\ufe01 \ud835\udc56 \ud835\udf00\ud835\udc56\ud835\udc64\ud835\udc56 \u221a\ufe00 \u2016\ud835\udc63\ud835\udc56\u2016 / \u2016\ud835\udc64\ud835\udc56\u2016 )\ufe03 (53)\nConsequently, after scaling, the first term in the variance of \ud835\udc34 in (49) becomes ( \u2211\ufe00\n\ud835\udc56 \u2016\ud835\udc63\ud835\udc56\u2016 \u2016\ud835\udc64\ud835\udc56\u2016)2. The second term in (49) does not change. Thus, after optimal scaling we find\nE \u20e6\u20e6 \ud835\udc34 \u20e6\u20e62 HS = (\ufe03\u2211\ufe01\n\ud835\udc56\n\u2016\ud835\udc63\ud835\udc56\u2016 \u2016\ud835\udc64\ud835\udc56\u2016 )\ufe032 + 2\n\u2211\ufe01 \ud835\udc56 \u2211\ufe01 \ud835\udc57 \u0338=\ud835\udc56 \u27e8 \ud835\udc63\ud835\udc56 | \ud835\udc63\ud835\udc57 \u27e9 \u27e8\ud835\udc64\ud835\udc56 | \ud835\udc64\ud835\udc57 \u27e9 (54)\nTo obtain the variance of \ud835\udc34, we just subtract the square norm of E\ud835\udc34 = \ud835\udc34, which is\n\u2016\ud835\udc34\u20162HS = \u20e6\u20e6\u20e6\u20e6 \u20e6\u2211\ufe01\n\ud835\udc56\n\ud835\udc63\ud835\udc56\ud835\udc64 \u22a4 \ud835\udc56 \u20e6\u20e6\u20e6\u20e6 \u20e6 2\nHS\n= \u2211\ufe01\n\ud835\udc56\n\u20e6\u20e6 \ud835\udc63\ud835\udc56\ud835\udc64 \u22a4 \ud835\udc56 \u20e6\u20e62 HS + \u2211\ufe01 \ud835\udc56 \u2211\ufe01 \ud835\udc57 \u0338=\ud835\udc56 \u27e8\ufe00 \ud835\udc63\ud835\udc56\ud835\udc64 \u22a4 \ud835\udc56 | \ud835\udc63\ud835\udc57\ud835\udc64\u22a4\ud835\udc57 \u27e9\ufe00 HS (55)\n(by bilinearity of the Hilbert\u2013Schmidt scalar product)\n= \u2211\ufe01\n\ud835\udc56\n\u2016\ud835\udc63\ud835\udc56\u20162 \u2016\ud835\udc64\ud835\udc56\u20162 + \u2211\ufe01\n\ud835\udc56 \u2211\ufe01 \ud835\udc57 \u0338=\ud835\udc56 \u27e8 \ud835\udc63\ud835\udc56 | \ud835\udc63\ud835\udc57 \u27e9 \u27e8\ud835\udc64\ud835\udc56 | \ud835\udc64\ud835\udc57 \u27e9 (56)\nThis yields, after optimal scaling,\nVar \ud835\udc34 = (\ufe03\u2211\ufe01\n\ud835\udc56\n\u2016\ud835\udc63\ud835\udc56\u2016 \u2016\ud835\udc64\ud835\udc56\u2016 )\ufe032 \u2212 \u2211\ufe01\n\ud835\udc56\n\u2016\ud835\udc63\ud835\udc56\u20162 \u2016\ud835\udc64\ud835\udc56\u20162 + \u2211\ufe01\n\ud835\udc56 \u2211\ufe01 \ud835\udc57 \u0338=\ud835\udc56 \u27e8 \ud835\udc63\ud835\udc56 | \ud835\udc63\ud835\udc57 \u27e9 \u27e8\ud835\udc64\ud835\udc56 | \ud835\udc64\ud835\udc57 \u27e9 (57)\n= \u2211\ufe01\n\ud835\udc56 \u2211\ufe01 \ud835\udc57 \u0338=\ud835\udc56 \u2016\ud835\udc63\ud835\udc56\u2016 \u2016\ud835\udc63\ud835\udc57\u2016 \u2016\ud835\udc64\ud835\udc56\u2016 \u2016\ud835\udc64\ud835\udc57\u2016+ \u27e8 \ud835\udc63\ud835\udc56 | \ud835\udc63\ud835\udc57 \u27e9 \u27e8\ud835\udc64\ud835\udc56 | \ud835\udc64\ud835\udc57 \u27e9 (58)\nB Invariant norms derived from the Kalman covariance\nAlgorithm 2 is built to offer invariance properties (a Kalman filter over a variable \ud835\udf03 is invariant by affine reparameterization of \ud835\udf03, for instance). However, this only holds if the norms \u2016\ud835\udc63\u2016, \u2016?\u0304?\u2016, \u2016\ud835\udc63\ud835\udc56\u2016, \u2016\ud835\udc64\ud835\udc56\u2016, used to compute the scaling factors \ud835\udf0c = \u221a\ufe00 \u2016?\u0304?\u2016 / \u2016\ud835\udc63\u2016\nand \ud835\udf0c\ud835\udc56 = \u221a\ufe00 \u2016\ud835\udc64\ud835\udc56\u2016 / \u2016\ud835\udc52\ud835\udc56\u2016, are themselves reparameterization-invariant.\nThis can be achieved if we decide to choose the scalings \ud835\udf0c as to minimize the variance of ?\u0303? computed in the (Mahalanobis) norm defined by the covariance matrix of \ud835\udf03 and of \u210e appearing in the Kalman filter.\nLet \ud835\udc36\ud835\udf03 be the covariance matrix of \ud835\udf03 obtained in the Kalman filter; in Algorithm 2, \ud835\udc36\ud835\udf03 is approximated by \ud835\udc36\ud835\udf03 \u2248 \ud835\udc3d\u22121\ud835\udf03 .\nAny linear form on \ud835\udf03, such as ?\u0304? and \ud835\udc64\ud835\udc56, can be given a norm by\n\u2016?\u0304?\u20162 := ?\u0304?\u22a4\ud835\udc36\ud835\udf03?\u0304? \u2248 ?\u0304?\u22a4\ud835\udc3d\u22121\ud835\udf03 ?\u0304? (59)\nand likewise for \ud835\udc64\ud835\udc56. This norm is invariant under \ud835\udf03-reparameterization. Given the covariance \ud835\udc36\ud835\udf03 of \ud835\udf03 and the dependency \ud835\udc3a = \ud835\udf15\u210e\ud835\udf15\ud835\udf03 of \u210e with respect to \ud835\udf03, the covariance of \u210e is \ud835\udc36\u210e := \ud835\udc3a\ud835\udc36\ud835\udf03\ud835\udc3a\u22a4 (60) and its inverse \ud835\udc3d\u210e := \ud835\udc36\u22121\u210e can be used to define a norm for a tangent vector \ud835\udc63 at state \u210e via \u2016\ud835\udc63\u20162 := \ud835\udc63\u22a4\ud835\udc3d\u210e\ud835\udc63 (61) which is also reparametrization-invariant. (We use \ud835\udc3d\u22121\ud835\udf03 for the norm of \ud835\udc64 and \ud835\udc3d\u210e for the norm of \ud835\udc63 because \ud835\udc63 is a tangent vector (covariant) at point \u210e, while \ud835\udc64 is a linear form (contravariant) at point \ud835\udf03.)\nHowever, handling of full covariance matrices would be too costly. In Algorithm 2, the inverse covariance \ud835\udc3d\ud835\udf03 of \ud835\udf03 is already an approximation (diagonal, quasi-diagonal...) via MatrixReduce. Moreover, here we only have access to an approximation ?\u0303? of \ud835\udc3a. Thus, we simply replace \ud835\udc3a with ?\u0303? in the definition of \ud835\udc36\u210e, and use a diagonal reduction. This leads to \ud835\udc36\u210e \u2248 Diag(?\u0303?\ud835\udc3d\u22121\ud835\udf03 ?\u0303?\u22a4) and\n\ud835\udc3d\u210e \u2248 (\ufe00 Diag(?\u0303?\ud835\udc3d\u22121\ud835\udf03 ?\u0303? \u22a4) )\ufe00\u22121 (62)\nwhere as usual ?\u0303? is the gradient approximation given by (9). The diagonal reduction is necessary if ?\u0303? is low-rank, since ?\u0303?\ud835\udc3d\u22121\ud835\udf03 ?\u0303?\u22a4 will be low-rank as well, and thus non-invertible. Then the scaling factors \ud835\udf0c and \ud835\udf0c\ud835\udc56 can finally be computed as\n\ud835\udf0c = \u221a\ufe03 \u2016?\u0304?\u2016 \u2016\ud835\udc63\u2016 = (?\u0304?\u22a4\ud835\udc3d\u22121\ud835\udf03 ?\u0304?)1/4(\ufe00\u2211\ufe00\n\ud835\udc56(?\u0303?\ud835\udc3d \u22121 \ud835\udf03 ?\u0303? \u22a4)\u22121\ud835\udc56\ud835\udc56 \ud835\udc632\ud835\udc56 )\ufe001/4 (63)\nand\n\ud835\udf0c\ud835\udc56 = \u221a\ufe03 \u2016\ud835\udc64\ud835\udc56\u2016 \u2016\ud835\udc52\ud835\udc56\u2016 = (\ud835\udc64\u22a4\ud835\udc56\ud835\udc3d\u22121\ud835\udf03 \ud835\udc64\ud835\udc56)1/4(\ufe00\n(?\u0303?\ud835\udc3d\u22121\ud835\udf03 ?\u0303?\u22a4) \u22121 \ud835\udc56\ud835\udc56 )\ufe001/4 (64) The particular structure of \ud835\udc3d\ud835\udf03 (if approximated by, e.g., a block-diagonal matrix) and of ?\u0303? = \ud835\udc63?\u0304?\u22a4+ \u2211\ufe00 \ud835\udc56 \ud835\udc52\ud835\udc56\ud835\udc64 \u22a4 \ud835\udc56 make these computations efficient.\nNote that even with the approximations above, ?\u0303? is still an unbiased estimate of \ud835\udc3a. Indeed, any choice of \ud835\udf0c has this property; we are simply approximating the optimal \ud835\udf0c which minimizes the variance of ?\u0303?.\nIn practice, small regularization terms are included in the denominator of every division and inversion to avoid numerical overflow."
        }
    ],
    "title": "Training recurrent networks online without backtracking",
    "year": 2015
}