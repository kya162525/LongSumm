{
    "abstractText": "Gatys et al. recently demonstrated that deep networks can generate beautiful textures and stylized images from a single texture example. However, their methods requires a slow and memoryconsuming optimization process. We propose here an alternative approach that moves the computational burden to a learning stage. Given a single example of a texture, our approach trains compact feed-forward convolutional networks to generate multiple samples of the same texture of arbitrary size and to transfer artistic style from a given image to any other image. The resulting networks are remarkably light-weight and can generate textures of quality comparable to Gatys et al., but hundreds of times faster. More generally, our approach highlights the power and flexibility of generative feed-forward models trained with complex and expressive loss functions.",
    "authors": [
        {
            "affiliations": [],
            "name": "Dmitry Ulyanov"
        },
        {
            "affiliations": [],
            "name": "Vadim Lebedev"
        },
        {
            "affiliations": [],
            "name": "Andrea Vedaldi"
        },
        {
            "affiliations": [],
            "name": "Victor Lempitsky"
        }
    ],
    "id": "SP:ed16b5a85e06fc0e6c81b3843a5bb2bb50a35ac1",
    "references": [
        {
            "authors": [
                "Chatfield",
                "Ken",
                "Simonyan",
                "Karen",
                "Vedaldi",
                "Andrea",
                "Zisserman",
                "Andrew"
            ],
            "title": "Return of the devil in the details: Delving deep into convolutional nets",
            "venue": "arXiv preprint arXiv:1405.3531,",
            "year": 2014
        },
        {
            "authors": [
                "Denton",
                "Emily L",
                "Chintala",
                "Soumith",
                "Szlam",
                "Arthur",
                "Fergus",
                "Robert"
            ],
            "title": "Deep generative image models using a laplacian pyramid of adversarial networks",
            "venue": "CoRR, abs/1506.05751,",
            "year": 2015
        },
        {
            "authors": [
                "Dosovitskiy",
                "Alexey",
                "Springenberg",
                "Jost Tobias",
                "Brox",
                "Thomas"
            ],
            "title": "Learning to generate chairs with convolutional neural networks",
            "venue": "In Proc. Conference on Computer Vision and Pattern Recognition,",
            "year": 2015
        },
        {
            "authors": [
                "Dziugaite",
                "Gintare Karolina",
                "Roy",
                "Daniel M",
                "Ghahramani",
                "Zoubin"
            ],
            "title": "Training generative neural networks via maximum mean discrepancy optimization",
            "venue": "CoRR, abs/1505.03906,",
            "year": 2015
        },
        {
            "authors": [
                "Gatys",
                "Leon",
                "Ecker",
                "Alexander S",
                "Bethge",
                "Matthias"
            ],
            "title": "Texture synthesis using convolutional neural networks",
            "venue": "In Advances in Neural Information Processing Systems,",
            "year": 2015
        },
        {
            "authors": [
                "Gatys",
                "Leon A",
                "Ecker",
                "Alexander S",
                "Bethge",
                "Matthias"
            ],
            "title": "A neural algorithm of artistic style",
            "venue": "CoRR, abs/1508.06576,",
            "year": 2015
        },
        {
            "authors": [
                "Goodfellow",
                "Ian J",
                "Pouget-Abadie",
                "Jean",
                "Mirza",
                "Mehdi",
                "Xu",
                "Bing",
                "Warde-Farley",
                "David",
                "Ozair",
                "Sherjil",
                "Courville",
                "Aaron C",
                "Bengio",
                "Yoshua"
            ],
            "title": "Generative adversarial nets",
            "venue": "In Advances in Neural Information Processing Systems,NIPS,",
            "year": 2014
        },
        {
            "authors": [
                "Gretton",
                "Arthur",
                "Borgwardt",
                "Karsten M",
                "Rasch",
                "Malte",
                "Sch\u00f6lkopf",
                "Bernhard",
                "Smola",
                "Alex J"
            ],
            "title": "A kernel method for the two-sample-problem",
            "venue": "In Advances in neural information processing systems,NIPS,",
            "year": 2006
        },
        {
            "authors": [
                "Ioffe",
                "Sergey",
                "Szegedy",
                "Christian"
            ],
            "title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift",
            "venue": "In Proc. International Conference on Machine Learning,",
            "year": 2015
        },
        {
            "authors": [
                "Kingma",
                "Diederik P",
                "Ba",
                "Jimmy"
            ],
            "title": "Adam: A method for stochastic optimization",
            "venue": "CoRR, abs/1412.6980,",
            "year": 2014
        },
        {
            "authors": [
                "Li",
                "Yujia",
                "Swersky",
                "Kevin",
                "Zemel",
                "Richard S"
            ],
            "title": "Generative moment matching networks",
            "venue": "In Proc. International Conference on Machine Learning,",
            "year": 2015
        },
        {
            "authors": [
                "Long",
                "Jonathan",
                "Shelhamer",
                "Evan",
                "Darrell",
                "Trevor"
            ],
            "title": "Fully convolutional networks for semantic segmentation",
            "venue": "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,CVPR,",
            "year": 2015
        },
        {
            "authors": [
                "Mahendran",
                "Aravindh",
                "Vedaldi",
                "Andrea"
            ],
            "title": "Understanding deep image representations by inverting them",
            "year": 2015
        },
        {
            "authors": [
                "J. Portilla",
                "E.P. Simoncelli"
            ],
            "title": "A parametric texture model based on joint statistics of complex wavelet coefficients",
            "year": 2000
        },
        {
            "authors": [
                "Radford",
                "Alec",
                "Metz",
                "Luke",
                "Chintala",
                "Soumith"
            ],
            "title": "Unsupervised representation learning with deep convolutional generative adversarial networks",
            "venue": "CoRR, abs/1511.06434,",
            "year": 2015
        },
        {
            "authors": [
                "Simonyan",
                "Karen",
                "Zisserman",
                "Andrew"
            ],
            "title": "Very deep convolutional networks for large-scale image recognition",
            "venue": "arXiv preprint arXiv:1409.1556,",
            "year": 2014
        },
        {
            "authors": [
                "S.C. Zhu",
                "Y. Wu",
                "D. Mumford"
            ],
            "title": "Filters, random fields and maximum entropy (FRAME): Towards a unified theory for texture modeling",
            "year": 1998
        }
    ],
    "sections": [
        {
            "heading": "1. Introduction",
            "text": "Several recent works demonstrated the power of deep neural networks in the challenging problem of generating images. Most of these proposed generative networks that produce images as output, using feed-forward calculations from a random seed; however, very impressive results were obtained by (Gatys et al., 2015a;b) by using networks descriptively, as image statistics. Their idea is to reduce image generation to the problem of sampling at random from\nThe source code and pretrained models are available at https: //github.com/DmitryUlyanov/texture_nets\nthe set of images that match a certain statistics. In texture synthesis (Gatys et al., 2015a), the reference statistics is extracted from a single example of a visual texture, and the goal is to generate further examples of that texture. In style transfer (Gatys et al., 2015b), the goal is to match simultaneously the visual style of a first image, captured using some low-level statistics, and the visual content of a second image, captured using higher-level statistics. In this manner, the style of an image can be replaced with the one of another without altering the overall semantic content of the image.\nMatching statistics works well in practice, is conceptually simple, and demonstrates that off-the-shelf neural networks trained for generic tasks such as image classification can be re-used for image generation. However, the approach of (Gatys et al., 2015a;b) has certain shortcomings too. Being based on an iterative optimization procedure, it requires backpropagation to gradually change the values of the pixels until the desired statistics is matched. This iterative procedure requires several seconds in order to generate a relatively small image using a high-end GPU, while scaling to large images is problematic because of high memory requirements. By contrast, feed-forward generation networks can be expected to be much more efficient because they require a single evaluation of the network and do not incur in the cost of backpropagation.\nIn this paper we look at the problem of achieving the synthesis and stylization capability of descriptive networks using feed-forward generation networks. Our contribution is threefold. First, we show for the first time that a generative approach can produce textures of the quality and diversity comparable to the descriptive method. Second, we propose a generative method that is two orders of magnitude faster and one order of magnitude more memory efficient than the\nar X\niv :1\n60 3.\n03 41\n7v 1\n[ cs\n.C V\n] 1\n0 M\ndescriptive one. Using a single forward pass in networks that are remarkably compact make our approach suitable for video-related and possibly mobile applications. Third, we devise a new type of multi-scale generative architecture that is particularly suitable for the tasks we consider.\nThe resulting fully-convolutional networks (that we call texture networks) can generate textures and process images of arbitrary size. Our approach also represents an interesting showcase of training conceptually-simple feedforward architectures while using complex and expressive loss functions. We believe that other interesting results can be obtained using this principle.\nThe rest of the paper provides the overview of the most related approaches to image and texture generation (Sect. 2), describes our approach (Sect. 3), and provides extensive extensive qualitative comparisons on challenging textures and images (Sect. 4)."
        },
        {
            "heading": "2. Background and related work",
            "text": "Image generation using neural networks. In general, one may look at the process of generating an image x as the problem of drawing a sample from a certain distribution p(x). In texture synthesis, the distribution is induced by an example texture instance x0 (e.g. a polka dots image), such that we can write x \u223c p(x|x0). In style transfer, the distribution is induced by an image x0 representative of the\nvisual style (e.g. an impressionist painting) and a second image x1 representative of the visual content (e.g. a boat), such that x \u223c p(x|x0,x1).\n(Mahendran & Vedaldi, 2015; Gatys et al., 2015a;b) reduce this problem to the one of finding a pre-image of a certain image statistics \u03a6(x) \u2208 Rd and pose the latter as an optimization problem. In particular, in order to synthesize a texture from an example image x0, the pre-image problem is:\nargmin x\u2208X\n\u2016\u03a6(x)\u2212 \u03a6(x0)\u201622. (1)\nImportantly, the pre-image x : \u03a6(x) \u2248 \u03a6(x0) is usually not unique, and sampling pre-images achieves diversity. In practice, samples are extracted using a local optimization algorithmA starting from a random initialization z. Therefore, the generated image is the output of the function\nlocalopt x\u2208X\n(\u2016\u03a6(x)\u2212 \u03a6(x0)\u201622;A, z), z \u223c N (0,\u03a3). (2)\nThis results in a distribution p(x|x0) which is difficult to characterise, but is easy to sample and, for good statistics \u03a6, produces visually pleasing and diverse images. Both (Mahendran & Vedaldi, 2015) and (Gatys et al., 2015a;b) base their statistics on the response that x induces in deep neural network layers. Our approach reuses in particular the statistics based on correlations of convolutional maps proposed by (Gatys et al., 2015a;b).\nDescriptive texture modelling. The approach described above has strong links to many well-known models of visual textures. For texture, it is common to assume that p(x) is a stationary Markov random field (MRF). In this case, the texture is ergodic and one may considers local spatiallyinvariant statistics \u03c8 \u25e6 F (x; i), i \u2208 \u2126, where i denotes a spatial coordinate. Often F is the output of a bank of linear filters and \u03c8 an histogramming operator. Then the spatial average of this local statistics on the prototype texture x0 approximates its sample average\n\u03c6(x0) = 1\n|\u2126| |\u2126|\u2211 i=1 \u03c8\u25e6F (x0; i) \u2248 E x\u223cp(x) [\u03c8\u25e6Fl(x; 0)]. (3)\nThe FRAME model of (Zhu et al., 1998) uses this fact to induce the maximum-entropy distribution over textures p(x) \u221d exp(\u2212\u3008\u03bb, \u03c6(x)\u3009), where \u03bb is a parameter chosen so that the marginals match their empirical estimate, i.e. Ex\u223cp(x)[\u03c6(x)] = \u03c6(x0).\nA shortcoming of FRAME is the difficulty of sampling from the maxent distribution. (Portilla & Simoncelli, 2000) addresses this limitation by proposing to directly find images x that match the desired statistics \u03a6(x) \u2248 \u03a6(x0), pioneering the pre-image method of (1).\nWhere (Zhu et al., 1998; Portilla & Simoncelli, 2000) use linear filters, wavelets, and histograms to build their texture statistics, (Mahendran & Vedaldi, 2015; Gatys et al., 2015a;a) extract statistics from pre-trained deep neural networks. (Gatys et al., 2015b) differs also in that it considers the style transfer problem instead of the texture synthesis one.\nGenerator deep networks. An alternative to using a neural networks as descriptors is to construct generator networks x = g(z) that produce directly an image x starting from a vector of random or deterministic parameters z.\nApproaches such as (Dosovitskiy et al., 2015) learn a mapping from deterministic parameters z (e.g. the type of object imaged and the viewpoint) to an image x. This is done by fitting a neural network to minimize the discrepancy \u2016xi \u2212 g(zi)\u2016 for known image-parameter pairs (xi, zi). While this may produce visually appealing results, it requires to know the relation (x, z) beforehand and cannot express any diversity beyond the one captured by the parameters.\nAn alternative is to consider a function g(z) where the parameters z are unknown and are sampled from a (simple) random distribution. The goal of the network is to map these random values to plausible images x = g(z). This requires measuring the quality of the sample, which is usually expressed as a distance between x and a set of example images x1, . . . ,xn. The key challenge is that the distance\nmust be able to generalize significantly from the available examples in order to avoid penalizing sample diversity.\nGenerative Adversarial Networks (GAN; (Goodfellow et al., 2014)) address this problem by training, together with the generator network g(z), a second adversarial network f(x) that attempts to distinguish between samples g(z) and natural image samples. Then f can be used as a measure of quality of the samples and g can be trained to optimize it. LAPGAN (Denton et al., 2015) applies GAN to a Laplacian pyramid of convolutional networks and DCGAN (Radford et al., 2015) further optimizes GAN and learn is from very large datasets.\nMoment matching networks. The maximum entropy model of (Zhu et al., 1998) is closely related to the idea of Maximum Mean Discrepancy (MMD) introduced in (Gretton et al., 2006). Their key observation the expected value \u00b5p = Ex\u223cp(x)[\u03c6(x)] of certain statistics \u03c6(x) uniquely identifies the distribution p. (Li et al., 2015; Dziugaite et al., 2015) derive from it a loss function alternative to GAN by comparing the statistics averaged over network samples 1m \u2211m i=1 \u03c6 \u25e6 g(zi) to the statistics averaged over\nempirical samples 1m \u2211m i=1 \u03c6(xi). They use it to train a Moment Matching Network (MMN) and apply it to generate small images such as MNIST digits. Our networks are similar to moment matching networks, but use very specific statistics and applications quite different from the considered in (Li et al., 2015; Dziugaite et al., 2015)."
        },
        {
            "heading": "3. Texture networks",
            "text": "We now describe the proposed method in detail. At a highlevel (see Figure 2), our approach is to train a feed-forward generator network g which takes a noise sample z as input and produces a texture sample g(z) as output. For style transfer, we extend this texture network to take both a noise sample z and a content image y and then output a new image g(y, z) where the texture has been applied to y as a visual style. A separate generator network is trained for each texture or style and, once trained, it can synthesize an arbitrary number of images of arbitrary size in an efficient, feed-forward manner.\nA key challenge in training the generator network g is to construct a loss function that can assess automatically the quality of the generated images. For example, the key idea of GAN is to learn such a loss along with the generator network. We show in Sect. 3.1 that a very powerful loss can be derived from pre-trained and fixed descriptor networks using the statistics introduced in (Gatys et al., 2015a;b). Given the loss, we then discuss the architecture of the generator network for texture synthesis (Sect. 3.2) and then generalize it to style transfer (Sect 3.3)."
        },
        {
            "heading": "3.1. Texture and content loss functions",
            "text": "Our loss function is derived from (Gatys et al., 2015a;b) and compares image statistics extracted from a fixed pretrained descriptor CNN (usually one of the VGG CNN (Simonyan & Zisserman, 2014; Chatfield et al., 2014) which are pre-trained for image classification on the ImageNet ILSVRC 2012 data). The descriptor CNN is used to measure the mismatch between the prototype texture x0 and the generated image x. Denote by F li (x) the i-th map (feature channel) computed by the l-th convolutional layer by the descriptor CNN applied to image x. The Gram matrix Gl(x) is defined as the matrix of scalar (inner) products between such feature maps:\nGlij(x) = \u3008F li (x), F lj(x)\u3009 . (4)\nGiven that the network is convolutional, each inner product implicitly sums the products of the activations of feature i and j at all spatial locations, computing their (unnormalized) empirical correlation. Hence Glij(x) has the same general form as (3) and, being an orderless statistics of local stationary features, can be used as a texture descriptor.\nIn practice, (Gatys et al., 2015a;b) use as texture descriptor the combination of several Gram matrices Gl, l \u2208 LT , where LT contains selected indices of convolutional layer in the descriptor CNN. This induces the following texture loss between images x and x0:\nLT (x;x0) = \u2211 l\u2208LT \u2016Gl(x)\u2212Gl(x0)\u201622 . (5)\nIn addition to the texture loss (5), (Gatys et al., 2015b) propose to use as content loss the one introduced by (Mahendran & Vedaldi, 2015), which compares images based on the output F li (x) of certain convolutional layers l \u2208 LC\n(without computing further statistics such as the Gram matrices). In formulas\nLC(x;y) = \u2211 l\u2208LC Nl\u2211 i=1 \u2016F li (x)\u2212 F li (y)\u201622 , (6)\nwhere Nl is the number of maps (feature channels) in layer l of the descriptor CNN. The key difference with the texture loss (5) is that the content loss compares feature activations at corresponding spatial locations, and therefore preserves spatial information. Thus this loss is suitable for content information, but not for texture information.\nAnalogously to (Gatys et al., 2015a), we use the texture loss (5) alone when training a generator network for texture synthesis, and we use a weighted combination of the texture loss (5) and the content loss (6) when training a generator network for stylization. In the latter case, the set LC does not includes layers as shallow as the set LT as only the high-level content should be preserved."
        },
        {
            "heading": "3.2. Generator network for texture synthesis",
            "text": "We now discuss the architecture and the training procedure for the generator network g for the task of texture synthesis. We denote the parameters of the generator network as \u03b8. The network is trained to transform a noise vector z sampled from a certain distribution Z (which we set to be uniform i.i.d.) into texture samples that match, according to the texture loss (5), a certain prototype texture x0:\n\u03b8x0 = argmin \u03b8\nEz\u223cZ [LT (g(z; \u03b8), x0) ] . (7)\nNetwork architecture. We experimented with several architectures for the generator network g. The simplest are chains of convolutional, non-linear activation, and upsampling layers that start from a noise sample z in the form of\na small feature map and terminate by producing an image. While models of this type produce reasonable results, we found that multi-scale architectures result in images with smaller texture loss and better perceptual quality while using fewer parameters and training faster. Figure 2 contains a high-level representation of our reference multi-scale architecture, which we describe next.\nThe reference texture x0 is a tensor RM\u00d7M\u00d73 containing three color channels. For simplicity, assume that the spatial resolution M is a power of two. The input noise z comprises K random tensors zi \u2208 R M 2i \u00d7M\n2i , i = 1, 2, . . . ,K (we use M = 256 and K = 5) whose entries are i.i.d. sampled from a uniform distribution. Each random noise tensor is first processed by a sequence of convolutional and non-linear activation layers, then upsampled by a factor of two, and finally concatenated as additional feature channels to the partially processed tensor from the scale below. The last full-resolution tensor is ultimately mapped to an RGB image x by a bank of 1\u00d7 1 filters.\nEach convolution block in Figure 2 contains three convolutional layers, each of which is followed by a ReLU activation layer. The convolutional layers contain respectively 3\u00d7 3, 3\u00d7 3 and 1\u00d7 1 filters. Filers are computed densely (stride one) and applied using circular convolution to remove boundary effects, which is appropriate for textures. The number of feature channels, which equals the number of filters in the preceding bank, grows from a minimum of 8 to a maximum of 40. The supplementary material specifies in detail the network configuration which has only \u223c65K parameters, and can be compressed to \u223c300 Kb of mem-\nory.\nUpsampling layers use simple nearest-neighbour interpolation (we also experimented strided full-convolution (Long et al., 2015; Radford et al., 2015), but the results were not satisfying). We found that training benefited significantly from inserting batch normalization layers (Ioffe & Szegedy, 2015) right after each convolutional layer and, most importantly, right before the concatenation layers, since this balances gradients travelling along different branches of the network.\nLearning. Learning optimizes the objective (7) using stochastic gradient descent (SGD). At each iteration, SGD draws a mini-batch of noise vectors zk, k = 1, . . . , B, performs forward evaluation of the generator network to obtained the corresponding images xk = g(zk, \u03b8), performs forward evaluation of the descriptor network to obtain Gram matrices Gl(xk), l \u2208 LT , and finally computes the loss (5) (note that the corresponding terms Gl(x0) for the reference texture are constant). After that, the gradient of the texture loss with respect to the generator network parameters \u03b8 is computed using backpropagation, and the gradient is used to update the parameters. Note that LAPGAN (Denton et al., 2015) also performs multi-scale processing, but uses layer-wise training, whereas our generator is trained end-to-end."
        },
        {
            "heading": "3.3. Style transfer",
            "text": "In order to extend the method to the task of image stylization, we make several changes. Firstly, the generator net-\nwork x = g(y, z; \u03b8) is modified to take as input, in addition to the noise variable z, the image y to which the noise should be applied. The generator network is then trained to output an image x that is close in content to y and in texture/style to a reference texture x0. For example, y could be a photo of a person, and x0 an impressionist painting.\nNetwork architecture. The architecture is the same as the one used for texture synthesis with the important difference that now the noise tensors zi, i = 1, . . . ,K at the K scales are concatenated (as additional feature channels) with downsampled versions of the input image y. For this application, we found beneficial to increased the number of scales from K = 5 to K = 6.\nLearning. Learning proceeds by sampling noise vectors zi \u223c Z and natural images yi \u223c Y and then adjusting the parameters \u03b8 of the generator g(yi, zi; \u03b8) in order to minimize the combination of content and texture loss:\n\u03b8x0 = argmin \u03b8 Ez\u223cZ; y\u223cY [ (8)\nLT (g(y, z; \u03b8), x0) +\u03b1LC (g(y, z; \u03b8), y) ] .\nHere Z is the same noise distribution as for texture synthesis, Y empirical distribution on naturals image (obtained from any image collection), and \u03b1 a parameter that trades off preserving texture/style and content. In practice, we found that learning is surprisingly resilient to overfitting and that it suffices to approximate the distribution on natural images Y with a very small pool of images (e.g. 16). In fact, our qualitative results degraded using too many example images. We impute this to the fact that stylization\nby a convolutional architecture uses local operations; since the same local structures exist in different combinations and proportions in different natural images y, it is difficult for local operators to match in all cases the overall statistics of the reference texture x0, where structures exist in a fixed arbitrary proportion. Despite this limitation, the perceptual quality of the generated stylized images is usually very good, although for some styles we could not match the quality of the original stylization by optimization of (Gatys et al., 2015b)."
        },
        {
            "heading": "4. Experiments",
            "text": "Further technical details. The generator network weights were initialized using Xavier\u2019s method. Training used Torch7\u2019s implementation of Adam (Kingma & Ba, 2014), running it for 2000 iteration. The initial learning rate of 0.1 was reduced by a factor 0.7 at iteration 1000 and then again every 200 iterations. The batch size was set to 16. Similar to (Gatys et al., 2015a), the texture loss uses the layers LT = {relu1 1,relu2 1,relu3 1,relu4 1,relu5 1} of VGG-19 and the content loss the layer LC = {relu4 2}. Fully training a single model required just two hours on an NVIDIA Tesla K40, and visually appealing results could be obtained much faster, after just a few epochs.\nTexture synthesis. We compare our method to (Gatys et al., 2015a;b) using the popular implementation of (Johnson, 2015), which produces comparable if not better results\nthan the implementation eventually released by the authors. We also compare to the DCGAN (Radford et al., 2015) version of adversarial networks (Goodfellow et al., 2014). Since DCGAN training requires multiple example images for training, we extract those as sliding 64 \u00d7 64 patches from the 256 \u00d7 256 reference texture x0; then, since DCGAN is fully convolutional, we use it to generate larger 256\u00d7256 images simply by inputting a larger noise tensor. Finally, we compare to (Portilla & Simoncelli, 2000).\nFigure 4 shows the results obtained by the four methods on two challenging textures of (Portilla & Simoncelli, 2000). Qualitatively, our generator CNN and (Gatys et al., 2015a)\u2019s results are comparable and superior to the other methods; however, the generator CNN is much more efficient (see Sect. 4.1). Figure 1 includes further comparisons between the generator network and (Gatys et al., 2015a) and many others are included in the supplementary material.\nStyle transfer. For training, example natural images were extracted at random from the ImageNet ILSVRC 2012 data. As for the original method of (Gatys et al., 2015b), we found that style transfer is sensitive to the tradeoff parameter \u03b1 between texture and content loss in (6). At test time this parameter is not available in our method, but we found that the trade-off can still be adjusted by changing the magnitude of the input noise z (see Figure 5).\nWe compared our method to the one of (Gatys et al., 2015b; Johnson, 2015) using numerous style and content images, including the ones in (Gatys et al., 2015b), and found that results are qualitatively comparable. Representative comparisons (using a fixed parameter \u03b1) are included in Figure 3 and many more in the supplementary material. Other qualitative results are reported in Figure 7."
        },
        {
            "heading": "4.1. Speed and memory",
            "text": "We compare quantitatively the speed of our method and of the iterative optimization of (Gatys et al., 2015a) by measuring how much time it takes for the latter and for our gen-\nerator network to reach a given value of the lossLT (x,x0). Figure 6 shows that iterative optimization requires about 10 seconds to generate a sample x that has a loss comparable to the output x = g(z) of our generator network. Since an evaluation of the latter requires \u223c20ms, we achieve a 500\u00d7 speed-up, which is sufficient for real-time applications such as video processing. There are two reasons for this significant difference: the generator network is much smaller than the VGG-19 model evaluated at each iteration of (Gatys et al., 2015a), and our method requires a single network evaluation. By avoiding backpropagation, our method also uses significantly less memory (170 MB to generate a 256 \u00d7 256 sample, vs 1100 MB of (Gatys et al., 2015a))."
        },
        {
            "heading": "5. Discussion",
            "text": "We have presented a new deep learning approach for texture synthesis and image stylization. Remarkably, the ap-\nproach is able to generate complex textures and images in a purely feed-forward way, while matching the texture synthesis capability of (Gatys et al., 2015a), which is based on multiple forward-backward iterations. In the same vein as (Goodfellow et al., 2014; Dziugaite et al., 2015; Li et al., 2015), the success of this approach highlights the suitability of feed-forward networks for complex data generation and for solving complex tasks in general. The key to this success is the use of complex loss functions that involve different feed-forward architectures serving as \u201cexperts\u201d assessing the performance of the feed-forward generator.\nWhile our method generally obtains very good result for texture synthesis, going forward we plan to investigate better stylization losses to achieve a stylization quality comparable to (Gatys et al., 2015b) even for those cases (e.g. Figure 3.top) where our current method achieves less impressive results."
        },
        {
            "heading": "5.1. A note on generator architecture",
            "text": "Since the generator is only restricted to produce good images in terms of texture loss, nothing stops it from generating samples with small variance between them. Therefore, if a model archives lower texture loss it does not implicate that this model is preferable. The generator should be powerful enough to combine texture elements, but not too complex to degrade to similar samples. If degrading effect is noticed the noise amount increasing can help in certain cases. Figure 9 shows a bad case, with too much iteration performed. This degrading effect is similar to overfitting but there is no obvious way to control it as there is no analogue of validation set available."
        }
    ],
    "title": "Texture Networks: Feed-forward Synthesis of Textures and Stylized Images",
    "year": 2016
}