{
    "abstractText": "Metaheuristic algorithms such as particle swarm optimization, firefly algorithm and harmony search are now becoming powerful methods for solving many tough optimization problems. In this paper, we propose a new metaheuristic method, the Bat Algorithm, based on the echolocation behaviour of bats. We also intend to combine the advantages of existing algorithms into the new bat algorithm. After a detailed formulation and explanation of its implementation, we will then compare the proposed algorithm with other existing algorithms, including genetic algorithms and particle swarm optimization. Simulations show that the proposed algorithm seems much superior to other algorithms, and further studies are also discussed. Citation detail: X.-S. Yang, A New Metaheuristic Bat-Inspired Algorithm, in: Nature Inspired Cooperative Strategies for Optimization (NISCO 2010) (Eds. J. R. Gonzalez et al.), Studies in Computational Intelligence, Springer Berlin, 284, Springer, 65-74 (2010).",
    "authors": [
        {
            "affiliations": [],
            "name": "Xin-She Yang"
        }
    ],
    "id": "SP:3964c160d09f6de476cf0b7ce444fd0691bae6b0",
    "references": [
        {
            "authors": [
                "J.D. Altringham"
            ],
            "title": "Bats: Biology and Behaviour",
            "year": 1996
        },
        {
            "authors": [
                "T. Colin"
            ],
            "title": "The Varienty of Life",
            "year": 2000
        },
        {
            "authors": [
                "K. Deep",
                "J.C. Bansal"
            ],
            "title": "Mean particle swarm optimisation for function optimisation",
            "venue": "Int. J. Comput. Intel. Studies,",
            "year": 2009
        },
        {
            "authors": [
                "Z.W. Geem",
                "J.H. Kim",
                "G.V. Loganathan"
            ],
            "title": "A new heuristic optimization algorithm: Harmony",
            "venue": "search. Simulation,",
            "year": 2001
        },
        {
            "authors": [
                "D. Goldberg"
            ],
            "title": "Genetic Algorithms in Search, Optimiztion and Machine Learning",
            "year": 1989
        },
        {
            "authors": [
                "J.H. Holland"
            ],
            "title": "Adapation in Natural and Artificial Systems",
            "year": 1975
        },
        {
            "authors": [
                "J. Kennedy",
                "R. Eberhart"
            ],
            "title": "Particle swarm optimization",
            "venue": "Proc. IEEE Int. Conf. Neural Networks. Perth, Australia,",
            "year": 1995
        },
        {
            "authors": [
                "S. Kirkpatrick",
                "C.D. Gelatt",
                "M.P. Vecchi"
            ],
            "title": "Optimization by simulated annealing",
            "year": 1983
        },
        {
            "authors": [
                "J.J. Liang",
                "P.N. Suganthan",
                "K. Deb"
            ],
            "title": "Novel composition test functions for numerical global optimization",
            "venue": "Proc. IEEE Int. Swarm Intel. Symp.,",
            "year": 2005
        },
        {
            "authors": [
                "M. Mitchell"
            ],
            "title": "An Introduction to Genetic Algorithms",
            "year": 1998
        },
        {
            "authors": [
                "Yang",
                "X.-S"
            ],
            "title": "Nature-inspired Metaheuristic Algorithms",
            "year": 2008
        },
        {
            "authors": [
                "Yang",
                "X.-S"
            ],
            "title": "Harmony search as a metaheuristic algorithm, in: Music-Inspired Harmony Search Algorithm: Theory and Applications",
            "venue": "(eds Z. W. Geem). Springer,",
            "year": 2009
        }
    ],
    "sections": [
        {
            "text": "ar X\niv :1\n00 4.\n41 70\nv1 [\nm at\nh. O\nC ]\n2 3\nCitation detail:\nX.-S. Yang, A New Metaheuristic Bat-Inspired Algorithm, in: Nature Inspired Cooperative Strategies for Optimization (NISCO 2010) (Eds. J. R. Gonzalez et al.), Studies in Computational Intelligence, Springer Berlin, 284, Springer, 65-74 (2010)."
        },
        {
            "heading": "1 Introduction",
            "text": "Metaheuristic algorithms such as particle swarm optimization and simulated annealing are now becoming powerful methods for solving many tough optimization problems [3- 7,11]. The vast majority of heuristic and metaheuristic algorithms have been derived from the behaviour of biological systems and/or physical systems in nature. For example, particle swarm optimization was developed based on the swarm behaviour of birds and fish [7, 8], while simulated annealing was based on the annealing process of metals [9].\nNew algorithms are also emerging recently, including harmony search and the firefly algorithm. The former was inspired by the improvising process of composing a piece of music [4], while the latter was formulated based on the flashing behaviour of fireflies [14]. Each of these algorithms has certain advantages and disadvantages. For example, simulating annealing can almost guarantee to find the optimal solution if the cooling process is slow enough and the simulation is running long enough; however, the fine adjustment in parameters does affect the convergence rate of the optimization process. A natural question is whether it is possible to combine major advantages of these algorithms and try to develop a potentially better algorithm? This paper is such an attempt to address this issue.\nIn this paper, we intend to propose a new metaheuristic method, namely, the Bat Algorithm (BA), based on the echolocation behaviour of bats. The capability of echolocation of microbats is fascinating as these bats can find their prey and discriminate different types of insects even in complete darkness. We will first formulate the bat algorithm by idealizing the echolocation behaviour of bats. We then describe how it works and make comparison with other existing algorithms. Finally, we will discuss some implications for further studies."
        },
        {
            "heading": "2 Echolocation of bats",
            "text": ""
        },
        {
            "heading": "2.1 Behaviour of microbats",
            "text": "Bats are fascinating animals. They are the only mammals with wings and they also have advanced capability of echolocation. It is estimated that there are about 996 different species which account for up to 20% of all mammal species [1, 2]. Their size ranges from the tiny bumblebee bat (of about 1.5 to 2g) to the giant bats with wingspan of about 2 m and weight up to about 1 kg. Microbats typically have forearm length of about 2.2 to 11cm. Most bats uses echolocation to a certain degree; among all the species, microbats are a famous example as microbats use echolocation extensively while megabats do not [12, 13].\nMost microbats are insectivores. Microbats use a type of sonar, called, echolocation, to detect prey, avoid obstacles, and locate their roosting crevices in the dark. These bats emit a very loud sound pulse and listen for the echo that bounces back from the surrounding objects. Their pulses vary in properties and can be correlated with their hunting strategies, depending on the species. Most bats use short, frequency-modulated signals to sweep through about an octave, while others more often use constant-frequency signals for echolocation. Their signal bandwidth varies depends on the species, and often increased by using more harmonics."
        },
        {
            "heading": "2.2 Acoustics of Echolocation",
            "text": "Though each pulse only lasts a few thousandths of a second (up to about 8 to 10 ms), however, it has a constant frequency which is usually in the region of 25kHz to 150 kHz. The typical range of frequencies for most bat species are in the region between 25kHz and 100kHz, though some species can emit higher frequencies up to 150 kHz. Each ultrasonic burst may last typically 5 to 20 ms, and microbats emit about 10 to 20 such sound bursts every second. When hunting for prey, the rate of pulse emission can be sped up to about 200 pulses per second when they fly near their prey. Such short sound bursts imply the fantastic ability of the signal processing power of bats. In fact, studies shows the integration time of the bat ear is typically about 300 to 400 \u00b5s.\nAs the speed of sound in air is typically v = 340 m/s, the wavelength \u03bb of the ultrasonic sound bursts with a constant frequency f is given by\n\u03bb = v\nf , (1)\nwhich is in the range of 2mm to 14mm for the typical frequency range from 25kHz to 150 kHz. Such wavelengths are in the same order of their prey sizes.\nAmazingly, the emitted pulse could be as loud as 110 dB, and, fortunately, they are in the ultrasonic region. The loudness also varies from the loudest when searching for prey and to a quieter base when homing towards the prey. The travelling range of such short pulses are typically a few metres, depending on the actual frequencies [12]. Microbats can manage to avoid obstacles as small as thin human hairs.\nStudies show that microbats use the time delay from the emission and detection of the echo, the time difference between their two ears, and the loudness variations of the echoes to build up three dimensional scenario of the surrounding. They can detect the distance and orientation of the target, the type of prey, and even the moving speed of the prey such as small insects. Indeed, studies suggested that bats seem to be able to discriminate targets by the variations of the Doppler effect induced by the wing-flutter rates of the target insects [1].\nObviously, some bats have good eyesight, and most bats also have very sensitive smell sense. In reality, they will use all the senses as a combination to maximize the efficient detection of prey and smooth navigation. However, here we are only interested in the echolocation and the associated behaviour.\nSuch echolocation behaviour of microbats can be formulated in such a way that it can be associated with the objective function to be optimized, and this make it possible to formulate new optimization algorithms. In the rest of this paper, we will first outline the basic formulation of the Bat Algorithm (BA) and then discuss the implementation and comparison in detail."
        },
        {
            "heading": "3 Bat Algorithm",
            "text": "If we idealize some of the echolocation characteristics of microbats, we can develop various bat-inspired algorithms or bat algorithms. For simplicity, we now use the following approximate or idealized rules:\n1. All bats use echolocation to sense distance, and they also \u2018know\u2019 the difference between food/prey and background barriers in some magical way;\n2. Bats fly randomly with velocity vi at position xi with a fixed frequency fmin, varying wavelength \u03bb and loudness A0 to search for prey. They can automatically adjust the wavelength (or frequency) of their emitted pulses and adjust the rate of pulse emission r \u2208 [0, 1], depending on the proximity of their target;\n3. Although the loudness can vary in many ways, we assume that the loudness varies from a large (positive) A0 to a minimum constant value Amin.\nAnother obvious simplification is that no ray tracing is used in estimating the time delay and three dimensional topography. Though this might be a good feature for the application in computational geometry, however, we will not use this as it is more computationally extensive in multidimensional cases.\nIn addition to these simplified assumptions, we also use the following approximations, for simplicity. In general the frequency f in a range [fmin, fmax] corresponds to a range of wavelengths [\u03bbmin, \u03bbmax]. For example a frequency range of [20kHz, 500kHz] corresponds to a range of wavelengths from 0.7mm to 17mm.\nFor a given problem, we can also use any wavelength for the ease of implementation. In the actual implementation, we can adjust the range by adjusting the wavelengths (or frequencies), and the detectable range (or the largest wavelength) should be chosen\nBat Algorithm Objective function f(x), x = (x1, ..., xd) T\nInitialize the bat population xi (i = 1, 2, ..., n) and vi Define pulse frequency fi at xi Initialize pulse rates ri and the loudness Ai while (t <Max number of iterations) Generate new solutions by adjusting frequency, and updating velocities and locations/solutions [equations (2) to (4)]\nif (rand > ri) Select a solution among the best solutions Generate a local solution around the selected best solution end if Generate a new solution by flying randomly if (rand < Ai & f(xi) < f(x\u2217)) Accept the new solutions Increase ri and reduce Ai end if\nRank the bats and find the current best x\u2217 end while Postprocess results and visualization\nFigure 1: Pseudo code of the bat algorithm (BA).\nsuch that it is comparable to the size of the domain of interest, and then toning down to smaller ranges. Furthermore, we do not necessarily have to use the wavelengths themselves, instead, we can also vary the frequency while fixing the wavelength \u03bb. This is because \u03bb and f are related due to the fact \u03bbf is constant. We will use this later approach in our implementation.\nFor simplicity, we can assume f \u2208 [0, fmax]. We know that higher frequencies have short wavelengths and travel a shorter distance. For bats, the typical ranges are a few metres. The rate of pulse can simply be in the range of [0, 1] where 0 means no pulses at all, and 1 means the maximum rate of pulse emission.\nBased on these approximations and idealization, the basic steps of the Bat Algorithm (BA) can be summarized as the pseudo code shown in Fig. 1."
        },
        {
            "heading": "3.1 Movement of Virtual Bats",
            "text": "In simulations, we use virtual bats naturally. We have to define the rules how their positions xi and velocities vi in a d-dimensional search space are updated. The new solutions xt\ni and velocities vt i at time step t are given by\nfi = fmin + (fmax \u2212 fmin)\u03b2, (2)\nv t i = v t\u22121 i + (xti \u2212 x\u2217)fi, (3)\nx t i = xt\u22121 i + vt i , (4)\nwhere \u03b2 \u2208 [0, 1] is a random vector drawn from a uniform distribution. Here x\u2217 is the current global best location (solution) which is located after comparing all the solutions\namong all the n bats. As the product \u03bbifi is the velocity increment, we can use either fi (or \u03bbi ) to adjust the velocity change while fixing the other factor \u03bbi (or fi), depending on the type of the problem of interest. In our implementation, we will use fmin = 0 and fmax = 100, depending the domain size of the problem of interest. Initially, each bat is randomly assigned a frequency which is drawn uniformly from [fmin, fmax].\nFor the local search part, once a solution is selected among the current best solutions, a new solution for each bat is generated locally using random walk\nxnew = xold + \u01ebA t, (5)\nwhere \u01eb \u2208 [\u22121, 1] is a random number, while At =<At i > is the average loudness of all the bats at this time step. The update of the velocities and positions of bats have some similarity to the procedure in the standard particle swarm optimization [7] as fi essentially controls the pace and range of the movement of the swarming particles. To a degree, BA can be considered as a balanced combination of the standard particle swarm optimization and the intensive local search controlled by the loudness and pulse rate."
        },
        {
            "heading": "3.2 Loudness and Pulse Emission",
            "text": "Furthermore, the loudness Ai and the rate ri of pulse emission have to be updated accordingly as the iterations proceed. As the loudness usually decreases once a bat has found its prey, while the rate of pulse emission increases, the loudness can be chosen as any value of convenience. For example, we can use A0 = 100 and Amin = 1. For simplicity, we can also use A0 = 1 and Amin = 0, assuming Amin = 0 means that a bat has just found the prey and temporarily stop emitting any sound. Now we have\nAt+1 i = \u03b1At i , rt+1 i = r0 i [1\u2212 exp(\u2212\u03b3t)], (6)\nwhere \u03b1 and \u03b3 are constants. In fact, \u03b1 is similar to the cooling factor of a cooling schedule in the simulated annealing [9]. For any 0 < \u03b1 < 1 and \u03b3 > 0, we have\nAt i \u2192 0, rt i \u2192 r0 i , as t \u2192 \u221e. (7)\nIn the simplicity case, we can use \u03b1 = \u03b3, and we have used \u03b1 = \u03b3 = 0.9 in our simulations. The choice of parameters requires some experimenting. Initially, each bat should have different values of loudness and pulse emission rate, and this can be achieved by randomization. For example, the initial loudness A0\ni can typically be [1, 2],\nwhile the initial emission rate r0 i can be around zero, or any value r0 i \u2208 [0, 1] if using (6). Their loudness and emission rates will be updated only if the new solutions are improved, which means that these bats are moving towards the optimal solution."
        },
        {
            "heading": "4 Validation and Comparison",
            "text": "From the pseudo code, it is relatively straightforward to implement the Bat Algorithm in any programming language. For the ease of visualization, we have implemented it using Matlab for various test functions."
        },
        {
            "heading": "4.1 Benchmark Functions",
            "text": "There are many standard test functions for validating new algorithms. In the current benchmark validation, we have chosen the well-known Rosenbrock\u2019s function\nf(x) =\nd\u22121 \u2211\ni=1\n(1\u2212 x2i ) 2 + 100(xi+1 \u2212 x 2 i ) 2, \u22122.048 \u2264 xi \u2264 2.048, (8)\nand the eggcrate function\ng(x, y) = x2 + y2 + 25(sin2 x+ sin2 y), (x, y) \u2208 [\u22122\u03c0, 2\u03c0]\u00d7 [\u22122\u03c0, 2\u03c0]. (9)\nWe know that f(x) has a global minimum fmin = 0 at (1, 1) in 2D, while g(x, y) has a global minimum gmin = 0 at (0, 0). De Jong\u2019s standard sphere function\nh(x) =\nd \u2211\ni=1\nx2 i , \u221210 \u2264 xi \u2264 10, (10)\nhas also been used. Its minimum is hmin = 0 at (0, 0, ..., 0) for any d \u2265 3. In addition, we have also used other standard test functions for numerical global optimization [10] such as Ackley\u2019s function\ns(x) = 20 + e\u2212 20 exp [ \u2212 0.2\n\u221a \u221a \u221a \u221a 1\nd\nd \u2211\ni=1\nx2 i\n] \u2212 exp[ 1\nd\nd \u2211\ni=1\ncos(2\u03c0xi)], (11)\nwhere \u221230 \u2264 xi \u2264 30. It has the global minimum smin = 0 at (0, 0, ..., 0). Michalewicz\u2019s test function\nf(x) = \u2212 d \u2211\ni=1\nsin(xi) [ sin( ix2 i \u03c0 ) ]2m , (m = 10), (12)\nhas d! local optima in the the domain 0 \u2264 xi \u2264 \u03c0 where i = 1, 2, ..., d. The global minimum is f\u2217 \u2248 \u22121.801 for d = 2, while f\u2217 \u2248 \u22124.6877 for d = 5.\nIn our implementation, we use n = 25 to 50 virtual bats, and \u03b1 = 0.9. For Rosenbrock\u2019s 2-D banana function, the paths of 25 virtual bats during the consecutive 20 time steps are shown in Fig. 2 where we can see that the bats converge at the global optimum (1, 1). For the multimodal eggcrate function, a snapshot of the last 10 iterations is shown in Fig. 3. Again, all bats move towards the global best (0, 0)."
        },
        {
            "heading": "4.2 Comparison with Other Algorithms",
            "text": "In order to compare the performance of the new algorithm, we have tested it against other heuristic algorithms, including genetic algorithms (GA) [5, 6, 11], and particle swarm optimization (PSO) [7, 8]. There are many variants of PSO, and some variants such as the mean PSO could perform better than the standard PSO [3]; however, the standard PSO is by far the most popularly used. Therefore, we will also use the standard PSO in our comparison.\nThere are many ways to carry out the comparison of algorithm performance, and two obvious approaches are: to compare the numbers of function evaluations for a given tolerance or accuracy, or to compare their accuracies for a fixed number of function evaluations. Here we will use the first approach. In our simulations, we use a fixed tolerance \u01eb \u2264 10\u22125, and we run each algorithm for 100 times so that we can do meaningful statistical analysis.\nFor genetic algorithms, we have used the standard version with no elitism with the mutation probability of pm = 0.05 and crossover probability of 0.95. For particle swarm optimization, we have also used the standard version with learning parameters \u03b1 = =\n\u00af 2 and the inertia function I = 1 [7, 8]. The simulations have been carried out\nusing Matlab on a standard 3GHz desktop computer. Each run with about 10,000 function evaluations typically takes less than 5 seconds. Furthermore, we have tried to use different population sizes from n = 10 to 250, and we found that for most problems, n = 15 to 50 is sufficient. Therefore, we use a fixed population n = 40 for all simulations. Table 1 shows the number of function evaluations in the form of mean \u00b1 the standard deviation (success rate of the algorithm in finding the global optima).\nFrom Table 1, we can see that PSO performs much better than genetic algorithms, while the Bat Algorithm is much superior to other algorithms in terms of accuracy and efficiency. This is no surprising as the aim of developing the new algorithm was to try to use the advantages of existing algorithms and other interesting feature inspired by the fantastic behaviour of echolocation of microbats.\nIf we replace the variations of the frequency fi by a random parameter and setting Ai = 0 and ri = 1, the bat algorithm essentially becomes the standard Particle Swarm Optimization (PSO). Similarly, if we do not use the velocities, but we use fixed loudness and rate: Ai and ri. For example, Ai = ri = 0.7, this algorithm is virtually reduced to a simple Harmony Search (HS) as the frequency/wavelength change is essentially the pitch adjustment, while the rate of pulse emission is similar to the harmonic acceptance rate (here with a twist) in the harmony search algorithm [4, 15]. The current studies implies that the proposed new algorithm is potentially more powerful and thus should be investigated further in many applications of engineering and industrial optimization problems."
        },
        {
            "heading": "5 Discussions",
            "text": "In this paper, we have successfully formulated a new Bat Algorithm for continuous constrained optimization problems. From the formulation of the Bat Algorithm and its implementation and comparison, we can see that it is a very promising algorithm. It is\npotentially more powerful than particle swarm optimization and genetic algorithms as well as Harmony Search. The primary reason is that BA uses a good combination of major advantages of these algorithms in some way. Moreover, PSO and harmony search are the special cases of the Bat Algorithm under appropriate simplifications.\nIn addition, the fine adjustment of the parameters \u03b1 and \u03b3 can affect the convergence rate of the bat algorithm. In fact, parameter \u03b1 acts in a similar role as the cooling schedule in the simulated annealing. Though the implementation is more complicated than many other metaheuristic algorithms; however, it does show that it utilizes a balanced combination of the advantages of existing successful algorithms with innovative feature based on the echolocation behaviour of bats. New solutions are generated by adjusting frequencies, loudness and pulse emission rates, while the proposed solution is accepted or not depends on the quality of the solutions controlled or characterized by loudness and pulse rate which are in turn related to the closeness or the fitness of the locations/solution to the global optimal solution.\nThe exciting results suggest that more studies will highly be needed to carry out the sensitivity analysis, to analyze the rate of algorithm convergence, and to improve the convergence rate even further. More extensive comparison studies with a more wide range of existing algorithms using much tough test functions in higher dimensions will pose more challenges to the algorithms, and thus such comparisons will potentially reveal the virtues and weakness of all the algorithms of interest.\nAn interesting extension will be to use different schemes of wavelength or frequency variations instead of the current linear implementation. In addition, the rates of pulse emission and loudness can also be varied in a more sophisticated manner. Another extension for discrete problems is to use the time delay between pulse emission and the echo bounced back. For example, in the travelling salesman problem, the distance between two adjacent nodes/cities can easily be coded as time delay. As microbats use time difference between their two ears to obtain three-dimensional information, they can identify the type of prey and the velocity of a flying insect. Therefore, a further natural extension to the current bat algorithm would be to use the directional echolocation and Doppler effect, which may lead to even more interesting variants and new algorithms."
        }
    ],
    "title": "A New Metaheuristic Bat-Inspired Algorithm",
    "year": 2024
}