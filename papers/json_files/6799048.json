{
    "abstractText": "Numerous models for grounded language understanding have been recently proposed, including (i) generic models that can be easily adapted to any given task and (ii) intuitively appealing modular models that require background knowledge to be instantiated. We compare both types of models in how much they lend themselves to a particular form of systematic generalization. Using a synthetic VQA test, we evaluate which models are capable of reasoning about all possible object pairs after training on only a small subset of them. Our findings show that the generalization of modular models is much more systematic and that it is highly sensitive to the module layout, i.e. to how exactly the modules are connected. We furthermore investigate if modular models that generalize well could be made more end-to-end by learning their layout and parametrization. We find that endto-end methods from prior work often learn inappropriate layouts or parametrizations that do not facilitate systematic generalization. Our results suggest that, in addition to modularity, systematic generalization in language understanding may require explicit regularizers or priors.",
    "authors": [
        {
            "affiliations": [],
            "name": "Dzmitry Bahdanau"
        },
        {
            "affiliations": [],
            "name": "Shikhar Murty"
        }
    ],
    "id": "SP:a91f2e1cf9298403f1f4e685ab88b9a8be7975c7",
    "references": [
        {
            "authors": [
                "Aishwarya Agrawal",
                "Dhruv Batra",
                "Devi Parikh"
            ],
            "title": "Analyzing the Behavior of Visual Question Answering Models",
            "venue": "In Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing,",
            "year": 2016
        },
        {
            "authors": [
                "Jacob Andreas",
                "Marcus Rohrbach",
                "Trevor Darrell",
                "Dan Klein"
            ],
            "title": "Neural Module Networks",
            "venue": "In Proceedings of 2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR),",
            "year": 2016
        },
        {
            "authors": [
                "Dzmitry Bahdanau",
                "Kyunghyun Cho",
                "Yoshua Bengio"
            ],
            "title": "Neural Machine Translation by Jointly Learning to Align and Translate",
            "venue": "In Proceedings of the 2015 International Conference on Learning Representations,",
            "year": 2015
        },
        {
            "authors": [
                "Joost Bastings",
                "Marco Baroni",
                "Jason Weston",
                "Kyunghyun Cho",
                "Douwe Kiela"
            ],
            "title": "Jump to better conclusions: SCAN both left and right",
            "venue": "In Proceedings of the 2018 EMNLP Workshop BlackboxNLP: Analyzing and Interpreting Neural Networks for NLP,",
            "year": 2018
        },
        {
            "authors": [
                "Eli Bingham",
                "Piero Molino",
                "Paul Szerlip",
                "Obermeyer Fritz",
                "Goodman Noah"
            ],
            "title": "Characterizing how Visual Question Answering scales with the world",
            "venue": "In NIPS 2017 Visually-Grounded Interaction and Language Workshop,",
            "year": 2017
        },
        {
            "authors": [
                "Francisco Calvo",
                "Eliana Colunga"
            ],
            "title": "The statistical brain: Reply to Marcus The algebraic mind",
            "venue": "In Proceedings of the Annual Meeting of the Cognitive Science Society,",
            "year": 2003
        },
        {
            "authors": [
                "Jerry A. Fodor",
                "Zenon W"
            ],
            "title": "Pylyshyn. Connectionism and cognitive architecture: A critical analysis",
            "year": 1988
        },
        {
            "authors": [
                "Alexander L. Gaunt",
                "Marc Brockschmidt",
                "Nate Kushman",
                "Daniel Tarlow"
            ],
            "title": "Differentiable Programs with Neural Libraries",
            "venue": "In Proceedings of the 34th International Conference on Machine Learning,",
            "year": 2016
        },
        {
            "authors": [
                "Yichen Gong",
                "Heng Luo",
                "Jian Zhang"
            ],
            "title": "Natural Language Inference over Interaction Space",
            "venue": "In Proceedings of the 2018 International Conference on Learning Representations,",
            "year": 2017
        },
        {
            "authors": [
                "Nitish Gupta",
                "Mike Lewis"
            ],
            "title": "Neural Compositional Denotational Semantics for Question Answering",
            "venue": "In Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing. Association for Computational Linguistics,",
            "year": 2018
        },
        {
            "authors": [
                "Suchin Gururangan",
                "Swabha Swayamdipta",
                "Omer Levy",
                "Roy Schwartz",
                "Samuel R. Bowman",
                "Noah A. Smith"
            ],
            "title": "Annotation Artifacts in Natural Language Inference Data",
            "venue": "In Proceedings of NAACL-HLT",
            "year": 2018
        },
        {
            "authors": [
                "Kaiming He",
                "Xiangyu Zhang",
                "Shaoqing Ren",
                "Jian Sun"
            ],
            "title": "Deep residual learning for image recognition",
            "venue": "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,",
            "year": 2016
        },
        {
            "authors": [
                "Ronghang Hu",
                "Jacob Andreas",
                "Marcus Rohrbach",
                "Trevor Darrell",
                "Kate Saenko"
            ],
            "title": "Learning to Reason: End-to-End Module Networks for Visual Question Answering",
            "venue": "In Proceedings of 2017 IEEE International Conference on Computer Vision,",
            "year": 2017
        },
        {
            "authors": [
                "Ronghang Hu",
                "Jacob Andreas",
                "Trevor Darrell",
                "Kate Saenko"
            ],
            "title": "Explainable Neural Computation via Stack Neural Module Networks",
            "venue": "In Proceedings of 2018 European Conference on Computer Vision,",
            "year": 2018
        },
        {
            "authors": [
                "Drew A. Hudson",
                "Christopher D. Manning"
            ],
            "title": "Compositional Attention Networks for Machine Reasoning",
            "venue": "In Proceedings of the 2018 International Conference on Learning Representations,",
            "year": 2018
        },
        {
            "authors": [
                "Sergey Ioffe",
                "Christian Szegedy"
            ],
            "title": "Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift",
            "venue": "In Proceedings of the 32nd International Conference on Machine Learning, ICML 2015,",
            "year": 2015
        },
        {
            "authors": [
                "Robin Jia",
                "Percy Liang"
            ],
            "title": "Adversarial Examples for Evaluating Reading Comprehension Systems",
            "venue": "Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing,",
            "year": 2017
        },
        {
            "authors": [
                "Yu Jiang",
                "Vivek Natarajan",
                "Xinlei Chen",
                "Marcus Rohrbach",
                "Dhruv Batra",
                "Devi Parikh"
            ],
            "title": "Pythia v0.1: The winning entry to the vqa challenge 2018",
            "venue": "https://github.com/ facebookresearch/pythia,",
            "year": 2018
        },
        {
            "authors": [
                "Justin Johnson",
                "Bharath Hariharan",
                "Laurens van der Maaten",
                "Li Fei-Fei",
                "C. Lawrence Zitnick",
                "Ross Girshick"
            ],
            "title": "CLEVR: A Diagnostic Dataset for Compositional Language and Elementary Visual Reasoning",
            "venue": "In Proceedings of 2017 IEEE Conference on Computer Vision and Pattern Recognition (CVPR),",
            "year": 2016
        },
        {
            "authors": [
                "Justin Johnson",
                "Bharath Hariharan",
                "Laurens van der Maaten",
                "Judy Hoffman",
                "Li Fei-Fei",
                "C. Lawrence Zitnick",
                "Ross Girshick"
            ],
            "title": "Inferring and Executing Programs for Visual Reasoning",
            "venue": "In Proceedings of 2017 IEEE International Conference on Computer Vision,",
            "year": 2017
        },
        {
            "authors": [
                "Anjuli Kannan",
                "Karol Kurach",
                "Sujith Ravi",
                "Tobias Kaufmann",
                "Andrew Tomkins",
                "Balint Miklos",
                "Greg Corrado",
                "Laszlo Lukacs",
                "Marina Ganea",
                "Peter Young",
                "Vivek Ramavajjala"
            ],
            "title": "Smart Reply: Automated Response Suggestion for Email",
            "venue": "In Proceedings of the 22Nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, KDD",
            "year": 2016
        },
        {
            "authors": [
                "Diederik P. Kingma",
                "Jimmy Ba"
            ],
            "title": "Adam: A Method for Stochastic Optimization",
            "venue": "In Proceedings of the 2015 International Conference on Learning Representations,",
            "year": 2015
        },
        {
            "authors": [
                "Alexander Kuhnle",
                "Ann Copestake"
            ],
            "title": "ShapeWorld - A new test methodology for multimodal language understanding",
            "venue": "[cs],",
            "year": 2017
        },
        {
            "authors": [
                "Brenden M. Lake",
                "Marco Baroni"
            ],
            "title": "Generalization without systematicity: On the compositional skills of sequence-to-sequence recurrent networks",
            "venue": "In Proceedings of the 36th International Conference on Machine Learning,",
            "year": 2018
        },
        {
            "authors": [
                "Joao Loula",
                "Marco Baroni",
                "Brenden M. Lake"
            ],
            "title": "Rearranging the Familiar: Testing Compositional Generalization in Recurrent Networks",
            "venue": "In Proceedings of the 2018 BlackboxNLP EMNLP Workshop,",
            "year": 2018
        },
        {
            "authors": [
                "Mateusz Malinowski",
                "Mario Fritz"
            ],
            "title": "A Multi-world Approach to Question Answering About Realworld Scenes Based on Uncertain Input",
            "venue": "In Proceedings of the 27th International Conference on Neural Information Processing Systems,",
            "year": 2014
        },
        {
            "authors": [
                "Gary F. Marcus"
            ],
            "title": "Rethinking Eliminative Connectionism",
            "venue": "Cognitive Psychology,",
            "year": 1998
        },
        {
            "authors": [
                "Gary F. Marcus"
            ],
            "title": "The algebraic mind: Integrating connectionism and cognitive science",
            "venue": "MIT press,",
            "year": 2003
        },
        {
            "authors": [
                "Ethan Perez",
                "Florian Strub",
                "Harm de Vries",
                "Vincent Dumoulin",
                "Aaron Courville"
            ],
            "title": "FiLM: Visual Reasoning with a General Conditioning Layer",
            "venue": "Proceedings of the 2017 AAAI Conference on Artificial Intelligence,",
            "year": 2017
        },
        {
            "authors": [
                "Adam Santoro",
                "David Raposo",
                "David G.T. Barrett",
                "Mateusz Malinowski",
                "Razvan Pascanu",
                "Peter Battaglia",
                "Timothy Lillicrap"
            ],
            "title": "A simple neural network module for relational reasoning",
            "venue": "In Advances in Neural Information Processing Systems",
            "year": 2017
        },
        {
            "authors": [
                "Paul Smolensky"
            ],
            "title": "The constituent structure of connectionist mental states: A reply to Fodor and Pylyshyn",
            "venue": "Southern Journal of Philosophy,",
            "year": 1987
        },
        {
            "authors": [
                "Joseph Suarez",
                "Justin Johnson",
                "Fei-Fei Li"
            ],
            "title": "DDRprog: A CLEVR Differentiable Dynamic Reasoning Programmer",
            "venue": "[cs],",
            "year": 2018
        },
        {
            "authors": [
                "Ilya Sutskever",
                "Oriol Vinyals",
                "Quoc V Le"
            ],
            "title": "Sequence to Sequence Learning with Neural Networks",
            "venue": "In Advances in Neural Information Processing Systems",
            "year": 2014
        },
        {
            "authors": [
                "Wei Wang",
                "Ming Yan",
                "Chen Wu"
            ],
            "title": "Multi-Granularity Hierarchical Attention Fusion Networks for Reading Comprehension and Question Answering",
            "venue": "In Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers),",
            "year": 2018
        }
    ],
    "sections": [
        {
            "heading": "1 INTRODUCTION",
            "text": "In recent years, neural network based models have become the workhorse of natural language understanding and generation. They empower industrial machine translation (Wu et al., 2016) and text generation (Kannan et al., 2016) systems and show state-of-the-art performance on numerous benchmarks including Recognizing Textual Entailment (Gong et al., 2017), Visual Question Answering (Jiang et al., 2018), and Reading Comprehension (Wang et al., 2018). Despite these successes, a growing body of literature suggests that these approaches do not generalize outside of the specific distributions on which they are trained, something that is necessary for a language understanding system to be widely deployed in the real world. Investigations on the three aforementioned tasks have shown that neural models easily latch onto statistical regularities which are omnipresent in existing datasets (Agrawal et al., 2016; Gururangan et al., 2018; Jia & Liang, 2017) and extremely hard to avoid in large scale data collection. Having learned such dataset-specific solutions, neural networks fail to make correct predictions for examples that are even slightly out of domain, yet are trivial for humans. These findings have been corroborated by a recent investigation on a synthetic instruction-following task (Lake & Baroni, 2018), in which seq2seq models (Sutskever et al., 2014; Bahdanau et al., 2015) have shown little systematicity (Fodor & Pylyshyn, 1988) in how they generalize, that is they do not learn general rules on how to compose words and fail spectacularly when for example asked to interpret \u201cjump twice\u201d after training on \u201cjump\u201d, \u201crun twice\u201d and \u201cwalk twice\u201d.\nAn appealing direction to improve the generalization capabilities of neural models is to add modularity and structure to their design to make them structurally resemble the kind of rules they are\n\u2217Equal contribution\nar X\niv :1\n81 1.\n12 88\n9v 3\n[ cs\n.C L\n] 2\n1 A\npr 2\nsupposed to learn (Andreas et al., 2016; Gaunt et al., 2016). For example, in the Neural Module Network paradigm (NMN, Andreas et al. (2016)), a neural network is assembled from several neural modules, where each module is meant to perform a particular subtask of the input processing, much like a computer program composed of functions. The NMN approach is intuitively appealing but its widespread adoption has been hindered by the large amount of domain knowledge that is required to decide (Andreas et al., 2016) or predict (Johnson et al., 2017; Hu et al., 2017) how the modules should be created (parametrization) and how they should be connected (layout) based on a natural language utterance. Besides, their performance has often been matched by more traditional neural models, such as FiLM (Perez et al., 2017), Relations Networks (Santoro et al., 2017), and MAC networks (Hudson & Manning, 2018). Lastly, generalization properties of NMNs, to the best of our knowledge, have not been rigorously studied prior to this work.\nHere, we investigate the impact of explicit modularity and structure on systematic generalization of NMNs and contrast their generalization abilities to those of generic models. For this case study, we focus on the task of visual question answering (VQA), in particular its simplest binary form, when the answer is either \u201cyes\u201d or \u201cno\u201d. Such a binary VQA task can be seen as a fundamental task of language understanding, as it requires one to evaluate the truth value of the utterance with respect to the state of the world. Among many systematic generalization requirements that are desirable for a VQA model, we choose the following basic one: a good model should be able to reason about all possible object combinations despite being trained on a very small subset of them. We believe that this is a key prerequisite to using VQA models in the real world, because they should be robust at handling unlikely combinations of objects. We implement our generalization demands in the form of a new synthetic dataset, called Spatial Queries On Object Pairs (SQOOP), in which a model has to perform spatial relational reasoning about pairs of randomly scattered letters and digits in the image (e.g. answering the question \u201cIs there a letter A left of a letter B?\u201d). The main challenge in SQOOP is that models are evaluated on all possible object pairs, but trained on only a subset of them.\nOur first finding is that NMNs do generalize better than other neural models when layout and parametrization are chosen appropriately. We then investigate which factors contribute to improved generalization performance and find that using a layout that matches the task (i.e. a tree layout, as opposed to a chain layout), is crucial for solving the hardest version of our dataset. Lastly, and perhaps most importantly, we experiment with existing methods for making NMNs more end-to-end by inducing the module layout (Johnson et al., 2017) or learning module parametrization through soft-attention over the question (Hu et al., 2017). Our experiments show that such end-to-end approaches often fail by not converging to tree layouts or by learning a blurred parameterization for modules, which results in poor generalization on the hardest version of our dataset. We believe that our findings challenge the intuition of researchers in the field and provide a foundation for improving systematic generalization of neural approaches to language understanding."
        },
        {
            "heading": "2 THE SQOOP DATASET FOR TESTING SYSTEMATIC GENERALIZATION",
            "text": "We perform all experiments of this study on the SQOOP dataset. SQOOP is a minimalistic VQA task that is designed to test the model\u2019s ability to interpret unseen combinations of known relation and object words. Clearly, given known objects X, Y and a known relation R, a human can easily verify whether or not the objects X and Y are in relation R. Some instances of such queries are common in daily life (is there a cup on the table), some are extremely rare (is there a violin under the car), and some are unlikely but have similar, more likely counter-parts (is there grass on the frisbee vs is there a frisbee on the grass). Still, a person can easily answer these questions by understanding them as just the composition of the three separate concepts. Such compositional reasoning skills are clearly required for language understanding models, and SQOOP is explicitly designed to test for them.\nConcretely speaking, SQOOP requires observing a 64 \u00d7 64 RGB image x and answering a yes-no question q = XRY about whether objects X and Y are in a spatial relation R. The questions are represented in a redundancy-free XRY form; we did not aim to make the questions look like natural language. Each image contains 5 randomly chosen and randomly positioned objects. There are 36 objects: the latin letters A-Z and digits 0-9, and there are 4 relations: LEFT OF, RIGHT OF, ABOVE, and BELOW. This results in 36 \u00b7 35 \u00b7 4 = 5040 possible unique questions (we do not allow questions about identical objects). To make negative examples challenging, we ensure that both X and Y of a question are always present in the associated image and that there are distractor objects Y \u2032 6= Y\na: S above T? Yes\nb: W left of A? No\nFigure 2: A positive (top) and negative (bottom) example from the SQOOP dataset.\nand X \u2032 6= X such that XRY \u2032 and X \u2032RY are both true for the image. These extra precautions guarantee that answering a question requires the model to locate all possible X and Y then check if any pair of them are in the relation R. Two SQOOP examples are shown in Figure 2.\nOur goal is to discover which models can correctly answer questions about all 36 \u00b735 possible object pairs in SQOOP after having been trained on only a subset. For this purpose we build training sets containing 36 \u00b7 4 \u00b7 k unique questions by sampling k different right-hand-side (RHS) objects Y1, Y2, ..., Yk for each left-hand-side (LHS) object X. We use this procedure instead of just uniformly sampling object pairs in order to ensure that each object appears in at least one training question, thereby keeping the all versions of the dataset solvable. We will refer to k as the #rhs/lhs parameter of the dataset. Our test set is composed from the remaining 36 \u00b7 4 \u00b7 (35\u2212 k) questions. We generate training and test sets for rhs/lhs values of 1,2,4,8 and 18, as well as a control version of the dataset, #rhs/lhs=35, in which both the training and the test set contain all the questions (with different images). Note that lower #rhs/lhs versions are harder for generalization due to the presence of spurious dependencies between the words X and Y to which the models may adapt. In order to exclude a possible compounding factor of overfitting on the training images, all our training sets contain 1 million examples, so for a dataset with #rhs/lhs = k we generate approximately 106/(36 \u00b7 4\u00b7k) different images per unique question. Appendix D contains pseudocode for SQOOP generation."
        },
        {
            "heading": "3 MODELS",
            "text": "A great variety of VQA models have been recently proposed in the literature, among which we can distinguish two trends. Some of the recently proposed models, such as FiLM (Perez et al., 2017) and Relation Networks (RelNet, Santoro et al. (2017)) are highly generic and do not require any taskspecific knowledge to be applied on a new dataset. On the opposite end of the spectrum are modular and structured models, typically flavours of Neural Module Networks (Andreas et al., 2016), that do require some knowledge about the task at hand to be instantiated. Here, we evaluate systematic generalization of several state-of-the-art models in both families. In all models, the image x is first fed through a CNN based network, that we refer to as the stem, to produce a feature-level 3D tensor hx. This is passed through a model-specific computation conditioned on the question q, to produce a joint representation hq x. Lastly, this representation is fed into a fully-connected classifier network to produce logits for prediction. Therefore, the main difference between the models we consider is how the computation hq x = model(hx, q) is performed."
        },
        {
            "heading": "3.1 GENERIC MODELS",
            "text": "We consider four generic models in this paper: CNN+LSTM, FiLM, Relation Network (RelNet), and Memory-Attention-Control (MAC) network. For CNN+LSTM, FiLM, and RelNet models, the question q is first encoded into a fixed-size representation hq using a unidirectional LSTM network. CNN+LSTM flattens the 3D tensor hx to a vector and concatenates it with hq to produce hq x:\nhq x = [flatten(hx);hq]. (1)\nRelNet (Santoro et al., 2017) uses a network g which is applied to all pairs of feature columns of hx concatenated with the question representation hq , all of which is then pooled to obtain hq x:\nhq x = \u2211 i,j g(hx(i), hx(j), hq) (2)\nwhere hx(i) is the i-th feature column of hx. FiLM networks (Perez et al., 2017) use N convolutional FiLM blocks applied to hx. A FiLM block is a residual block (He et al., 2016) in which a feature-wise affine transformation (FiLM layer) is inserted after the 2nd convolutional layer. The FiLM layer is conditioned on the question at hand via prediction of the scaling and shifting parameters \u03b3n and \u03b2n:\n[\u03b3n;\u03b2n] =W n q hq + b n q (3)\nh\u0303nq x = BN(W n 2 \u2217ReLU(Wn1 \u2217 hn\u22121q x + bn)) (4)\nhnq x = h n\u22121 q x +ReLU(\u03b3n h\u0303nq x \u2295 \u03b2n) (5)\nwhere BN stands for batch normalization (Ioffe & Szegedy, 2015), \u2217 stands for convolution and stands for element-wise multiplications. hnq x is the output of the n-th FiLM block and h 0 q x = hx. The output of the last FiLM block hNq x undergoes an extra 1 \u00d7 1 convolution and max-pooling to produce hq x. MAC network of Hudson & Manning (2018) produces hq x by repeatedly applying a Memory-Attention-Composition (MAC) cell that is conditioned on the question through an attention mechanism. The MAC model is too complex to be fully described here and we refer the reader to the original paper for details."
        },
        {
            "heading": "3.2 NEURAL MODULE NETWORKS",
            "text": "Neural Module Networks (NMN) (Andreas et al., 2016) are an elegant approach to question answering that constructs a question-specific network by composing together trainable neural modules, drawing inspiration from symbolic approaches to question answering (Malinowski & Fritz, 2014). To answer a question with an NMN, one first constructs the computation graph by making the following decisions: (a) how many modules and of which types will be used, (b) how will the modules be connected to each other, and (c) how are these modules parametrized based on the question. We refer to the aspects (a) and (b) of the computation graph as the layout and the aspect (c) as the parametrization. In the original NMN and in many follow-up works, different module types are used to perform very different computations, e.g. the Find module from Hu et al. (2017) performs trainable convolutions on the input attention map, whereas the And module from the same paper computes an element-wise maximum for two input attention maps. In this work, we follow the trend of using more homogeneous modules started by Johnson et al. (2017), who use only two types of modules: unary and binary, both performing similar computations. We restrict our study to NMNs with homogeneous modules because they require less prior knowledge to be instantiated and because they performed well in our preliminary experiments despite their relative simplicity. We go one step further than Johnson et al. (2017) and retain a single binary module type, using a zero tensor for the second input when only one input is available. Additionally, we choose to use exactly three modules, which simplifies the layout decision to just determining how the modules are connected. Our preliminary experiments have shown that, even after these simplifications, NMNs are far ahead of other models in terms of generalization.\nIn the original NMN, the layout and parametrization were set in an ad-hoc manner for each question by analyzing a dependency parse. In the follow-up works (Johnson et al., 2017; Hu et al., 2017), these aspects of the computation are predicted by learnable mechanisms with the goal of reducing the amount of background knowledge required to apply the NMN approach to a new task. We experiment with the End-to-End NMN (N2NMN) (Hu et al., 2017) paradigm from this family, which predicts the layout with a seq2seq model (Sutskever et al., 2014) and computes the parametrization of the modules using a soft attention mechanism. Since all the questions in SQOOP have the same structure, we do not employ a seq2seq model but instead have a trainable layout variable and trainable attention variables for each module.\nFormally, our NMN is constructed by repeatedly applying a generic neural module f(\u03b8, \u03b3, s0, s1), which takes as inputs the shared parameters \u03b8, the question-specific parametrization \u03b3 and the lefthand side and right-hand side inputs s0 and s1. Three such modules are connected and conditioned\non a question q = (q1, q2, q3) as follows:\n\u03b3k = 3\u2211 i=1 \u03b1k,ie(qi) (6)\nsmk = k\u22121\u2211 j=\u22121 \u03c4k,jm sj (7)\nsk = f(\u03b8, \u03b3k, s 0 k, s 1 k) (8)\nhqx = s3 (9)\nIn the equations above, s\u22121 = 0 is the zero tensor input, s0 = hx are the image features outputted by the stem, e is the embedding table for question words. k \u2208 {1, 2, 3} is the module number, sk is the output of the k-th module and smk are its left (m = 0) and right (m = 1) inputs. We refer to A = (\u03b1k,i) and T = (\u03c4k,jm ) as the parametrization attention matrix and the layout tensor respectively.\nWe experiment with two choices for the NMN\u2019s generic neural module: the Find module from Hu et al. (2017) and the Residual module from Johnson et al. (2017). The equations for the Residual module are as follows:\n[W k1 ; b k 1 ;W k 2 ; b k 2 ;W k 3 ; b k 3 ] = \u03b3k (10)\ns\u0303k = ReLU(W k 3 \u2217 [s0k; s1k] + bk3), (11)\nfResidual(\u03b3k, s 0 k, s 1 k) = ReLU(s\u0303k +W k 1 \u2217ReLU(W k2 \u2217 s\u0303k + bk2)) + bk1), (12)\nand for Find module as follows:\n[W1; b1;W2; b2] = \u03b8, (13)\nfFind(\u03b8, \u03b3k, s 0 k, s 1 k) = ReLU(W1 \u2217 \u03b3k ReLU(W2 \u2217 [ s0k; s 1 k ] + b2) + b1). (14)\nIn the formulas above allW \u2019s stand for convolution weights, and all b\u2019s are biases. Equations 10 and 13 should be understood as taking vectors \u03b3k and \u03b8 respectively and chunking them into weights and biases. The main difference between Residual and Find is that in Residual all parameters depend on the questions words (hence \u03b8 is omitted from the signature of fResidual), where as in Find convolutional weights are the same for all questions, and only the element-wise multipliers \u03b3k vary based on the question. We note that the specific Find module we use in this work is slightly different from the one used in (Hu et al., 2017) in that it outputs a feature tensor, not just an attention map. This change was required in order to connect multiple Find modules in the same way as we connect multiple residual ones.\nBased on the generic NMN model described above, we experiment with several specific architectures that differ in the way the modules are connected and parametrized (see Figure 1). In NMN-Chain the modules form a sequential chain. Modules 1, 2 and 3 are parametrized based on the first object word, second object word and the relation word respectively, which is achieved by setting the attention maps \u03b11, \u03b12, \u03b13 to the corresponding one-hot vectors. We also experiment with giving the image features hx as the right-hand side input to all 3 modules and call the resulting model NMN-ChainShortcut. NMN-Tree is similar to NMN-Chain in that the attention vectors are similarly hardcoded, but we change the connectivity between the modules to be tree-like. Stochastic N2NMN follows the N2NMN approach by Hu et al. (2017) for inducing layout. We treat the layout T as a stochastic latent variable. T is allowed to take two values: Ttree as in NMN-Tree, and Tchain as in NMN-Chain. We calculate the output probabilities by marginalizing out the layout i.e. probability of answer being \u201cyes\u201d is computed as p(yes|x, q) = \u2211T\u2208{Ttree,Tchain} p(yes|T, x, q)p(T ). Lastly, Attention N2NMN uses the N2NMN method for learning parametrization (Hu et al., 2017). It is structured just like NMN-Tree but has \u03b1k computed as softmax(\u03b1\u0303k), where \u03b1\u0303k is a trainable vector. We use Attention N2NMN only with the Find module because using it with the Residual module would involve a highly non-standard interpolation between convolutional weights."
        },
        {
            "heading": "4 EXPERIMENTS",
            "text": "In our experiments we aimed to: (a) understand which models are capable of exhibiting systematic generalization as required by SQOOP, and (b) understand whether it is possible to induce, in an end-to-end way, the successful architectural decisions that lead to systematic generalization.\nAll models share the same stem architecture which consists of 6 layers of convolution (8 for Relation Networks), batch normalization and max pooling. The input to the stem is a 64 \u00d7 64 \u00d7 3 image, and the feature dimension used throughout the stem is 64. Further details can be found in Appendix A. The code for all experiments is available online1."
        },
        {
            "heading": "4.1 WHICH MODELS GENERALIZE BETTER?",
            "text": "We report the performance for all models on datasets of varying difficulty in Figure 3. Our first observation is that the modular and tree-structured NMN-Tree model exhibits strong systematic generalization. Both versions of this model, with Residual and Find modules, robustly solve all versions of our dataset, including the most challenging #rhs/lhs=1 split.\nThe results of NMN-Tree should be contrasted with those of generic models. 2 out of 4 models (Conv+LSTM and RelNet) are not able to learn to answer all SQOOP questions, no matter how easy the split was (for high #rhs/lhs Conv+LSTM overfitted and RelNet did not train). The results of other two models, MAC and FiLM, are similar. Both models are clearly able to solve the SQOOP task, as suggested by their almost perfect < 1% error rate on the control #rhs/lhs=35 split, yet they struggle to generalize on splits with lower #rhs/lhs. In particular, we observe 13.67\u00b1 9.97% errors for MAC and a 34.73 \u00b1 4.61% errors for FiLM on the hardest #rhs/lhs=1 split. For the splits of intermediate difficulty we saw the error rates of both models decreasing as we increased the #rhs/lhs ratio from 2 to 18. Interestingly, even with 18 #rhs/lhs some MAC and FiLM runs result in a test error rate of\u223c 2%. Given the simplicity and minimalism of SQOOP questions, we believe that these results should be considered a failure to pass the SQOOP test for both MAC and FiLM. That said, we note a difference in how exactly FiLM and MAC fail on #rhs/lhs=1: in several runs (3 out of 15) MAC exhibits a strong generalization performance (\u223c 0.5% error rate), whereas in all runs of FiLM the error rate is about 30%. We examine the successful MAC models and find that they converge to a successful setting of the control attention weights, where specific MAC units consistently attend to the right questions words. In particular, MAC models that generalize strongly for each question seem to have a unit focusing strongly on X and a unit focusing strongly on Y (see Appendix B for more details). As MAC was the strongest competitor of NMN-Tree across generic models, we perform an ablation study for this model, in which we vary the number of modules and hidden units, as well as experiment with weight decay. These modifications do not result in any significant reduction of the gap between MAC and NMN-Tree. Interestingly, we find that using the default high number of MAC units, namely 12, is helpful, possibly because it increases the likelihood that at least one unit converges to focus on X and Y words (see Appendix B for details)."
        },
        {
            "heading": "4.2 WHAT IS ESSENTIAL TO STRONG GENERALIZATION OF NMN?",
            "text": "The superior generalization of NMN-Tree raises the following question: what is the key architectural difference between NMN-Tree and generic models that explains the performance gap between them? We consider two candidate explanations. First, the NMN-Tree model differs from the generic models in that it does not use a language encoder and is instead built from modules that are parametrized by question words directly. Second, NMN-Tree is structured in a particular way, with the idea that modules 1 and 2 may learn to locate objects and module 3 can learn to reason about object locations independently of their identities. To understand which of the two differences is responsible for the superior generalization, we compare the performance of the NMN-Tree, NMN-Chain and NMNChain-Shortcut models (see Figure 1). These 3 versions of NMN are similar in that none of them are using a language encoder, but they differ in how the modules are connected. The results in Figure 3 show that for both Find and Residual module architectures, using a tree layout is absolutely crucial (and sufficient) for generalization, meaning that the generalization gap between NMN-Tree and generic models can not be explained merely by the language encoding step in the latter. In particular, NMN-Chain models perform barely above random chance, doing even worse than generic models on\n1https://github.com/rizar/systematic-generalization-sqoop\nthe #rhs/lhs=1 version of the dataset and dramatically failing even on the easiest #rhs/lhs=18 split. This is in stark contrast with NMN-Tree models that exhibits nearly perfect performance on the hardest #rhs/lhs=1 split. As a sanity check we train NMN-Chain models on the vanilla #rhs/lhs=35 split. We find that NMN-Chain has little difficulty learning to answer SQOOP questions when it sees all of them at training time, even though it previously shows poor generalization when testing on unseen examples. Interestingly, NMN-Chain-Shortcut performs much better than NMN-Chain and quite similarly to generic models. We find it remarkable that such a slight change in the model layout as adding shortcut connections from image features hx to the modules results in a drastic change in generalization performance. In an attempt to understand why NMN-Chain generalizes so poorly we compare the test set responses of the 5 NMN-Chain models trained on #rhs/lhs=1 split. Notably, there was very little agreement between predictions of these 5 runs (Fleiss \u03ba = 0.05), suggesting that NMN-Chain performs rather randomly outside of the training set."
        },
        {
            "heading": "4.3 CAN THE RIGHT KIND OF NMN BE INDUCED?",
            "text": "The strong generalization of the NMN-Tree is impressive, but a significant amount of prior knowledge about the task was required to come up with the successful layout and parametrization used in this model. We therefore investigate whether the amount of such prior knowledge can be reduced by fixing one of these structural aspects and inducing the other."
        },
        {
            "heading": "4.3.1 LAYOUT INDUCTION",
            "text": "In our layout induction experiments, we use the Stochastic N2NMN model which treats the layout as a stochastic latent variable with two values (Ttree and Tchain, see Section 3.2 for details). We experiment with N2NMNs using both Find and Residual modules and report results with different\ninitial conditions, p0(tree) \u2208 0.1, 0.5, 0.9. We believe that the initial probability p0(tree) = 0.1 should not be considered small, since in more challenging datasets the space of layouts would be exponentially large, and sampling the right layout in 10% of all cases should be considered a very lucky initialization. We repeat all experiments on #rhs/lhs=1 and on #rhs/lhs=18 splits, the former to study generalization, and the latter to control whether the failures on #rhs/lhs=1 are caused specifically by the difficulty of this split. The results (see Table 1) show that the success of layout induction (i.e. converging to a p(tree) close to 0.9) depends in a complex way on all the factors that we considered in our experiments. The initialization has the most influence: models initialized with p0(tree) = 0.1 typically do not converge to a tree (exception being experiments with Residual module on #rhs/lhs=18, in which 3 out of 5 runs converged to a solution with a high p(tree)). Likewise, models initialized with p0(tree) = 0.9 always stay in a regime with a high p(tree). In the intermediate setting of p0(tree) = 0.5 we observe differences in behaviors for Residual and Find modules. In particular, N2NMN based on Residual modules stays spurious with p(tree) = 0.5\u00b1 0.08 when #rhs/lhs=1, whereas N2NMN based on Find modules always converges to a tree.\nOne counterintuitive result in Table 1 is that for the Stochastic N2NMNs with Residual modules, trained with p0(tree) = 0.5 and #rhs/lhs=1, make just 1.64\u00b11.79% test error despite never resolving the layout uncertainty through training (p200K(tree) = 0.56 \u00b1 0.06). We offer an investigation of this result in Appendix C."
        },
        {
            "heading": "4.3.2 PARAMETRIZATION INDUCTION",
            "text": "Next, we experiment with the Attention N2NMN model (see Section 3.2) in which the parametrization is learned for each module as an attention-weighted average of word embeddings. In these experiments, we fix the layout to be tree-like and sample the pre-softmax attention weights \u03b1\u0303 from a uniform distribution U [0; 1]. As in the layout induction investigations, we experiment with several SQOOP splits, namely we try #rhs/lhs \u2208 {1, 2, 18}. The results (reported in Table 2) show that Attention N2NMN fails dramatically on #rhs/lhs=1 but quickly catches up as soon as #rhs/lhs is increased to 2. Notably, 9 out of 10 runs on #rhs/lhs=2 result in almost perfect performance, and 1 run completely fails to generalize (26% error rate), resulting in a high 8.18% variance of the mean\nerror rate. All 10 runs on the split with 18 rhs/lhs generalize flawlessly. Furthermore, we inspect the learned attention weights and find that for typical successful runs, module 3 focuses on the relation word, whereas modules 1 and 2 focus on different object words (see Figure 6) while still focusing on the relation word. To better understand the relationship between successful layout induction and generalization, we define an attention quality metric \u03ba = minw\u2208{X,Y }maxk\u22081,2 \u03b1k,w/(1\u2212 \u03b1k,R). Intuitively, \u03ba is large when for each word w \u2208 X,Y there is a module i that focuses mostly on this word. The renormalization by 1/(1 \u2212 \u03b1k,R) is necessary to factor out the amount of attention that modules 1 and 2 assign to the relation word. For the ground-truth parametrization that we use for NMN-Tree \u03ba takes a value of 1, and if both modules 1 and 2 focus on X, completely ignoring Y, \u03ba equals 0. The scatterplot of the test error rate versus \u03ba (Figure 5) shows that for #rhs/lhs=1 high generalization is strongly associated with higher \u03ba, meaning that it is indeed necessary to have different modules strongly focusing on different object words in order to generalize in this most challenging setting. Interestingly, for #rhs/lhs=2 we see a lot of cases where N2NMN generalizes well despite attention being rather spurious (\u03ba \u2248 0.6). In order to put Attention N2NMN results in context we compare them to those of MAC (see Table 2). Such a comparison can be of interest because both models perform attention over the question. For 1 rhs/lhs MAC seems to be better on average, but as we increase #rhs/lhs to 2 we note that Attention N2NMN succeeds in 9 out of 10 cases on the #rhs/lhs=2 split, much more often than 1 success out of 10 observed for MAC2. This result suggests that Attention N2NMNs retains some of the strong generalization potential of NMNs with hard-coded parametrization."
        },
        {
            "heading": "5 RELATED WORK",
            "text": "The notion of systematicity was originally introduced by (Fodor & Pylyshyn, 1988) as the property of human cognition whereby \u201cthe ability to entertain a given thought implies the ability to entertain thoughts with semantically related contents\u201d. They illustrate this with an example that no English\n2If we judge a run successful when the error rate is lower than \u03c4 = 1%, these success rates are different with a p-value of 0.001 according to the Fisher exact test. Same holds for any other threshold \u03c4 \u2208 [1%; 5%].\nspeaker can understand the phrase \u201cJohn loves the girl\u201d without being also able to understand the phrase \u201cthe girl loves John\u201d. The question of whether or not connectionist models of cognition can account for the systematicity phenomenon has been a subject of a long debate in cognitive science (Fodor & Pylyshyn, 1988; Smolensky, 1987; Marcus, 1998; 2003; Calvo & Colunga, 2003). Recent research has shown that lack of systematicity in the generalization is still a concern for the modern seq2seq models (Lake & Baroni, 2018; Bastings et al., 2018; Loula et al., 2018). Our findings about the weak systematic generalization of generic VQA models corroborate the aforementioned seq2seq results. We also go beyond merely stating negative generalization results and showcase the high systematicity potential of adding explicit modularity and structure to modern deep learning models.\nBesides the theoretical appeal of systematicity, our study is inspired by highly related prior evidence that when trained on downstream language understanding tasks, neural networks often generalize poorly and latch on to dataset-specific regularities. Agrawal et al. (2016) report how neural models exploit biases in a VQA dataset, e.g. responding \u201csnow\u201d to the question \u201cwhat covers the ground\u201d regardless of the image because \u201csnow\u201d is the most common answer to this question. Gururangan et al. (2018) report that many successes in natural language entailment are actually due to exploiting statistical biases as opposed to solving entailment, and that state-of-the-art systems are much less performant when tested on unbiased data. Jia & Liang (2017) demonstrate that seemingly state-ofthe-art reading comprehension system can be misled by simply appending an unrelated sentence that resembles the question to the document.\nUsing synthetic VQA datasets to study grounded language understanding is a recent trend started by the CLEVR dataset (Johnson et al., 2016). CLEVR images are 3D-rendered and CLEVR questions are longer and more complex than ours, but in the associated generalization split CLEVR-CoGenT the training and test distributions of images are different. In our design of SQOOP we aimed instead to minimize the difference between training and test images to make sure that we test a model\u2019s ability to interpret unknown combinations of known words. The ShapeWorld family of datasets by Kuhnle & Copestake (2017) is another synthetic VQA platform with a number of generalization tests, but none of them tests SQOOP-style generalization of relational reasoning to unseen object pairs. Most closely related to our work is the recent study of generalization to long-tail questions about rare objects done by Bingham et al. (2017). They do not, however, consider as many models as we do and do not study the question of whether the best-performing models can be made end-to-end.\nThe key paradigm that we test in our experiments is Neural Module Networks (NMN). Andreas et al. (2016) introduced NMNs as a modular, structured VQA model where a fixed number of handcrafted neural modules (such as Find, or Compare) are chosen and composed together in a layout determined by the dependency parse of the question. Andreas et al. (2016) show that the modular structure allows answering questions that are longer than the training ones, a kind of generalization that is complementary to the one we study here. Hu et al. (2017) and Johnson et al. (2017) followed up by making NMNs end-to-end, removing the non-differentiable parser. Both Hu et al. (2017) and Johnson et al. (2017) reported that several thousands of ground-truth layouts are required to pretrain the layout predictor in order for their approaches to work. In a recent work, Hu et al. (2018) attempt to soften the layout decisions, but training their models end-to-end from scratch performed substantially lower than best models on the CLEVR task. Gupta & Lewis (2018) report successful layout induction on CLEVR for a carefully engineered heterogeneous NMN that takes a scene graph as opposed to a raw image as the input."
        },
        {
            "heading": "6 CONCLUSION AND DISCUSSION",
            "text": "We have conducted a rigorous investigation of an important form of systematic generalization required for grounded language understanding: the ability to reason about all possible pairs of objects despite being trained on a small subset of such pairs. Our results allow one to draw two important conclusions. For one, the intuitive appeal of modularity and structure in designing neural architectures for language understanding is now supported by our results, which show how a modular model consisting of general purpose residual blocks generalizes much better than a number of baselines, including architectures such as MAC, FiLM and RelNet that were designed specifically for visual reasoning. While this may seem unsurprising, to the best of our knowledge, the literature has lacked such a clear empirical evidence in favor of modular and structured networks before this work. Importantly, we have also shown how sensitive the high performance of the modular models is to the\nlayout of modules, and how a tree-like structure generalizes much stronger than a typical chain of layers.\nOur second key conclusion is that coming up with an end-to-end and/or soft version of modular models may be not sufficient for strong generalization. In the very setting where strong generalization is required, end-to-end methods often converge to a different, less compositional solution (e.g. a chain layout or blurred attention). This can be observed especially clearly in our NMN layout and parametrization induction experiments on the #rhs/lhs=1 version of SQOOP, but notably, strong initialization sensitivity of layout induction remains an issue even on the #rhs/lhs=18 split. This conclusion is relevant in the view of recent work in the direction of making NMNs more end-toend (Suarez et al., 2018; Hu et al., 2018; Hudson & Manning, 2018; Gupta & Lewis, 2018). Our findings suggest that merely replacing hard-coded components with learnable counterparts can be insufficient, and that research on regularizers or priors that steer the learning towards more systematic solutions can be required. That said, our parametrization induction results on the #rhs/lhs=2 split are encouraging, as they show that compared to generic models, a weaker nudge (in the form of a richer training signal or a prior) towards systematicity may suffice for end-to-end NMNs.\nWhile our investigation has been performed on a synthetic dataset, we believe that it is the realworld language understanding where our findings may be most relevant. It is possible to construct a synthetic dataset that is bias-free and that can only be solved if the model has understood the entirety of the dataset\u2019s language. It is, on the contrary, much harder to collect real-world datasets that do not permit highly dataset-specific solutions, as numerous dataset analysis papers of recent years have shown (see Section 5 for a review). We believe that approaches that can generalize strongly from imperfect and biased data will likely be required, and our experiments can be seen as a simulation of such a scenario. We hope, therefore, that our findings will inform researchers working on language understanding and provide them with a useful intuition about what facilitates strong generalization and what is likely to inhibit it."
        },
        {
            "heading": "ACKNOWLEDGEMENTS",
            "text": "We thank Maxime Chevalier-Boisvert, Yoshua Bengio and Jacob Andreas for useful discussions. This research was enabled in part by support provided by Compute Canada (www.computecanada.ca), NSERC, Canada Research Chairs and Microsoft Research. We also thank Nvidia for donating NVIDIA DGX-1 used for this research."
        },
        {
            "heading": "A EXPERIMENT DETAILS",
            "text": "We trained all models by minimizing the cross entropy loss log p(y|x, q) on the training set, where y \u2208 {yes, no} is the correct answer, x is the image, q is the question. In all our experiments we used the Adam optimizer (Kingma & Ba, 2015) with hyperparameters \u03b1 = 0.0001, \u03b21 = 0.9, \u03b22 = 0.999, = 10\u221210. We continuously monitored validation set performance of all models during training, selected the best one and reported its performance on the test set. The number of training iterations for each model was selected in preliminary investigations based on our observations of how long it takes for different models to converge. This information, as well as other training details, can be found in Table 3."
        },
        {
            "heading": "B ADDITIONAL RESULTS FOR MAC MODEL",
            "text": "We performed an ablation study in which we varied the number of MAC units, the model dimensionality and the level of weight decay for the MAC model. The results can be found in Table 4.\nWe also perform qualitative investigations to understand the high variance in MAC\u2019s performance. In particular, we focus on control attention weights (c) for each run and aim to understand if runs that generalize have clear differences when compared to runs that failed. Interestingly, we observe that in successful runs each wordw \u2208 X,Y has a unit that is strongly focused on it. To present our observations in quantitative terms, we plot attention quality \u03ba = minw\u2208{X,Y }maxk\u2208[1;12] \u03b1k,w/(1\u2212\u03b1k,R), where \u03b1 are control scores vs accuracy in Figure 7 for each run (see Section 4.3.2 for an explanation of \u03ba). We can clearly see a positive correlation between \u03ba and error rate, especially for low #rhs/lhs.\nNext, we experiment with a hard-coded variation of MAC. In this model, we use hard-coded control scores such that given a SQOOP question XRY, the first half of all modules focuses on X while the second half focuses on Y. The relationship between MAC and hardcoded MAC is similar to that between NMN-Tree and end-to-end NMN with parameterization induction. However, this model has not performed as well as the successful runs of MAC. We hypothesize that this could be due to the interactions between the control scores and the visual attention part of the model.\nC INVESTIGATION OF CORRECT PREDICTIONS WITH SPURIOUS LAYOUTS\nIn Section 4.3.1 we observed that an NMN with the Residual module can answer test questions with a relative low error rate of 1.64 \u00b1 1.79%, despite being a mixture of a tree and a chain (see\nresults in Table 1, p0(tree) = 0.5). Our explanation for this phenomenon is as follows: when connected in a tree, modules of such spurious models generalize well, and when connected as a chain they generalize poorly. The output distribution of the whole model is thus a mixture of the mostly correct p(y|T = Ttree, x, q) and mostly random p(y|T = Tchain, x, q). We verify our reasoning by explicitly evaluating test accuracies for p(y|T = Ttree, x, q) and p(y|T = Tchain, x, q), and find them to be around 99% and 60% respectively, confirming our hypothesis. As a result the predictions of the spurious models with p(tree) \u2248 0.5 have lower confidence than those of sharp tree models, as indicated by the high log loss of 0.27\u00b1 0.04. We visualize the progress of structure induction for the Residual module with p0(tree) = 0.5 in Figure 4 which shows how p(tree) saturates to 1.0 for #rhs/lhs=18 and remains around 0.5 when #rhs/lhs=1."
        },
        {
            "heading": "D SQOOP PSEUDOCODE",
            "text": "Algorithm 1 Pseudocode for creating SQOOP 1: S \u2190 {A,B,C, . . . , Z, 0,1,2,3, . . . , 9} 2: Rel\u2190 {LEFT-OF, RIGHT-OF, ABOVE, BELOW} . relations 3: function CREATESQOOP(k) 4: TrainQuestions\u2190 [] 5: AllQuestions\u2190 [] 6: for all X in S do 7: AllRhs\u2190 RandomSample(S \\ {X}, k) . sample without replacement from S \\ {X} 8: AllQuestions\u2190 {X} \u00d7Rel \u00d7 (S \\ {X}) \u222aAllQuestions 9: for all R, Y in AllRhs\u00d7Rel do 10: TrainQuestions\u2190 (X,R, Y ) \u222a TrainQuestions 11: end for 12: end for 13: TestQuestions\u2190 AllQuestions \\ TrainQuestions 14: function GENERATEEXAMPLE(X,R, Y ) 15: a \u223c {Yes, No} 16: if a = Yes then 17: I \u2190 place X and Y objects so that R holds . create the image 18: I \u2190 sample 3 objects from S and add to I 19: else 20: repeat 21: X \u2032\u2190 Sample X \u2032 from S \\ {X} 22: Y \u2032 \u2190 Sample Y \u2032 from S \\ {Y } 23: I \u2190 place X \u2032 and Y objects so that R holds . create the image 24: I \u2190 add X and Y \u2032 objects to I so that R holds 25: I \u2190 sample 1 more object from S and add to I 26: until X and Y are not in relation R in I 27: end if 28: return I , X,R, Y , a 29: end function 30: Train \u2190 sample 106|TrainQuestions| examples for each (X,R,Y) \u2208 TrainQuestions from\nGENERATEEXAMPLE(X,R, Y ) 31: Test\u2190 sample 10 examples for each (X,R,Y) \u2208 TestQuestions from GENERATEEXAM-\nPLE(X,R, Y ) 32: end function"
        }
    ],
    "title": "SYSTEMATIC GENERALIZATION: WHAT IS REQUIRED AND CAN IT BE LEARNED?",
    "year": 2019
}