{
    "abstractText": "Whereas before 2006 it appears that deep multilayer neural networks were not successfully trained, since then several algorithms have been shown to successfully train them, with experimental results showing the superiority of deeper vs less deep architectures. All these experimental results were obtained with new initialization or training mechanisms. Our objective here is to understand better why standard gradient descent from random initialization is doing so poorly with deep neural networks, to better understand these recent relative successes and help design better algorithms in the future. We first observe the influence of the non-linear activations functions. We find that the logistic sigmoid activation is unsuited for deep networks with random initialization because of its mean value, which can drive especially the top hidden layer into saturation. Surprisingly, we find that saturated units can move out of saturation by themselves, albeit slowly, and explaining the plateaus sometimes seen when training neural networks. We find that a new non-linearity that saturates less can often be beneficial. Finally, we study how activations and gradients vary across layers and during training, with the idea that training may be more difficult when the singular values of the Jacobian associated with each layer are far from 1. Based on these considerations, we propose a new initialization scheme that brings substantially faster convergence. 1 Deep Neural Networks Deep learning methods aim at learning feature hierarchies with features from higher levels of the hierarchy formed by the composition of lower level features. They include Appearing in Proceedings of the 13 International Conference on Artificial Intelligence and Statistics (AISTATS) 2010, Chia Laguna Resort, Sardinia, Italy. Volume 9 of JMLR: W&CP 9. Copyright 2010 by the authors. learning methods for a wide array of deep architectures, including neural networks with many hidden layers (Vincent et al., 2008) and graphical models with many levels of hidden variables (Hinton et al., 2006), among others (Zhu et al., 2009; Weston et al., 2008). Much attention has recently been devoted to them (see (Bengio, 2009) for a review), because of their theoretical appeal, inspiration from biology and human cognition, and because of empirical success in vision (Ranzato et al., 2007; Larochelle et al., 2007; Vincent et al., 2008) and natural language processing (NLP) (Collobert & Weston, 2008; Mnih & Hinton, 2009). Theoretical results reviewed and discussed by Bengio (2009), suggest that in order to learn the kind of complicated functions that can represent high-level abstractions (e.g. in vision, language, and other AI-level tasks), one may need deep architectures. Most of the recent experimental results with deep architecture are obtained with models that can be turned into deep supervised neural networks, but with initialization or training schemes different from the classical feedforward neural networks (Rumelhart et al., 1986). Why are these new algorithms working so much better than the standard random initialization and gradient-based optimization of a supervised training criterion? Part of the answer may be found in recent analyses of the effect of unsupervised pretraining (Erhan et al., 2009), showing that it acts as a regularizer that initializes the parameters in a \u201cbetter\u201d basin of attraction of the optimization procedure, corresponding to an apparent local minimum associated with better generalization. But earlier work (Bengio et al., 2007) had shown that even a purely supervised but greedy layer-wise procedure would give better results. So here instead of focusing on what unsupervised pre-training or semi-supervised criteria bring to deep architectures, we focus on analyzing what may be going wrong with good old (but deep) multilayer neural networks. Our analysis is driven by investigative experiments to monitor activations (watching for saturation of hidden units) and gradients, across layers and across training iterations. We also evaluate the effects on these of choices of activation function (with the idea that it might affect saturation) and initialization procedure (since unsupervised pretraining is a particular form of initialization and it has a drastic impact).",
    "authors": [
        {
            "affiliations": [],
            "name": "Xavier Glorot"
        },
        {
            "affiliations": [],
            "name": "Yoshua Bengio"
        }
    ],
    "id": "SP:ea9d2a2b4ce11aaf85136840c65f3bc9c03ab649",
    "references": [
        {
            "authors": [
                "Y. Bengio"
            ],
            "title": "Learning deep architectures for AI",
            "venue": "Foundations and Trends in Machine Learning,",
            "year": 2009
        },
        {
            "authors": [
                "Y. Bengio",
                "P. Lamblin",
                "D. Popovici",
                "H. Larochelle"
            ],
            "title": "Greedy layer-wise training of deep networks. NIPS 19 (pp. 153\u2013160)",
            "year": 2007
        },
        {
            "authors": [
                "Y. Bengio",
                "P. Simard",
                "P. Frasconi"
            ],
            "title": "Learning long-term dependencies with gradient descent is difficult",
            "venue": "IEEE Transactions on Neural Networks,",
            "year": 1994
        },
        {
            "authors": [
                "J. Bergstra",
                "G. Desjardins",
                "P. Lamblin",
                "Y. Bengio"
            ],
            "title": "Quadratic polynomials learn better image features (Technical Report 1337)",
            "venue": "De\u0301partement d\u2019Informatique et de Recherche Ope\u0301rationnelle, Universite\u0301 de Montre\u0301al",
            "year": 2009
        },
        {
            "authors": [
                "D. Bradley"
            ],
            "title": "Learning in modular systems",
            "venue": "Doctoral dissertation,",
            "year": 2009
        },
        {
            "authors": [
                "R. Collobert",
                "J. Weston"
            ],
            "title": "A unified architecture for natural language processing: Deep neural networks with multitask learning",
            "year": 2008
        },
        {
            "authors": [
                "D. Erhan",
                "Manzagol",
                "P.-A",
                "Y. Bengio",
                "S. Bengio",
                "P. Vincent"
            ],
            "title": "The difficulty of training deep architectures and the effect of unsupervised pre-training",
            "year": 2009
        },
        {
            "authors": [
                "G.E. Hinton",
                "S. Osindero",
                "Y. Teh"
            ],
            "title": "A fast learning algorithm for deep belief nets",
            "venue": "Neural Computation,",
            "year": 2006
        },
        {
            "authors": [
                "A. Krizhevsky",
                "G. Hinton"
            ],
            "title": "Learning multiple layers of features from tiny images (Technical Report)",
            "year": 2009
        },
        {
            "authors": [
                "H. Larochelle",
                "Y. Bengio",
                "J. Louradour",
                "P. Lamblin"
            ],
            "title": "Exploring strategies for training deep neural networks",
            "venue": "The Journal of Machine Learning Research,",
            "year": 2009
        },
        {
            "authors": [
                "H. Larochelle",
                "D. Erhan",
                "A. Courville",
                "J. Bergstra",
                "Y. Bengio"
            ],
            "title": "An empirical evaluation of deep architectures on problems with many factors of variation",
            "year": 2007
        },
        {
            "authors": [
                "Y. LeCun",
                "L. Bottou",
                "Y. Bengio",
                "P. Haffner"
            ],
            "title": "Gradient-based learning applied to document recognition",
            "venue": "Proceedings of the IEEE,",
            "year": 1998
        },
        {
            "authors": [
                "Y. LeCun",
                "L. Bottou",
                "G.B. Orr",
                "M\u00fcller",
                "K.-R"
            ],
            "title": "Efficient backprop. In Neural networks, tricks of the trade, Lecture Notes in Computer Science LNCS 1524",
            "year": 1998
        },
        {
            "authors": [
                "A. Mnih",
                "G.E. Hinton"
            ],
            "title": "A scalable hierarchical distributed language model",
            "year": 2009
        },
        {
            "authors": [
                "M. Ranzato",
                "C. Poultney",
                "S. Chopra",
                "Y. LeCun"
            ],
            "title": "Efficient learning of sparse representations with an energy-based model",
            "year": 2007
        },
        {
            "authors": [
                "D.E. Rumelhart",
                "G.E. Hinton",
                "R.J. Williams"
            ],
            "title": "Learning representations by back-propagating errors",
            "year": 1986
        },
        {
            "authors": [
                "S.A. Solla",
                "E. Levin",
                "M. Fleisher"
            ],
            "title": "Accelerated learning in layered neural networks",
            "venue": "Complex Systems,",
            "year": 1988
        },
        {
            "authors": [
                "P. Vincent",
                "H. Larochelle",
                "Y. Bengio",
                "Manzagol",
                "P.-A"
            ],
            "title": "Extracting and composing robust features with denoising autoencoders",
            "year": 2008
        },
        {
            "authors": [
                "J. Weston",
                "F. Ratle",
                "R. Collobert"
            ],
            "title": "Deep learning via semi-supervised embedding",
            "venue": "ICML 2008 (pp. 1168\u20131175)",
            "year": 2008
        },
        {
            "authors": [
                "L. Zhu",
                "Y. Chen",
                "A. Yuille"
            ],
            "title": "Unsupervised learning of probabilistic grammar-markov models for object categories",
            "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence,",
            "year": 2009
        }
    ],
    "sections": [
        {
            "text": "Whereas before 2006 it appears that deep multilayer neural networks were not successfully trained, since then several algorithms have been shown to successfully train them, with experimental results showing the superiority of deeper vs less deep architectures. All these experimental results were obtained with new initialization or training mechanisms. Our objective here is to understand better why standard gradient descent from random initialization is doing so poorly with deep neural networks, to better understand these recent relative successes and help design better algorithms in the future. We first observe the influence of the non-linear activations functions. We find that the logistic sigmoid activation is unsuited for deep networks with random initialization because of its mean value, which can drive especially the top hidden layer into saturation. Surprisingly, we find that saturated units can move out of saturation by themselves, albeit slowly, and explaining the plateaus sometimes seen when training neural networks. We find that a new non-linearity that saturates less can often be beneficial. Finally, we study how activations and gradients vary across layers and during training, with the idea that training may be more difficult when the singular values of the Jacobian associated with each layer are far from 1. Based on these considerations, we propose a new initialization scheme that brings substantially faster convergence."
        },
        {
            "heading": "1 Deep Neural Networks",
            "text": "Deep learning methods aim at learning feature hierarchies with features from higher levels of the hierarchy formed by the composition of lower level features. They include\nAppearing in Proceedings of the 13th International Conference on Artificial Intelligence and Statistics (AISTATS) 2010, Chia Laguna Resort, Sardinia, Italy. Volume 9 of JMLR: W&CP 9. Copyright 2010 by the authors.\nlearning methods for a wide array of deep architectures, including neural networks with many hidden layers (Vincent et al., 2008) and graphical models with many levels of hidden variables (Hinton et al., 2006), among others (Zhu et al., 2009; Weston et al., 2008). Much attention has recently been devoted to them (see (Bengio, 2009) for a review), because of their theoretical appeal, inspiration from biology and human cognition, and because of empirical success in vision (Ranzato et al., 2007; Larochelle et al., 2007; Vincent et al., 2008) and natural language processing (NLP) (Collobert & Weston, 2008; Mnih & Hinton, 2009). Theoretical results reviewed and discussed by Bengio (2009), suggest that in order to learn the kind of complicated functions that can represent high-level abstractions (e.g. in vision, language, and other AI-level tasks), one may need deep architectures.\nMost of the recent experimental results with deep architecture are obtained with models that can be turned into deep supervised neural networks, but with initialization or training schemes different from the classical feedforward neural networks (Rumelhart et al., 1986). Why are these new algorithms working so much better than the standard random initialization and gradient-based optimization of a supervised training criterion? Part of the answer may be found in recent analyses of the effect of unsupervised pretraining (Erhan et al., 2009), showing that it acts as a regularizer that initializes the parameters in a \u201cbetter\u201d basin of attraction of the optimization procedure, corresponding to an apparent local minimum associated with better generalization. But earlier work (Bengio et al., 2007) had shown that even a purely supervised but greedy layer-wise procedure would give better results. So here instead of focusing on what unsupervised pre-training or semi-supervised criteria bring to deep architectures, we focus on analyzing what may be going wrong with good old (but deep) multilayer neural networks.\nOur analysis is driven by investigative experiments to monitor activations (watching for saturation of hidden units) and gradients, across layers and across training iterations. We also evaluate the effects on these of choices of activation function (with the idea that it might affect saturation) and initialization procedure (since unsupervised pretraining is a particular form of initialization and it has a drastic impact)."
        },
        {
            "heading": "2 Experimental Setting and Datasets",
            "text": "Code to produce the new datasets introduced in this section is available from: http://www.iro.umontreal. ca/\u02dclisa/twiki/bin/view.cgi/Public/ DeepGradientsAISTATS2010."
        },
        {
            "heading": "2.1 Online Learning on an Infinite Dataset:",
            "text": "Shapeset-3\u00d7 2\nRecent work with deep architectures (see Figure 7 in Bengio (2009)) shows that even with very large training sets or online learning, initialization from unsupervised pretraining yields substantial improvement, which does not vanish as the number of training examples increases. The online setting is also interesting because it focuses on the optimization issues rather than on the small-sample regularization effects, so we decided to include in our experiments a synthetic images dataset inspired from Larochelle et al. (2007) and Larochelle et al. (2009), from which as many examples as needed could be sampled, for testing the online learning scenario.\nWe call this dataset the Shapeset-3 \u00d7 2 dataset, with example images in Figure 1 (top). Shapeset-3 \u00d7 2 contains images of 1 or 2 two-dimensional objects, each taken from 3 shape categories (triangle, parallelogram, ellipse), and placed with random shape parameters (relative lengths and/or angles), scaling, rotation, translation and grey-scale.\nWe noticed that for only one shape present in the image the task of recognizing it was too easy. We therefore decided to sample also images with two objects, with the constraint that the second object does not overlap with the first by more than fifty percent of its area, to avoid hiding it entirely. The task is to predict the objects present (e.g. triangle + ellipse, parallelogram + parallelogram, triangle alone, etc.) without having to distinguish between the foreground shape and the background shape when they overlap. This therefore defines nine configuration classes.\nThe task is fairly difficult because we need to discover invariances over rotation, translation, scaling, object color, occlusion and relative position of the shapes. In parallel we need to extract the factors of variability that predict which object shapes are present.\nThe size of the images are arbitrary but we fixed it to 32\u00d732 in order to work with deep dense networks efficiently."
        },
        {
            "heading": "2.2 Finite Datasets",
            "text": "The MNIST digits (LeCun et al., 1998a), dataset has 50,000 training images, 10,000 validation images (for hyper-parameter selection), and 10,000 test images, each showing a 28\u00d728 grey-scale pixel image of one of the 10 digits.\nCIFAR-10 (Krizhevsky & Hinton, 2009) is a labelled sub-\nset of the tiny-images dataset that contains 50,000 training examples (from which we extracted 10,000 as validation data) and 10,000 test examples. There are 10 classes corresponding to the main object in each image: airplane, automobile, bird, cat, deer, dog, frog, horse, ship, or truck. The classes are balanced. Each image is in color, but is just 32 \u00d7 32 pixels in size, so the input is a vector of 32\u00d7 32\u00d7 3 = 3072 real values.\nSmall-ImageNet which is a set of tiny 37\u00d737 gray level images dataset computed from the higher-resolution and larger set at http://www.image-net.org, with labels from the WordNet noun hierarchy. We have used 90,000 examples for training, 10,000 for the validation set, and 10,000 for testing. There are 10 balanced classes: reptiles, vehicles, birds, mammals, fish, furniture, instruments, tools, flowers and fruits Figure 1 (bottom) shows randomly chosen examples."
        },
        {
            "heading": "2.3 Experimental Setting",
            "text": "We optimized feedforward neural networks with one to five hidden layers, with one thousand hidden units per layer, and with a softmax logistic regression for the output layer. The cost function is the negative log-likelihood \u2212 log P (y|x), where (x, y) is the (input image, target class) pair. The neural networks were optimized with stochastic back-propagation on mini-batches of size ten, i.e., the average g of \u2202\u2212log P (y|x)\u2202\u03b8 was computed over 10 consecutive\ntraining pairs (x, y) and used to update parameters \u03b8 in that direction, with \u03b8 \u2190 \u03b8 \u2212 g. The learning rate is a hyperparameter that is optimized based on validation set error after a large number of updates (5 million).\nWe varied the type of non-linear activation function in the hidden layers: the sigmoid 1/(1 + e\u2212x), the hyperbolic tangent tanh(x), and a newly proposed activation function (Bergstra et al., 2009) called the softsign, x/(1 + |x|). The softsign is similar to the hyperbolic tangent (its range is -1 to 1) but its tails are quadratic polynomials rather than exponentials, i.e., it approaches its asymptotes much slower.\nIn the comparisons, we search for the best hyperparameters (learning rate and depth) separately for each model. Note that the best depth was always five for Shapeset-3 \u00d7 2, except for the sigmoid, for which it was four.\nWe initialized the biases to be 0 and the weights Wij at each layer with the following commonly used heuristic:\nWij \u223c U [ \u2212 1\u221a\nn , 1\u221a n\n] , (1)\nwhere U [\u2212a, a] is the uniform distribution in the interval (\u2212a, a) and n is the size of the previous layer (the number of columns of W )."
        },
        {
            "heading": "3 Effect of Activation Functions and Saturation During Training",
            "text": "Two things we want to avoid and that can be revealed from the evolution of activations is excessive saturation of activation functions on one hand (then gradients will not propagate well), and overly linear units (they will not compute something interesting)."
        },
        {
            "heading": "3.1 Experiments with the Sigmoid",
            "text": "The sigmoid non-linearity has been already shown to slow down learning because of its none-zero mean that induces important singular values in the Hessian (LeCun et al., 1998b). In this section we will see another symptomatic behavior due to this activation function in deep feedforward networks.\nWe want to study possible saturation, by looking at the evolution of activations during training, and the figures in this section show results on the Shapeset-3 \u00d7 2 data, but similar behavior is observed with the other datasets. Figure 2 shows the evolution of the activation values (after the nonlinearity) at each hidden layer during training of a deep architecture with sigmoid activation functions. Layer 1 refers to the output of first hidden layer, and there are four hidden layers. The graph shows the means and standard deviations of these activations. These statistics along with histograms are computed at different times during learning, by looking at activation values for a fixed set of 300 test examples.\nWe see that very quickly at the beginning, all the sigmoid activation values of the last hidden layer are pushed to their lower saturation value of 0. Inversely, the others layers have a mean activation value that is above 0.5, and decreasing as we go from the output layer to the input layer. We have found that this kind of saturation can last very long in deeper networks with sigmoid activations, e.g., the depthfive model never escaped this regime during training. The big surprise is that for intermediate number of hidden layers (here four), the saturation regime may be escaped. At the same time that the top hidden layer moves out of saturation, the first hidden layer begins to saturate and therefore to stabilize.\nWe hypothesize that this behavior is due to the combination of random initialization and the fact that an hidden unit output of 0 corresponds to a saturated sigmoid. Note that deep networks with sigmoids but initialized from unsupervised pre-training (e.g. from RBMs) do not suffer from this saturation behavior. Our proposed explanation rests on the hypothesis that the transformation that the lower layers of the randomly initialized network computes initially is not useful to the classification task, unlike the transformation obtained from unsupervised pre-training. The logistic layer output softmax(b+Wh) might initially rely more on its biases b (which are learned very quickly) than on the top hidden activations h derived from the input image (because h would vary in ways that are not predictive of y, maybe correlated mostly with other and possibly more dominant variations of x). Thus the error gradient would tend to push Wh towards 0, which can be achieved by pushing h towards 0. In the case of symmetric activation functions like the hyperbolic tangent and the softsign, sitting around 0 is good because it allows gradients to flow backwards. However, pushing the sigmoid outputs to 0 would bring them into a saturation regime which would prevent gradients to flow backward and prevent the lower layers from learning useful features. Eventually but slowly, the lower layers move toward more useful features and the top hidden layer then moves out of the saturation regime. Note however that, even after this, the network moves into a solution that is of poorer quality (also in terms of generalization)\nthen those found with symmetric activation functions, as can be seen in figure 11."
        },
        {
            "heading": "3.2 Experiments with the Hyperbolic tangent",
            "text": "As discussed above, the hyperbolic tangent networks do not suffer from the kind of saturation behavior of the top hidden layer observed with sigmoid networks, because of its symmetry around 0. However, with our standard weight initialization U [ \u2212 1\u221a\nn , 1\u221a n\n] , we observe a sequentially oc-\ncurring saturation phenomenon starting with layer 1 and propagating up in the network, as illustrated in Figure 3. Why this is happening remains to be understood."
        },
        {
            "heading": "3.3 Experiments with the Softsign",
            "text": "The softsign x/(1+|x|) is similar to the hyperbolic tangent but might behave differently in terms of saturation because of its smoother asymptotes (polynomial instead of exponential). We see on Figure 3 that the saturation does not occur one layer after the other like for the hyperbolic tangent. It is faster at the beginning and then slow, and all layers move together towards larger weights.\nWe can also see at the end of training that the histogram of activation values is very different from that seen with the hyperbolic tangent (Figure 4). Whereas the latter yields modes of the activations distribution mostly at the extremes (asymptotes -1 and 1) or around 0, the softsign network has modes of activations around its knees (between the linear regime around 0 and the flat regime around -1 and 1). These are the areas where there is substantial non-linearity but\nwhere the gradients would flow well."
        },
        {
            "heading": "4 Studying Gradients and their Propagation",
            "text": ""
        },
        {
            "heading": "4.1 Effect of the Cost Function",
            "text": "We have found that the logistic regression or conditional log-likelihood cost function (\u2212 log P (y|x) coupled with softmax outputs) worked much better (for classification problems) than the quadratic cost which was traditionally used to train feedforward neural networks (Rumelhart et al., 1986). This is not a new observation (Solla et al., 1988) but we find it important to stress here. We found that the plateaus in the training criterion (as a function of the parameters) are less present with the log-likelihood cost function. We can see this on Figure 5, which plots the training criterion as a function of two weights for a two-layer network (one hidden layer) with hyperbolic tangent units, and a random input and target signal. There are clearly more severe plateaus with the quadratic cost."
        },
        {
            "heading": "4.2 Gradients at initialization",
            "text": ""
        },
        {
            "heading": "4.2.1 Theoretical Considerations and a New",
            "text": "Normalized Initialization\nWe study the back-propagated gradients, or equivalently the gradient of the cost function on the inputs biases at each layer. Bradley (2009) found that back-propagated gradients were smaller as one moves from the output layer towards the input layer, just after initialization. He studied networks with linear activation at each layer, finding that the variance of the back-propagated gradients decreases as we go backwards in the network. We will also start by studying the linear regime.\nFor a dense artificial neural network using symmetric activation function f with unit derivative at 0 (i.e. f \u2032(0) = 1), if we write zi for the activation vector of layer i, and si the argument vector of the activation function at layer i, we have si = ziW i + bi and zi+1 = f(si). From these definitions we obtain the following:\n\u2202Cost\n\u2202sik = f \u2032(sik)W i+1 k,\u2022\n\u2202Cost \u2202si+1 (2)\n\u2202Cost \u2202wil,k = zil \u2202Cost \u2202sik (3)\nThe variances will be expressed with respect to the input, outpout and weight initialization randomness. Consider the hypothesis that we are in a linear regime at the initialization, that the weights are initialized independently and that the inputs features variances are the same (= V ar[x]). Then we can say that, with ni the size of layer i and x the network input,\nf \u2032(sik) \u2248 1, (4)\nV ar[zi] = V ar[x] i\u22121\u220f i\u2032=0 ni\u2032V ar[W i \u2032 ], (5)\nWe write V ar[W i \u2032 ] for the shared scalar variance of all weights at layer i\u2032. Then for a network with d layers,\nV ar [\u2202Cost\n\u2202si\n] = V ar [\u2202Cost \u2202sd ] d\u220f i\u2032=i ni\u2032+1V ar[W i \u2032 ], (6)\nV ar [\u2202Cost\n\u2202wi\n] = i\u22121\u220f i\u2032=0 ni\u2032V ar[W i \u2032 ] d\u22121\u220f i\u2032=i ni\u2032+1V ar[W i \u2032 ]\n\u00d7 V ar[x]V ar [\u2202Cost\n\u2202sd\n] .\n(7)\nFrom a forward-propagation point of view, to keep information flowing we would like that\n\u2200(i, i\u2032), V ar[zi] = V ar[zi \u2032 ]. (8)\nFrom a back-propagation point of view we would similarly like to have\n\u2200(i, i\u2032), V ar [\u2202Cost\n\u2202si\n] = V ar [\u2202Cost \u2202si\u2032 ] . (9)\nThese two conditions transform to:\n\u2200i, niV ar[W i] = 1 (10)\n\u2200i, ni+1V ar[W i] = 1 (11)\nAs a compromise between these two constraints, we might want to have\n\u2200i, V ar[W i] = 2 ni + ni+1\n(12)\nNote how both constraints are satisfied when all layers have the same width. If we also have the same initialization for the weights we could get the following interesting properties:\n\u2200i, V ar [\u2202Cost\n\u2202si\n] = [ nV ar[W ] ]d\u2212i V ar[x] (13)\n\u2200i, V ar [\u2202Cost\n\u2202wi\n] = [ nV ar[W ] ]d V ar[x]V ar [\u2202Cost \u2202sd ] (14)\nWe can see that the variance of the gradient on the weights is the same for all layers, but the variance of the backpropagated gradient might still vanish or explode as we consider deeper networks. Note how this is reminiscent of issues raised when studying recurrent neural networks (Bengio et al., 1994), which can be seen as very deep networks when unfolded through time.\nThe standard initialization that we have used (eq.1) gives rise to variance with the following property:\nnV ar[W ] = 1 3\n(15)\nwhere n is the layer size (assuming all layers of the same size). This will cause the variance of the back-propagated gradient to be dependent on the layer (and decreasing).\nThe normalization factor may therefore be important when initializing deep networks because of the multiplicative effect through layers, and we suggest the following initialization procedure to approximately satisfy our objectives of maintaining activation variances and back-propagated gradients variance as one moves up or down the network. We call it the normalized initialization:\nW \u223c U [ \u2212\n\u221a 6\n\u221a nj + nj+1 ,\n\u221a 6\n\u221a nj + nj+1\n] (16)"
        },
        {
            "heading": "4.2.2 Gradient Propagation Study",
            "text": "To empirically validate the above theoretical ideas, we have plotted some normalized histograms of activation values, weight gradients and of the back-propagated gradients at initialization with the two different initialization methods. The results displayed (Figures 6, 7 and 8) are from experiments on Shapeset-3 \u00d7 2, but qualitatively similar results were obtained with the other datasets.\nWe monitor the singular values of the Jacobian matrix associated with layer i:\nJ i = \u2202zi+1\n\u2202zi (17)\nWhen consecutive layers have the same dimension, the average singular value corresponds to the average ratio of infinitesimal volumes mapped from zi to zi+1, as well as to the ratio of average activation variance going from zi to zi+1. With our normalized initialization, this ratio is around 0.8 whereas with the standard initialization, it drops down to 0.5."
        },
        {
            "heading": "4.3 Back-propagated Gradients During Learning",
            "text": "The dynamic of learning in such networks is complex and we would like to develop better tools to analyze and track it. In particular, we cannot use simple variance calculations in our theoretical analysis because the weights values are not anymore independent of the activation values and the linearity hypothesis is also violated.\nAs first noted by Bradley (2009), we observe (Figure 7) that at the beginning of training, after the standard initialization (eq. 1), the variance of the back-propagated gradients gets smaller as it is propagated downwards. However we find that this trend is reversed very quickly during learning. Using our normalized initialization we do not see such decreasing back-propagated gradients (bottom of Figure 7).\nWhat was initially really surprising is that even when the back-propagated gradients become smaller (standard initialization), the variance of the weights gradients is roughly constant across layers, as shown on Figure 8. However, this is explained by our theoretical analysis above (eq. 14). Interestingly, as shown in Figure 9, these observations on the weight gradient of standard and normalized initialization change during training (here for a tanh network). Indeed, whereas the gradients have initially roughly the same magnitude, they diverge from each other (with larger gradients in the lower layers) as training progresses, especially with the standard initialization. Note that this might be one of the advantages of the normalized initialization, since having gradients of very different magnitudes at different layers may yield to ill-conditioning and slower training.\nFinally, we observe that the softsign networks share similarities with the tanh networks with normalized initialization, as can be seen by comparing the evolution of activations in both cases (resp. Figure 3-bottom and Figure 10)."
        },
        {
            "heading": "5 Error Curves and Conclusions",
            "text": "The final consideration that we care for is the success of training with different strategies, and this is best illustrated with error curves showing the evolution of test error as training progresses and asymptotes. Figure 11 shows such curves with online training on Shapeset-3\u00d7 2, while Table 1 gives final test error for all the datasets studied (Shapeset-3 \u00d7 2, MNIST, CIFAR-10, and SmallImageNet). As a baseline, we optimized RBF SVM models on one hundred thousand Shapeset examples and obtained 59.47% test error, while on the same set we obtained 50.47% with a depth five hyperbolic tangent network with normalized initialization.\nThese results illustrate the effect of the choice of activation and initialization. As a reference we include in Fig-\nure 11 the error curve for the supervised fine-tuning from the initialization obtained after unsupervised pre-training with denoising auto-encoders (Vincent et al., 2008). For each network the learning rate is separately chosen to minimize error on the validation set. We can remark that on Shapeset-3 \u00d7 2, because of the task difficulty, we observe important saturations during learning, this might explain that the normalized initialization or the softsign effects are more visible.\nSeveral conclusions can be drawn from these error curves: \u2022 The more classical neural networks with sigmoid or\nhyperbolic tangent units and standard initialization fare rather poorly, converging more slowly and apparently towards ultimately poorer local minima.\n\u2022 The softsign networks seem to be more robust to the initialization procedure than the tanh networks, presumably because of their gentler non-linearity.\n\u2022 For tanh networks, the proposed normalized initialization can be quite helpful, presumably because the layer-to-layer transformations maintain magnitudes of\nactivations (flowing upward) and gradients (flowing backward).\nOthers methods can alleviate discrepancies between layers during learning, e.g., exploiting second order information to set the learning rate separately for each parameter. For example, we can exploit the diagonal of the Hessian (LeCun et al., 1998b) or a gradient variance estimate. Both those methods have been applied for Shapeset-3\u00d7 2 with hyperbolic tangent and standard initialization. We observed a gain in performance but not reaching the result obtained from normalized initialization. In addition, we observed further gains by combining normalized initialization with second order methods: the estimated Hessian might then focus on discrepancies between units, not having to correct important initial discrepancies between layers.\nIn all reported experiments we have used the same number of units per layer. However, we verified that we obtain the same gains when the layer size increases (or decreases) with layer number.\nThe other conclusions from this study are the following:\n\u2022 Monitoring activations and gradients across layers and\ntraining iterations is a powerful investigative tool for understanding training difficulties in deep nets.\n\u2022 Sigmoid activations (not symmetric around 0) should be avoided when initializing from small random weights, because they yield poor learning dynamics, with initial saturation of the top hidden layer.\n\u2022 Keeping the layer-to-layer transformations such that both activations and gradients flow well (i.e. with a Jacobian around 1) appears helpful, and allows to eliminate a good part of the discrepancy between purely supervised deep networks and ones pre-trained with unsupervised learning.\n\u2022 Many of our observations remain unexplained, suggesting further investigations to better understand gradients and training dynamics in deep architectures."
        }
    ],
    "title": "Understanding the difficulty of training deep feedforward neural networks",
    "year": 2010
}