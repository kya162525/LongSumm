{
    "abstractText": "Variable and feature selection have become the focus of much research in areas of application for which datasets with tens or hundreds of thousands of variabl es are available. These areas include text processing of internet documents, gene expression arr ay nalysis, and combinatorial chemistry. The objective of variable selection is three-fold: improvi ng the prediction performance of the predictors, providing faster and more cost-effective predict ors, and providing a better understanding of the underlying process that generated the data. The contrib utions of this special issue cover a wide range of aspects of such problems: providing a better definit ion of the objective function, feature construction, feature ranking, multivariate feature sele ction, efficient search methods, and feature validity assessment methods.",
    "authors": [
        {
            "affiliations": [],
            "name": "Isabelle Guyon"
        },
        {
            "affiliations": [],
            "name": "Leslie Pack Kaelbling"
        }
    ],
    "id": "SP:830082629772e85e8f1432fc12e54dfd9cfa4abd",
    "references": [
        {
            "authors": [
                "T.R. Golub"
            ],
            "title": "Molecular classification of cancer: Class discovery",
            "year": 2001
        },
        {
            "authors": [
                "Kaufmann. R. Kohavi",
                "G. John"
            ],
            "title": "Wrappers for feature selection",
            "year": 1992
        },
        {
            "authors": [
                "December"
            ],
            "title": "D",
            "venue": "Koller and M. Sahami. Toward optimal feature selection. In",
            "year": 1997
        },
        {
            "authors": [
                "Kaufmann",
                "CA San Francisco"
            ],
            "title": "Convergence rates of the voting Gibbs classifie",
            "year": 1998
        }
    ],
    "sections": [
        {
            "heading": "1 Introduction",
            "text": "As of 1997, when a special issue on relevance including several papers on variable and feature selection was published (Blum and Langley, 1997, Kohavi and John, 1997), few domains explored used more than 40 features. The situation has changed considerably in thepas f w years and, in this special issue, most papers explore domains with hundreds to tens of thousands of variables or features:1 New techniques are proposed to address these challenging tasks involving many irrelevant and redundant variables and often comparably few training examples.\nTwo examples are typical of the new application domains and serve us as illustration hroughout this introduction. One is gene selection from microarray data and the other is text ca gorization. In the gene selection problem, the variables are gene expression coefficients orresponding to the\n1. We call \u201cvariable\u201d the \u201craw\u201d input variables and \u201cfeatures\u201d variables constructed for the input variables. We use without distinction the terms \u201cvariable\u201d and \u201cfeature\u201d when there is no impact on the selection algorithms, e.g., when features resulting from a pre-processing of input variables are explicitly computed. The distinction is necessary in the case of kernel methods for which features are not explicitly computed (see section 5.3).\nc\u00a92003 Isabelle Guyon and Andre\u0301 Elisseeff.\nabundance of mRNA in a sample (e.g. tissue biopsy), for a number of patients. A typical classification task is to separate healthy patients from cancer patients, based ontheir gene expression \u201cprofile\u201d. Usually fewer than 100 examples (patients) are available altogether for training and testing. But, the number of variables in the raw data ranges from 6000 to 60,000. Some initial filtering usually brings the number of variables to a few thousand. Because the abundance of mRNA varies by several orders of magnitude depending on the gene, the variables are u ually standardized. In the text classification problem, the documents are represented by a \u201cbag-of-words\u201d, that is a vector of dimension the size of the vocabulary containing word frequency counts (proper normalization of the variables also apply). Vocabularies of hundreds of thousands of words are common, but an initial pruning of the most and least frequent words may reduce the effectivenumber of words to 15,000. Large document collections of 5000 to 800,000 documents are available forresearch. Typical tasks include the automatic sorting of URLs into a web directory and the detection of uns licited email (spam). For a list of publicly available datasets used in this issue, see Table 1t the end of the paper.\nThere are many potential benefits of variable and feature selection: facilitating data visualization and data understanding, reducing the measurement and storage requirem nts, reducing training and utilization times, defying the curse of dimensionality to improve prediction performance. Some methods put more emphasis on one aspect than another, and this is another point of distinction between this special issue and previous work. The papers in this issue focus mainly on constructing and selectingsubsets of featuresthat areusefulto build a good predictor. This contrasts with the problem of finding or ranking all potentially relevant variables. Selecting the most relevant variables is usually suboptimal for building a predictor, particularly if the variables areredundant. Conversely, a subset of useful variables may exclude many redundant, but relevant, variables. For a discussion of relevancevs.usefulness and definitions of the various notions of relevance, see the review articles of Kohavi and John (1997) and Blum and Langley (1997).\nThis introduction surveys the papers presented in this special issue. Thedepth of treatment of various subjects reflects the proportion of papers covering them: the problem of supervised learning is treated more extensively than that of unsupervised learning; classification problems serve more often as illustration than regression problems, and only vectorial input datais considered. Complexity is progressively introduced throughout the sections: The first section s arts by describingfilters that select variables by ranking them with correlation coefficients (Section2). Limitations of such approaches are illustrated by a set of constructed examples (Section 3).Subset selection methods are then introduced (Section 4). These includewrapper methodsthat assess subsets of variables according to their usefulness to a given predictor. We show how some embedded methods implement the same idea, but proceed more efficiently by directly optimizing a two-part objective function with a goodness-of-fit term and a penalty for a large number of variables. Wthen turn to the problem of feature construction, whose goals include increasing the predictor performance and building more compact feature subsets (Section 5). All of the previous steps benefit from reliably assessing the statistical significance of the relevance of features. We briefly review model selection methods and statistical tests used to that effect (Section 6). Finally, we conclude the paper with a discussion section in which we go over more advanced issues (Section 7). Because the organization of our paper does not follow the work flow of building a machine learning application, we summarize the steps that may be taken to solve a feature selection problem in a check list2:\n2. We caution the reader that this check list is heuristic. The only recommendatio that is almost surely valid is to try the simplest things first.\n1. Do you have domain knowledge?If yes, construct a better set of \u201cad hoc\u201d features.\n2. Are your features commensurate?If no, consider normalizing them.\n3. Do you suspect interdependence of features?If yes, expand your feature set by constructing conjunctive features or products of features, as much as your computer resources allow you (see example of use in Section 4.4).\n4. Do you need to prune the input variables(e.g. for cost, speed or data understanding reasons)? If no, construct disjunctive features or weighted sums of features (e.g. by clustering or matrix factorization, see Section 5).\n5. Do you need to assess features individually(e.g. to understand their influence on the system or because their number is so large that you need to do a first filtering)? If yes, use a variable ranking method (Section 2 and Section 7.2); else, do it anyway to get baseline r sults.\n6. Do you need a predictor?If no, stop.\n7. Do you suspect your data is \u201cdirty\u201d (has a few meaningless input patterns and/or noisy outputs or wrong class labels)? If yes, detect the outlier examples using thetop ranking variables obtained in step 5 as representation; check and/or discard them.\n8. Do you know what to try first? If no, use a linear predictor.3 Use a forward selection method (Section 4.2) with the \u201cprobe\u201d method as a stopping criterion (Section 6) or use the`0-norm embedded method (Section 4.3). For comparison, following the ranking of step 5, construct a sequence of predictors of same nature using increasing subsets of features. Can you match or improve performance with a smaller subset? If yes, try a non-linear predictor with that subset.\n9. Do you have new ideas, time, computational resources, and enough examples? If yes, compare several feature selection methods, including your new idea, correlation coefficients, backward selection and embedded methods (Section 4). Use linear and non-linear predictors. Select the best approach with model selection (Section 6).\n10. Do you want a stable solution(to improve performance and/or understanding)? If yes, subsample your data and redo your analysis for several \u201cbootstraps\u201d (Section 7.1)."
        },
        {
            "heading": "2 Variable Ranking",
            "text": "Many variable selection algorithms include variable ranking as a principal oruxiliary selection mechanism because of its simplicity, scalability, and good empirical success. Sveral papers in this issue use variable ranking as a baseline method (see, e.g., Bekkerman et al., 2003, Caruana and de Sa, 2003, Forman, 2003, Weston et al., 2003). Variable ranking is not necessarily used to build predictors. One of its common uses in the microarray analysis domain is to discover a set of drug leads (see, e.g., et al., 1999): A ranking criterion is used to find genes that discriminate between healthy and disease patients; such genes may code for \u201cdrugable\u201d proteins, or proteins that may\n3. By \u201clinear predictor\u201d we mean linear in the parameters. Feature construction may render the predictor non-linear in the input variables.\nthemselves be used as drugs. Validating drug leads is a labor intensive probl m in biology that is outside of the scope of machine learning, so we focus here on building predictors. We consider in this section ranking criteria defined for individual variables, independently of the context of others. Correlation methods belong to that category. We also limit ourselves to supervised learning criteria. We refer the reader to Section 7.2 for a discussion of other techniques."
        },
        {
            "heading": "2.1 Principle of the Method and Notations",
            "text": "Consider a set ofm examples{xk,yk} (k = 1, ...m) consisting ofn input variablesxk,i (i = 1, ...n) and one output variableyk. Variable ranking makes use of a scoring functionS(i) computed from the valuesxk,i andyk, k = 1, ...m. By convention, we assume that a high score is indicative of a valuable variable and that we sort variables in decreasing order ofS(i). To use variable ranking to build predictors, nested subsets incorporating progressively more andmore variables of decreasing relevance are defined. We postpone until Section 6 the discussion of selecting an optimum subset size.\nFollowing the classification of Kohavi and John (1997), variable rankingis afilter method: it is a preprocessing step, independent of the choice of the predictor. Still, under certain independence or orthogonality assumptions, it may be optimal with respect to a given predictor.For instance, using Fisher\u2019s criterion4 to rank variables in a classification problem where the covariance matrix is diagonal is optimum for Fisher\u2019s linear discriminant classifier (Duda et al., 2001). Even when variable ranking is not optimal, it may be preferable to other variable subset selectionmethods because of its computational and statistical scalability: Computationally, it is efficient since it requi es only the computation ofn scores and sorting the scores; Statistically, it is robust against overfittingbecause it introduces bias but it may have considerably less variance (Hastie et al.,2001).5\nWe introduce some additional notation: If the input vectorx can be interpreted as the realization of a random vector drawn from an underlying unknown distribution, we denote byXi the random variable corresponding to theith component ofx. Similarly,Y will be the random variable of which the outcomey is a realization. We further denote byxi the m dimensional vector containing all the realizations of theith variable for the training examples, and byy the m dimensional vector containing all the target values."
        },
        {
            "heading": "2.2 Correlation Criteria",
            "text": "Let us consider first the prediction of a continuous outcomey. The Pearson correlation coefficient is defined as:\nR (i) = cov(Xi ,Y) \u221a\nvar(Xi)var(Y) , (1)\nwherecovdesignates the covariance andvar the variance. The estimate ofR(i) is given by:\nR(i) = \u2211mk=1(xk,i \u2212 x\u0304i)(yk\u2212 y\u0304) \u221a\n\u2211mk=1(xk,i \u2212 x\u0304i)2 \u2211mk=1(yk\u2212 y\u0304)2 , (2)\n4. The ratio of the between class variance to the within-class variance. 5. The similarity of variable ranking to the ORDERED-FS algorithm (Ng, 1998) indicates that its sample complexity\nmay be logarithmic in the number of irrelevant features, compared to a power law for \u201cwrapper\u201d subset selection methods. This would mean that variable ranking can tolerate a number of irrelevant variables exponential in the number of training examples.\nwhere the bar notation stands for an average over the indexk. This coefficient is also the cosine between vectorsxi andy, after they have been centered (their mean subtracted). Although theR(i) is derived fromR (i) it may be used without assuming that the input values are realizations of a random variable.\nIn linear regression, the coefficient of determination, which is the squareof R(i), represents the fraction of the total variance around the mean value \u00afy that is explained by the linear relation between xi andy. Therefore, usingR(i)2 as a variable ranking criterion enforces a ranking according to goodness of linear fit of individual variables.6\nThe use ofR(i)2 can be extended to the case of two-class classification, for which each class label is mapped to a given value ofy, e.g.,\u00b11. R(i)2 can then be shown to be closely related to Fisher\u2019s criterion (Furey et al., 2000), to the T-test criterion, and othersimilar criteria (see, e.g., et al., 1999, Tusher et al., 2001, Hastie et al., 2001). As further developed in Section 6, the link to the T-test shows that the scoreR(i) may be used as a test statistic to assess the significance of a variable.\nCorrelation criteria such asR(i) can only detect linear dependencies between variable and target. A simple way of lifting this restriction is to make a non-linear fit of the target withs ngle variables and rank according to the goodness of fit. Because of the riskof overfitting, one can alternatively consider using non-linear preprocessing (e.g., squaring, taking the square root, the log, the inverse, etc.) and then using a simple correlation coefficient. Correlation criteria are often used for microarray data analysis, as illustrated in this issue by Weston et al. (2003)."
        },
        {
            "heading": "2.3 Single Variable Classifiers",
            "text": "As already mentioned, usingR(i)2 as a ranking criterion forregressionenforces a ranking according to goodness of linear fit of individual variables. One can extend to theclassificationcase the idea of selecting variables according to their individual predictive power, usingas criterion the performance of a classifier built with a single variable. For example, the value of the variable itself (or its negative, to account for class polarity) can be used as discriminant function. A classifier is obtained by setting a threshold\u03b8 on the value of the variable (e.g., at the mid-point between the center of gravity of the two classes).\nThe predictive power of the variable can be measured in terms of error rate. But, various other criteria can be defined that involve false positive classification ratefpr and false negative classification ratefnr. The tradeoff betweenfpr and fnr is monitored in our simple example by varying the threshold\u03b8. ROC curves that plot \u201chit\u201d rate(1-fpr) as a function of \u201cfalse alarm\u201d ratefnr are instrumental in defining criteria such as: The \u201cBreak Even Point\u201d (the hit rate for a threshold value corresponding tofpr=fnr) and the \u201cArea Under Curve\u201d (the area under the ROC curve).\nIn the case where there is a large number of variables that separate the data perfectly, ranking criteria based on classification success rate cannot distinguish between the top ranking variables. One will then prefer to use a correlation coefficient or another statistic like the margin (the distance between the examples of opposite classes that are closest to one another for a given variable).\n6. A variant of this idea is to use the mean-squared-error, but, if the variables are not on comparable scales, a comparison between mean-squared-errors is meaningless. Another variant is to useR(i) to rank variables, notR(i)2. Positively correlated variables are then top ranked and negatively correlated variables bottom ranked. With this method, one can choose a subset of variables with a given proportion of positively and negatively correlated variables.\nThe criteria described in this section extend to the case of binary variables.Forman (2003) presents in this issue an extensive study of such criteria for binary variables with applications in text classification."
        },
        {
            "heading": "2.4 Information Theoretic Ranking Criteria",
            "text": "Several approaches to the variable selection problem using information there ic criteria have been proposed (as reviewed in this issue by Bekkerman et al., 2003, Dhillon et al., 2003, Forman, 2003, Torkkola, 2003). Many rely on empirical estimates of the mutual information betwe n each variable and the target:\nI (i) = Z\nxi\nZ\ny p(xi ,y) log p(xi ,y) p(xi)p(y) dxdy, (3)\nwherep(xi) andp(y) are the probability densities ofxi andy, andp(xi ,y) is the joint density. The criterionI (i) is a measure of dependency between the density of variablexi and the density of the targety.\nThe difficulty is that the densitiesp(xi), p(y) and p(xi ,y) are all unknown and are hard to estimate from data. The case of discrete or nominal variables is probably easiest because the integral becomes a sum:\nI(i) = \u2211 xi \u2211 y\nP(X = xi ,Y = y) log P(X = xi ,Y = y)\nP(X = xi)P(Y = y) . (4)\nThe probabilities are then estimated from frequency counts. For example, ina three-class problem, if a variable takes 4 values,P(Y = y) represents the class prior probabilities (3 frequency counts),P(X = xi) represents the distribution of the input variable (4 frequency counts), andP(X = xi ,Y = y) is the probability of the joint observations (12 frequency counts). The estimation obviously becomes harder with larger numbers of classes and variablevalues.\nThe case of continuous variables (and possibly continuous targets) is thehard st. One can consider discretizing the variables or approximating their densities with a non-parametric method such as Parzen windows (see, e.g., Torkkola, 2003). Using the normaldistribution to estimate densities would bring us back to estimating the covariance betweenXi a dY, thus giving us a criterion similar to a correlation coefficient."
        },
        {
            "heading": "3 Small but Revealing Examples",
            "text": "We present a series of small examples that outline the usefulness and the limitations of variable ranking techniques and present several situations in which the variable depen encies cannot be ignored."
        },
        {
            "heading": "3.1 Can Presumably Redundant Variables Help Each Other?",
            "text": "One common criticism of variable ranking is that it leads to the selection of a redundant subset. The same performance could possibly be achieved with a smaller subset of complementary variables. Still, one may wonder whether adding presumably redundant variables canresult in a performance gain.\n\u221a\n2. I.i.d. variables are not truly\nredundant.\nConsider the classification problem of Figure 1. For each class, we drewat randomm= 100 examples, each of the two variables being drawn independently accordingto a normal distribution of standard deviation 1. The class centers are placed at coordinates (-1;-1) and (1; 1). Figure 1.a shows the scatter plot in the two-dimensional space of the input variables. We also show on the same figure histograms of the projections of the examples on the axes. To facilitate its reading, the scatter plot is shown twice with an axis exchange. Figure 1.b shows the same scatter plots after a forty five degree rotation. In this representation, the x-axis projection provides a better sepa ation of the two classes: the standard deviation of both classes is the same, but the distance between centers in projection is now 2 \u221a 2 instead of 2. Equivalently, if we rescale the x-axis by dividing by \u221a 2 to obtain a feature that is the average of the two input variables, the distance between centersis still 2, but the within class standard deviation is reduced by a factor \u221a 2. This is not so surprising, since by averagingn i.i.d. random variables we will obtain a reduction of standard deviation by a factor of \u221a\nn. Noise reduction and consequently better class separation may be obtained by adding variables that are presumably redundant. Variables that are independently and identically distributed are not truly redundant."
        },
        {
            "heading": "3.2 How Does Correlation Impact Variable Redundancy?",
            "text": "Another notion of redundancy is correlation. In the previous example, in spite of the fact that the examples are i.i.d. with respect to the class conditional distributions, the variables re correlated because of the separation of the class center positions. One may wonder hw variable redundancy is affected by adding within-class variable correlation. In Figure 2, the class centers are positioned\nsimilarly as in the previous example at coordinates (-1; -1) and (1; 1) but we have added some variable co-variance. We consider two cases:\nIn Figure 2.a, in the direction of the class center line, the standard deviation of the class conditional distributions is \u221a 2, while in the perpendicular direction it is a small value (\u03b5 = 1/10). With this construction, as\u03b5 goes to zero, the input variables have the same separation power as in the case of the example of Figure 1, with a standard deviation of the class distributions of one and a distance of the class centers of 2. But the feature constructed as the sumof the input variables has no better separation power: a standard deviation of \u221a 2 and a class center separation of 2 \u221a 2 (a simple scaling that does not change the separation power). Therefore, inthe limit of perfect variable correlation (zero variance in the direction perpendicular to the class center line), single variables provide the same separation as the sum of the two variables.P rfectly correlated variables are truly redundant in the sense that no additional information is gainedby adding them.\nIn contrast, in the example of Figure 2.b, the first principal direction of the covariance matrices of the class conditional densities is perpendicular to the class center line. In this case, more is gained by adding the two variables than in the example of Figure 1. One noticesthat in spite of their great complementarity (in the sense that a perfect separation can be achieved in the two-dimensional space spanned by the two variables), the two variables are (anti-)correlated. More anti-correlation is obtained by making the class centers closer and increasing the ratio of the variances of the class conditional distributions.Very high variable correlation (or anti-correlation) does not mean absence of variable complementarity.\nThe examples of Figure 1 and 2 all have variables with the same distribution of examples (in projection on the axis). Therefore, methods that score variables individually and independently of each other are at loss to determine which combination of variables would givebest performance."
        },
        {
            "heading": "3.3 Can a Variable that is Useless by Itself be Useful with Others?",
            "text": "One concern about multivariate methods is that they are prone to overfitting.The problem is aggravated when the number of variables to select from is large compared to the number of examples. It is tempting to use a variable ranking method to filter out the least promising variables before using a multivariate method. Still one may wonder whether one could potentially lose som valuable variables through that filtering process.\nWe constructed an example in Figure 3.a. In this example, the two class conditional d stributions have identical covariance matrices, and the principal directions are oriented diagonally. The class centers are separated on one axis, but not on the other. By itself one variable is \u201cuseless\u201d. Still, the two dimensional separation is better than the separation using the \u201cuseful\u201d variable alone. Therefore,a variable that is completely useless by itself can provide a significant performance improvement when taken with others.\nThe next question is whether two variables that are useless by themselves can provide a good separation when taken together. We constructed an example of such a case, inspired by the famous XOR problem.7 In Figure 3.b, we drew examples for two classes using four Gaussians placed on the corners of a square at coordinates (0; 0), (0; 1), (1; 0), and (1; 1). The class labels of these four \u201cclumps\u201d are attributed according to the truth table of the logical XOR function:f(0; 0)=0, f(0; 1)=1, f(1; 0)=1; f(1; 1)=0. We notice that the projections on the axes provideno class separation. Yet, in the two dimensional space the classes can easily be separated (albeit notwith a linear decision function).8 Two variables that are useless by themselves can be useful togethr.\n7. The XOR problem is sometimes referred to as the two-bit parity problem and is generalizable to more than two dimensions (n-bit parity problem). A related problem is the chessboard problem in which the two classes pave the space with squares of uniformly distributed examples with alternating class labels. The latter problem is also generalizable to the multi-dimensional case. Similar examples are used in several papers in this issue (Perkins et al., 2003, Stoppiglia et al., 2003). 8. Incidentally, the two variables are also uncorrelated with one another."
        },
        {
            "heading": "4 Variable Subset Selection",
            "text": "In the previous section, we presented examples that illustrate the usefulness of selecting subsets of variables that together have good predictive power, as opposed to ranking variables according to their individual predictive power. We now turn to this problem and outline the main directions that have been taken to tackle it. They essentially divide into wrappers, filters, and embedded methods. Wrappers utilize the learning machine of interest as a black box to score subsets of variable according to their predictive power.Filters select subsets of variables as a pre-processing step, independently of the chosen predictor.Embeddedmethods perform variable selection in the process of training and are usually specific to given learning machines."
        },
        {
            "heading": "4.1 Wrappers and Embedded Methods",
            "text": "The wrapper methodology, recently popularized by Kohavi and John (1997), offers a simple and powerful way to address the problem of variable selection, regardlessof the chosen learning machine. In fact, the learning machine is considered a perfect black box andthe method lends itself to the use of off-the-shelf machine learning software packages. In its most general formulation, the wrapper methodology consists in using the prediction performance of a given learning machine to assess the relative usefulness of subsets of variables. In practice, one needs to define: (i) how to search the space of all possible variable subsets; (ii) how to assess the prediction performance of a learning machine to guide the search and halt it; and (iii) which predictor to use. An exhaustive search can conceivably be performed, if the number of variables is nottoo large. But, the problem\nis known to be NP-hard (Amaldi and Kann, 1998) and the search becomesquickly computationally intractable. A wide range of search strategies can be used, including best-first, branch-and-bound, simulated annealing, genetic algorithms (see Kohavi and John, 1997, for areview). Performance assessments are usually done using a validation set or by cross-validation(see Section 6). As illustrated in this special issue, popular predictors include decision trees, na\u0308\u0131ve Bayes, least-square linear predictors, and support vector machines.\nWrappers are often criticized because they seem to be a \u201cbrute force\u201d method requiring massive amounts of computation, but it is not necessarily so. Efficient search strategies may be devised. Using such strategies does not necessarily mean sacrificing prediction perfrmance. In fact, it appears to be the converse in some cases: coarse search strategies may alleviate theproblem of overfitting, as illustrated for instance in this issue by the work of Reunanen (2003). Greedy search strategies seem to be particularly computationally advantageous and robust against overfitting. They come in two flavors: forward selectionandbackward elimination. In forward selection, variables are progressively incorporated into larger and larger subsets, whereas in backward elimination one starts with the set of all variables and progressively eliminates the least promising ones.9 Both methods yield nested subsetsof variables.\nBy using the learning machine as a black box, wrappers are remarkably universal and simple. But embedded methods that incorporate variable selection as part of the training process may be more efficient in several respects: they make better use of the available data by not needing to split the training data into a training and validation set; they reach a solution faster byavoiding retraining a predictor from scratch for every variable subset investigated. Embedded methods are not new: decision trees such as CART, for instance, have a built-in mechanism to perform variable selection (Breiman et al., 1984). The next two sections are devoted to two families of embedded methods illustrated by algorithms published in this issue."
        },
        {
            "heading": "4.2 Nested Subset Methods",
            "text": "Some embedded methods guide their search by estimating changes in the objective function value incurred by making moves in variable subset space. Combined with greedy sarch strategies (backward elimination or forward selection) they yield nested subsets of variables.10\nLet us calls the number of variables selected at a given algorithm step andJ(s) the value of the objective function of the trained learning machine using such a variable su set. Predicting the change in the objective function is obtained by:\n1. Finite difference calculation: The difference betweenJ(s) andJ(s+1) or J(s\u22121) is computed for the variables that are candidates for addition or removal.\n2. Quadratic approximation of the cost function: This method was originally proposed to prune weights in neural networks (LeCun et al., 1990). It can be usedfor backward elimination of variables, via the pruning of the input variable weightswi . A second order Taylor expansion ofJ is made. At the optimum ofJ, the first-order term can be neglected, yield-\n9. The name greedy comes from the fact that one never revisits former decisions to include (or exclude) variables in light of new decisions.\n10. The algorithms presented in this section and in the following generally benefit from variable normalization, except if they have an internal normalization mechanism like the Gram-Schmidt orthogonalization procedure .\ning for variablei to the variationDJi = (1/2) \u2202 2J \u2202w2i (Dwi)2. The change in weightDwi = wi corresponds to removing variablei.\n3. Sensitivity of the objective function calculation: The absolute value or the square of the derivative ofJ with respect toxi (or with respect towi) is used.\nSome training algorithms lend themselves to using finite differences (method 1) because exact differences can be computed efficiently, without retraining new models foreach candidate variable. Such is the case for the linear least-square model: The Gram-Schmidt orthogonolization procedure permits the performance of forward variable selection by adding at each step the variable that most decreases the mean-squared-error. Two papers in this issue are devot d to this technique (Stoppiglia et al., 2003, Rivals and Personnaz, 2003). For other algorithms like kern l methods, approximations of the difference can be computed efficiently. Kernel methods are learning machines of the form f (x) = \u2211mk=1 \u03b1kK(x,xk), whereK is the kernel function, which measures the similarity betweenx andxk (Schoelkopf and Smola, 2002). The variation inJ(s) is computed by keeping the\u03b1k values constant. This procedure originally proposed for SVMs (Guyon et al., 2002) is used in this issue as a baseline method (Rakotomamonjy, 2003, Weston et al., 2003).\nThe \u201coptimum brain damage\u201d (OBD) procedure (method 2) is mentioned in this issue in the paper of Rivals and Personnaz (2003). The case of linear predictors f (x) = w \u00b7x+b is particularly simple. The authors of the OBD algorithm advocate usingDJi instead of the magnitude of the weights|wi | as pruning criterion. However, for linear predictors trained with an objectiv function J that is quadratic inwi these two criteria are equivalent. This is the case, for instance, for the linear least square model usingJ = \u2211mk=1(w \u00b7 xk + b\u2212 yk)2 and for the linear SVM or optimum margin classifier, which minimizesJ = (1/2)||w||2, under constraints (Vapnik, 1982). Interestingly, for linear SVMs the finite difference method (method 1) and the sensitivity method (method 3) also boil down to selecting the variable with smallest|wi | for elimination at each step (Rakotomamonjy, 2003).\nThe sensitivity of the objective function to changes inwi (method 3) is used to devise a forward selection procedure in one paper presented in this issue (Perkins et al., 2003). Applications of this procedure to a linear model with a cross-entropy objective function are pres nted. In the formulation proposed, the criterion is the absolute value of\u2202J\u2202wi = \u2211 m k=1 \u2202J \u2202\u03c1k \u2202\u03c1k \u2202wi , where\u03c1k = yk f (xk). In the case of the linear modelf (x) = w \u00b7 x+b, the criterion has a simple geometrical interpretation: it is the the dot product between the gradient of the objective function with respect to the margin values and the vector[ \u2202\u03c1k\u2202wi = xk,iyk]k=1...m. For the cross-entropy loss function, we have: \u2202J \u2202\u03c1k = 1 1+e\u03c1k .\nAn interesting variant of the sensitivity analysis method is obtained by replacing the objective function by theleave-one-outcross-validation error. For some learning machines and some objective functions, approximate or exact analytical formulas of the leave-one-out error are known. In this issue, the case of the linear least-square model (Rivals and Personnaz, 2003) and SVMs (Rakotomamonjy, 2003) are treated. Approximations for non-linear least-squares have also been computed elsewhere (Monari and Dreyfus, 2000). The proposal ofRakotomamonjy (2003) is to train non-linear SVMs (Boser et al., 1992, Vapnik, 1998) with a regular training procedure and select features with backward elimination like in RFE (Guyon et al., 2002). The variable ranking criterion however is not computed using the sensitivity of the objective functio J, but that of a leave-one-out bound."
        },
        {
            "heading": "4.3 Direct Objective Optimization",
            "text": "A lot of progress has been made in this issue to formalize the objective functionof variable selection and find algorithms to optimize it. Generally, the objective function consists of twoterms that compete with each other: (1) thegoodness-of-fit(to be maximized), and (2) thenumber of variables (to be minimized). This approach bears similarity with two-part objective functios consisting of a goodness-of-fit term and a regularization term, particularly when the effect of the regularization term is to \u201cshrink\u201d parameter space. This correspondence is formally established in the paper of Weston et al. (2003) for the particular case of classification with linear predictors f (x) = w \u00b7x+b, in the SVM framework (Boser et al., 1992, Vapnik, 1998). Shrinking regularizers of the type ||w||pp = (\u2211ni=1w p i )\n1/p (`p-norm) are used. In the limit asp \u2192 0, the`p-norm is just the number of weights, i.e., the number of variables. Weston et al. proceed with showingthat the`0-norm formulation of SVMs can be solved approximately with a simple modification of the vanilla SVM algorithm:\n1. Train a regular linear SVM (using\u03001-norm or`2-norm regularization).\n2. Re-scale the input variables by multiplying them by the absolute values of thecomponents of the weight vectorw obtained.\n3. Iterate the first 2 steps until convergence.\nThe method is reminiscent of backward elimination procedures based on the small st|wi |. Variable normalization is important for such a method to work properly.\nWeston et al. note that, although their algorithm only approximately minimizes the`0-norm, in practice it may generalize better than an algorithm that really did minimize the`0-norm, because the latter would not provide sufficient regularization (a lot of variance remains because the optimization problem has multiple solutions). The need for additional regularization is alsostressed in the paper of Perkins et al. (2003). The authors use a three-part objective function that includes goodnessof-fit, a regularization term (`1-norm or `2-norm), and a penalty for large numbers of variables (`0-norm). The authors propose a computationally efficient forward selection method to optimize such objective.\nAnother paper in the issue, by Bi et al. (2003), uses`1-norm SVMs, without iterative multiplicative updates. The authors find that, for their application, the`1-norm minimization suffices to drive enough weights to zero. This approach was also taken in the context f l ast-square regression by other authors (Tibshirani, 1994). The number of variables can be further reduced by backward elimination.\nTo our knowledge, no algorithm has been proposed to directly minimize the number of variables for non-linear predictors. Instead, several authors have substituted for the problem of variable selection that of variable scaling (Jebara and Jaakkola, 2000, Weston et al., 2000, Grandvalet and Canu, 2002). The variable scaling factors are \u201chyper-parameters\u201d adjusted by model selection. The scaling factors obtained are used to assess variable relevance. A variant of the method consists of adjusting the scaling factors by gradient descent on a bound of the leav -one-out error (Weston et al., 2000). This method is used as baseline method in the paper of Weston etal. (2003) in this issue."
        },
        {
            "heading": "4.4 Filters for Subset Selection",
            "text": "Several justifications for the use of filters for subset selection have been put forward in this special issue and elsewhere. It is argued that, compared to wrappers, filters are faster. Still, recently proposed efficient embedded methods are competitive in that respect. Another argument is that some filters (e.g. those based on mutual information criteria) provide a generic sele tion of variables, not tuned for/by a given learning machine. Another compelling justification is that filtering can be used as a preprocessing step to reduce space dimensionality and overcome overfitting.\nIn that respect, it seems reasonable to use a wrapper (or embedded metho) wi a linear predictor as a filter and then train a more complexnon-linearpredictor on the resulting variables. An example of this approach is found in the paper of Bi et al. (2003): a linear`1-norm SVM is used for variable selection, but a non-linear`1-norm SVM is used for prediction. The complexity of linear filters can be ramped up by adding to the selection process products of input variables (monomials of a polynomial) and retaining the variables that are part of any selectedmonomial. Another predictor, e.g., a neural network, is eventually substituted to the polynomial toperf rm predictions using the selected variables (Rivals and Personnaz, 2003, Stoppiglia eta ., 2003). In some cases however, one may on the contrary want to reduce the complexity of linear filters to overcome overfitting problems. When the number of examples is small compared to the number of variables (in the case of microarray data for instance) one may need to resort to selecting var ables with correlation coefficients (see Section 2.2).\nInformation theoretic filtering methods such as Markov blanket11 algorithms (Koller and Sahami, 1996) constitute another broad family. The justification for classificationpr blems is that the measure of mutual information does not rely on any prediction process, but provides a bound on the error rate using any prediction scheme for the given distribution. We do not have any illustration of such methods in this issue for the problem of variable subset selection. We refer the interested reader to Koller and Sahami (1996) and references therein. However, the useof mutual information criteria for individual variable ranking was covered in Section 2 and application tofeature construction and selection are illustrated in Section 5."
        },
        {
            "heading": "5 Feature Construction and Space Dimensionality Reduction",
            "text": "In some applications, reducing the dimensionality of the data by selecting a subset of the original variables may be advantageous for reasons including the expense of making, storing and processing measurements. If these considerations are not of concern, other meansof space dimensionality reduction should also be considered.\nThe art of machine learning starts with the design of appropriate data representations. Better performance is often achieved using features derived from the original input. Building a feature representation is an opportunity to incorporate domain knowledge into the dataand can be very application specific. Nonetheless, there are a number of generic feature construction methods, including: clustering; basic linear transforms of the input variables (PCA/SVD, LDA); more sophisticated linear transforms like spectral transforms (Fourier, Hadamard), wavelet transforms or convolutions of kernels; and applying simple functions to subsets of variables, like products to create monomials.\n11. The Markov blanket of a given variablexi is a set of variables not includingxi that renderxi \u201cunnecessary\u201d. Once a Markov blanket is found,xi can safely be eliminated. Furthermore, in a backward elimination procedure, it will remain unnecessary at later stages.\nTwo distinct goals may be pursued for feature construction: achieving best reconstruction of the data or being most efficient for making predictions. The first problem is anunsupervised learning problem. It is closely related to that of data compression and a lot of algorithmsare used across both fields. The second problem is supervised. Are there reasons to selectfeatures in an unsupervised manner when the problem is supervised? Yes, possibly several: Some probl ms, e.g., in text processing applications, come with more unlabelled data than labelled data. Also, unsupervised feature selection is less prone to overfitting.\nIn this issue, four papers address the problem of feature construction. All of them take an information theoretic approach to the problem. Two of them illustrate the use of clustering o construct features (Bekkerman et al., 2003, Dhillon et al., 2003), one provides a nw matrix factorization algorithm (Globerson and Tishby, 2003), and one provides a supervised means of learning features from a variety of models (Torkkola, 2003). In addition, two papers whose main focus is directed to variable selection also address the selection of monomials of a polynomial model and the hidden units of a neural network (Rivals and Personnaz, 2003, Stoppiglia et al., 2003), and one paper addresses the implicit feature selection in non-linear kernel methods for polynomial kernels (Weston et al., 2003)."
        },
        {
            "heading": "5.1 Clustering",
            "text": "Clustering has long been used for feature construction. The idea is to replace a group of \u201csimilar\u201d variables by a cluster centroid, which becomes a feature. The most popular algorithms include K-means and hierarchical clustering. For a review, see, e.g., the textbook of Duda et al. (2001).\nClustering is usually associated with the idea of unsupervised learning. It can be useful to introduce some supervision in the clustering procedure to obtain more discriminant features. This is the idea of distributional clustering (Pereira et al., 1993), which is developed in two papers of this issue. Distributional clustering is rooted in the information bottleneck (IB) theory of Tishby et al. (1999). If we callX\u0303 the random variable representing the constructed features, the IB methodseeks to minimize the mutual informationI(X, X\u0303), while preserving the mutual informationI(X\u0303,Y). A global objective function is built by introducing a Lagrange multiplier\u03b2: J = I(X, X\u0303)\u2212\u03b2I(X\u0303,Y). So, the method searches for the solution that achieves the largest possible compression, while retaining the essential information about the target.\nText processing applications are usual targets for such techniques. Patterns are full documents and variables come from a bag-of-words representation: Each variable is associated to a word and is proportional to the fraction of documents in which that word appears. Inapplication to feature construction, clustering methods group words, not documents. In text categorization tasks, the supervision comes from the knowledge of document categories. It is introduced by replacing variable vectors containing document frequency counts by shorter variable vectors containing document category frequency counts, i.e., the words are represented as distributions over document categories.\nThe simplest implementation of this idea is presented in the paper of Dhillon et al. (2003) in this issue. It uses K-means clustering on variables represented by a vector of document category frequency counts. The (non-symmetric) similarity measure used is the Kullback-Leibler divergence K(x j , x\u0303i) = exp(\u2212\u03b2\u2211k xk, j ln(xk, j/x\u0303k,i)). In the sum, the indexk runs over document categories. A more elaborate approach is taken by Bekkerman et al. (2003) who use a \u201csoft\u201d version of K-means (allowing words to belong to several clusters) and who progressively divide clusters by varying the Lagrange multiplier\u03b2 monitoring the tradeoff betweenI(X, X\u0303) andI(X\u0303,Y). In this way, documents\nare represented as a distribution over word centroids. Both methods perform well. Bekkerman et al. mention that few words end up belonging to several clusters, hinting that \u201chard\u201d cluster assignment may be sufficient."
        },
        {
            "heading": "5.2 Matrix Factorization",
            "text": "Another widely used method of feature construction is singular value decomposition (SVD). The goal of SVD is to form a set of features that are linear combinations of the original variables, which provide the best possible reconstruction of the original data in the least square sense (Duda et al., 2001). It is an unsupervised method of feature construction. In this issue, the paper of Globerson and Tishby (2003) presents an information theoretic unsupervised feature construction method: sufficient dimensionality reduction (SDR). The most informative featur s are extracted by solving an optimization problem that monitors the tradeoff between data reconstruction and data compression, similar to the information bottleneck of Tishby et al. (1999); the features are found as Lagrange multipliers of the objective optimized. Non-negative matrices P ofdimension (m, n) representing the joint distribution of two random variables (for instance theco-occurrence of words in documents) are considered. The features are extracted by informationthe retic I-projections, yielding a reconstructed matrix of special exponential formP\u0303 = (1/Z)exp(\u03a6\u03a8). For a set ofd features,\u03a6 is a(m,d+2) matrix whose(d+1)th column is ones and\u03a8 is a(d+2,n) matrix whose (d+2)th column is ones, andZ is a normalization coefficient. Similarly to SVD, the solution shows the symmetry of the problem with respect to patterns and variables."
        },
        {
            "heading": "5.3 Supervised Feature Selection",
            "text": "We review three approaches for selecting features in cases where features should be distinguished from variables because both appear simultaneously in the same system:\nNested subset methods.A number of learning machines extract features as part of the learning process. These include neural networks whose internal nodes are feature extractors. Thus, node pruning techniques such as OBD LeCun et al. (1990) are featureselection algorithms. GramSchmidt orthogonalization is presented in this issue as an alternative to OBD (Stoppiglia et al., 2003).\nFilters. Torkkola (2003) proposes a filter method for constructing features using a mutual information criterion. The author maximizesI(\u03c6,y) for m dimensional feature vectors\u03c6 and target vectorsy.12 Modelling the feature density function with Parzen windows allows him to compute derivatives\u2202I/\u2202\u03c6i that are transform independent. Combining them with the transform-dependnt derivatives\u2202\u03c6i/\u2202w, he devises a gradient descent algorithm to optimize the parametersw of the transform (that need not be linear):\nwt+1 = wt +\u03b7 \u2202I \u2202w = wt +\u03b7 \u2202I \u2202\u03c6i \u2202\u03c6i \u2202w . (5)\nDirect objective optimization. Kernel methods possess an implicit feature space revealed by the kernel expansion:k(x,x\u2032) = \u03c6(x).\u03c6(x\u2032), where\u03c6(x) is a feature vector of possibly infinite dimension. Selecting these implicit features may improve generalization, but doesnot change the\n12. In fact, the author uses a quadratic measure of divergence instead of the usual mutual information.\nrunning time or help interpreting the prediction function. In this issue, Weston et al. (2003) propose a method for selecting implicit kernel features in the case of the polynomialkernel, using their framework of minimization of the\u03000-norm."
        },
        {
            "heading": "6 Validation Methods",
            "text": "We group in this section all the issues related to out-of-sample performance prediction (generalization prediction) and model selection. These are involved in various aspectsof variable and feature selection: to determine the number of variables that are \u201csignificant\u201d, to guidean halt the search for good variable subsets, to choose hyperparameters, and to evaluatethe final performance of the system.\nOne should first distinguish the problem of model selection from that of evaluating the final performance of the predictor. For that last purpose, it is important to setaside an independent test set. The remaining data is used both for training and performing model selection. Additional experimental sophistication can be added by repeating the entire experimentfor several drawings of the test set.13\nTo perform model selection (including variable/feature selection and hyperparameter optimization), the data not used for testing may be further split between fixed trainingand validation sets, or various methods of cross-validation can be used. The problem is then brought back to that of estimating the significance of differences in validation errors. For a fixed vali ation set, statistical tests can be used, but their validity is doubtful for cross-validation becaus independence assumptions are violated. For a discussion of these issues, see for instance the work of Dietterich (1998) and Nadeau and Bengio (2001). If there are sufficiently many examples,it may not be necessary to split the training data: Comparisons of training errors with statistical tests can be used (see Rivals and Personnaz, 2003, in this issue). Cross-validation can be extendedto time-series data and, while i.i.d. assumptions do not hold anymore, it is still possible to estimate generalization error confidence intervals (see Bengio and Chapados, 2003, in this issue).\nChoosing what fraction of the data should be used for training and for validation is an open problem. Many authors resort to using the leave-one-out cross-validation procedure, even though it is known to be a high variance estimator of generalization error (Vapnik, 1982) and to give overly optimistic results, particularly when data are not properly independently andide tically sampled from the \u201dtrue\u201d distribution. The leave-one-out procedure consists ofremoving one example from the training set, constructing the predictor on the basis only of the remaining traing data, then testing on the removed example. In this fashion one tests all examples of the trainingdata and averages the results. As previously mentioned, there exist exact or approximate formulas of the leave-one-out error for a number of learning machines (Monari and Dreyfus, 2000,Rivals and Personnaz, 2003, Rakotomamonjy, 2003).\nLeave-one-out formulas can be viewed as corrected values of the training error. Many other types of penalization of the training error have been proposed in the literatur (see, e.g., Vapnik, 1998, Hastie et al., 2001). Recently, a new family of such methods called \u201cmetric-based methods\u201d have been proposed (Schuurmans, 1997). The paper of Bengio andChapados (2003) in this issue\n13. In the limit, the test set can have only one example and leave-out-out can be carried out as an \u201couter loop\u201d, outside the feature/variable selection process, to estimate the final performance ofth predictor. This computationally expensive procedure is used in cases where data is extremely scarce.\nillustrates their application to variable selection. The authors make use of unlabelled data, which are readily available in the application considered, time series prediction with a horizon. Consider two modelsfA and fB trained with nested subsets of variablesA\u2282 B. We calld( fA, fB) the discrepancy of the two models. The criterion involves the ratiodU( fA, fB)/dT( fA, fB), wheredU( fA, fB) is computed with unlabelled data anddT( fA, fB) is computed with training data. A ratio significantly larger than one sheds doubt on the usefulness of the variables in subset B that are not inA.\nFor variable ranking or nested subset ranking methods (Sections 2 and 4.2), another statistical approach can be taken. The idea is to introduce a probe in the data thatis a random variable. Roughly speaking, variables that have a relevance smaller or equal to that f t e probe should be discarded. Bi et al. (2003) consider a very simple implementation of that idea: th y introduce in their data three additional \u201cfake variables\u201d drawn randomly from a Gaussi n distribution and submit them to their variable selection process with the other \u201ctrue variables\u201d. Subseq ently, they discard all the variables that are less relevant than one of the three fake variables ( ccording to their weight magnitude criterion). Stoppiglia et al. (2003) propose a more sophisticated method for the GramSchmidt forward selection method. For a Gaussian distributed probe, they provide an analytical formula to compute the rank of the probe associated with a given risk of accepting an irrelevant variable. A non-parametric variant of the probe method consists in creating\u201cfake variables\u201d by randomly shuffling real variable vectors. In a forward selection process, the introduction of fake variables does not disturb the selection because fake variables can be discarded when they are encountered. At a given step in the forward selection process, let us callft the fraction of true variables selected so far (among all true variables) andf f the fraction of fake variables encountered (among all fake variables). As a halting criterion one can place a threshold on the ra io f f / ft , which is an upper bound on the fraction of falsely relevant variables in the subset sel cted so far. The latter method has been used for variable ranking (Tusher et al., 2001). Its parametric version for Gaussian distributions using the T statistic as ranking criterion is nothing but the T-test."
        },
        {
            "heading": "7 Advanced Topics and Open Problems",
            "text": ""
        },
        {
            "heading": "7.1 Variance of Variable Subset Selection",
            "text": "Many methods of variable subset selection are sensitive to small perturbations of the experimental conditions. If the data has redundant variables, different subsets ofvariables with identical predictive power may be obtained according to initial conditions of the algorithm, removal or addition of a few variables or training examples, or addition of noise. For some applications, one might want to purposely generate alternative subsets that can be presented to a subsequent stage of processing. Still one might find this variance undesirable because (i) variance is often the symptom of a \u201cbad\u201d model that does not generalize well; (ii) results are not reproducible; and (iii) one subset fails to capture the \u201cwhole picture\u201d.\nOne method to \u201cstabilize\u201d variable selection explored in this issue is to use several \u201cbootstraps\u201d (Bi et al., 2003). The variable selection process is repeated with sub-samples of the training data. The union of the subsets of variables selected in the various bootstraps is taken as the final \u201cstable\u201d subset. This joint subset may be at least as predictive as the best bootstrap subset. Analyzing the behavior of the variables across the various bootstraps also provides further insight, as described in the paper. In particular, an index of relevance of individual variables can be created considering how frequently they appear in the bootstraps.\nRelated ideas have been described elsewhere in the context of Bayesianvariable selection (Jebara and Jaakkola, 2000, Ng and Jordan, 2001, Vehtari and Lampinen, 2002). A distribution over a population of models using various variable subsets is estimated. Variables are then ranked according to the marginal distribution, reflecting how often they appear in important subsets (i.e., associated with the most probable models)."
        },
        {
            "heading": "7.2 Variable Ranking in the Context of Others",
            "text": "In Section 2, we limited ourselves to presenting variable ranking methods usinga criterion computed from single variables, ignoring the context of others. In Section 4.2, we introduced nested subset methods that provide a useful ranking of subsets, not of individual variables: some variables may have a low rank because they are redundant and yet be highly relevant. Bootstrap and Bayesian methods presented in Section 7.1, may be instrumental in producing a good variable ranking incorporating the context of others.\nThe relief algorithm uses another approach based on the nearest-neighbor algorithm (Kira and Rendell, 1992). For each example, the closest example of the same class (ne rest hit) and the closest example of a different class (nearest miss) are selected. The scoreS(i) of theith variable is computed as the average over all examples of magnitude of the difference between the distance to the nearest hit and the distance to the nearest miss, in projection on theith variable."
        },
        {
            "heading": "7.3 Unsupervised Variable Selection",
            "text": "Sometimes, no targety is provided, but one still would want to select a set of most significant variables with respect to a defined criterion. Obviously, there are as manycriteria as problems can be stated. Still, a number of variable ranking criteria are useful across applications, including saliency, entropy, smoothness, densityandreliability. A variable is salient if it has a high variance or a large range, compared to others. A variable has a high entropy if the distribution of examples is uniform. In a time series, a variable is smooth if on average its local curvature is moderate. A variable is in a high-density region if it is highly correlated with many other variables. A variable is reliable if the measurement error bars computed by repeating measurements are small compared to the variability of the variable values (as quantified, e.g., by an ANOVA statistic).\nSeveral authors have also attempted to perform variable or feature selection for clustering applications (see, e.g., Xing and Karp, 2001, Ben-Hur and Guyon, 2003,and references therein).\n7.4 Forward vs. Backward Selection\nIt is often argued that forward selection is computationally more efficient thabackward elimination to generate nested subsets of variables. However, the defenders of backward elimination argue that weaker subsets are found by forward selection because the importanceof variables is not assessed in the context of other variables not included yet. We illustrate this latter argument by the example of Figure 4. In that example, one variable separates the two classes betterby i self than either of the two other ones taken alone and will therefore be selected first by forward selection. At the next step, when it is complemented by either of the two other variables, the resulting class separation in two dimensions will not be as good as the one obtained jointly by the two variables that were discarded at the first step. A backward selection method may outsmart forward selection by eliminating at the first step the variable that by itself provides the best separation to retainthe two variables that\ntogether perform best. Still, if for some reason we need to get down to a single variable, backward elimination will have gotten rid of the variable that works best on its own."
        },
        {
            "heading": "7.5 The Multi-class Problem",
            "text": "Some variable selection methods treat the multi-class case directly rather than decomposing it into several two-class problems: All the methods based on mutual information criteria extend naturally to the multi-class case (see in this issue Bekkerman et al., 2003, Dhillon et al., 2003, Torkkola, 2003). Multi-class variable ranking criteria include Fisher\u2019s criterion (theratio of the between class variance to the within-class variance). It is closely related to the F statistic used in the ANOVA test, which is one way of implementing the probe method (Section 6) for the multi-class case. Wrappers or embedded methods depend upon the capability of the classifier used to handle the multi-class case. Examples of such classifiers include linear discriminant analysis (LDA), a multi-class version of Fisher\u2019s linear discriminant (Duda et al., 2001), and multi-class SVMs (see, e.g., Weston et al., 2003).\nOne may wonder whether it is advantageous to use multi-class methods for variable selection. On one hand, contrary to what is generally admitted for classification, the multi-class setting is in some sense easier for variable selection than the two-class case. This is because the larger the\nnumber of classes, the less likely a \u201crandom\u201d set of features provide a good separation. To illustrate this point, consider a simple example where all features are drawn independently from the same distributionP and the first of them is the targety. Assume that all these features correspond to rolling a die withQ facesn times (n is the number of samples). The probability that one fixed feature (except the first one) is exactlyy is then(1/Q)n. Therefore, finding the feature that corresponds to the targety when it is embedded in a sea of noisy features is easier whenQ is large. On the other hand, Forman (2003) points out in this issue that in the case of uneven distribut ons across classes, multi-class methods may over-represent abundant or easily separable class s. A possible alternative is to mix ranked lists of several two-class problems. Weston et al. (2003) propose one such mixing strategy."
        },
        {
            "heading": "7.6 Selection of Examples",
            "text": "The dual problems of feature selection/construction are those of pattern sel ction/construction. The symmetry of the two problems is made explicit in the paper of Globerson and Tishby (2003) in this issue. Likewise, both Stoppiglia et al. (2003) and Weston et al. (2003)point out that their algorithm also applies to the selection of examples in kernel methods. Others hav already pointed out the similarity and complementarity of the two problems (Blum and Langley, 1997). In particular, mislabeled examples may induce the choice of wrong variables. Conversely,if the labeling is highly reliable, selecting wrong variables associated with a confounding factor may be voided by focusing on informative patterns that are close to the decision boundary (Guyon etal., 2002)."
        },
        {
            "heading": "7.7 Inverse Problems",
            "text": "Most of the special issue concentrates on the problem of finding a (small) subset of variables useful to build a good predictor. In some applications, particularly in bioinformatics, thi is not necessarily the only goal of variable selection. In diagnosis problems, for instance, itis important to identify the factors that triggered a particular disease or unravel the chain of events from the causes to the symptoms. But reverse engineering the system that produced the data isa more challenging task than building a predictor. The readers interested in these issues can consult the literature on gene networks in the conference proceedings of the pacific symposium on biocomputing (PSB) or intelligent systems for molecular biology conference (ISMB) and the causality inference literature (see, e.g., Pearl, 2000). At the heart of this problem is the distinction between correlation and causality. Observational data such as the data available to machine learning researchers allow us only to observe correlations. For example, observations can be made about correlations between expression profiles of given genes or between profiles and symptoms, but a leap of faith is made when deciding which gene activated which other one and in turn triggered the symptom.\nIn this issue, the paper of Caruana and de Sa (2003) presents interesting ideas about using variables discarded by variable selection as additional outputs of a neural twork. They show improved performance on synthetic and real data. Their analysis supports the idea that some variables are more efficiently used as outputs than as inputs. This could be a step toward distinguishing causes from consequences.\na. http://www.kyb.tuebingen.mpg.de/bs/people/weston/l0 (`0 not 10) b. http://www.clopinet.com/isabelle/Projects/NIPS2001/Artificial.zip c. http://nis-www.lanl.gov/\u223csimes/data/jmlr02/ d. http://www.rpi.edu/\u223cbij2/featsele.html e. http://www.ics.uci.edu/\u223cmlearn/MLRepository.html f . http://www.cis.hut.fi/research/software.shtml g. http://ida.first.gmd.de/\u223craetsch/data/benchmarks.htm h. http://www.nerg.aston.ac.uk/GTM/3PhaseData.html i. http://q.cis.uoguelph.ca/ skremer/NIPS2000/ j. http://kdd.ics.uci.edu/databases/20newsgroups/20newsgroups.html k. http://trec.nist.gov/data.html (Filtering Track Collection) l . http://www.cs.utk.edu/\u223clsi/ m. http://www.daviddlewis.com/resources/testcollections/reuters21578/ n. http://dmoz.org/ and http://www.cs.utexas.edu/users/manyam/dmoz.txt o. http://www.cs.technion.ac.il/\u223cronb/thesis.html"
        },
        {
            "heading": "8 Conclusion",
            "text": "The recent developments in variable and feature selection have addressed the problem from the pragmatic point of view of improving the performance of predictors. They have met the challenge of operating on input spaces of several thousand variables. Sophisticated wrapper or embedded methods improve predictor performance compared to simpler variable rankingmethods like correlation methods, but the improvements are not always significant: domains with large numbers of input variables suffer from the curse of dimensionality and multivariate methods may overfit the data. For some domains, applying first a method of automatic feature construction yields improved performance and a more compact set of features. The methods proposed in this special issue have been tested on a wide variety of data sets (see Table 1), which limits the possibilityof making comparisons across papers. Further work includes the organization of a benchmark. The approaches are very diverse and motivated by various theoretical arguments, but a unifying theoretical framework is lacking. Because of these shortcomings, it is important when starting with a new problem to have a few baseline performance values. To that end, we recommend using a linear predictor of your choice (e.g. a linear SVM) and select variables in two alternate ways: (1) with a variable ranking method using a correlation coefficient or mutual information; (2) with a nestedubset selection method performing forward or backward selection or with multiplicative updates. Further down the road, connections need to be made between the problems of variable andfeature selection and those of experimental design and active learning, in an effort to move away from observational data toward experimental data, and to address problems of causality inference."
        }
    ],
    "title": "An Introduction to Variable and Feature Selection",
    "year": 2004
}