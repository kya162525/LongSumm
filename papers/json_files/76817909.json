{
    "abstractText": "Allowing humans to interactively train artificial agents to understand language instructions is desirable for both practical and scientific reasons. Though, given the lack of sample efficiency in current learning methods, reaching this goal may require substantial research efforts. We introduce the BabyAI research platform, with the goal of supporting investigations towards including humans in the loop for grounded language learning. The BabyAI platform comprises an extensible suite of 19 levels of increasing difficulty. Each level gradually leads the agent towards acquiring a combinatorially rich synthetic language, which is a proper subset of English. The platform also provides a hand-crafted bot agent, which simulates a human teacher. We report estimated amount of supervision required for training neural reinforcement and behavioral-cloning agents on some BabyAI levels. We put forward strong evidence that current deep learning methods are not yet sufficiently sample-efficient in the context of learning a language with compositional properties.",
    "authors": [
        {
            "affiliations": [],
            "name": "Maxime Chevalier-Boisvert"
        },
        {
            "affiliations": [],
            "name": "Dzmitry Bahdanau"
        },
        {
            "affiliations": [],
            "name": "Thien Huu Nguyen"
        }
    ],
    "id": "SP:24dcf8b968246c712840d1ab46d898d84a922f80",
    "references": [
        {
            "authors": [
                "Hengel",
                "A. v. d"
            ],
            "title": "Vision-and-Language Navigation: Interpreting visually-grounded",
            "year": 2018
        },
        {
            "authors": [
                "J. Andreas",
                "M. Rohrbach",
                "T. Darrell",
                "D. Klein"
            ],
            "title": "Neural Module Networks",
            "venue": "Proceedings of 2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR).",
            "year": 2016
        },
        {
            "authors": [
                "Y. Artzi",
                "L. Zettlemoyer"
            ],
            "title": "Weakly supervised learning of semantic parsers for mapping instructions to actions",
            "venue": "Transactions of the Association for Computational Linguistics, 1:49\u201362.",
            "year": 2013
        },
        {
            "authors": [
                "D. Bahdanau",
                "K. Cho",
                "Y. Bengio"
            ],
            "title": "Neural Machine Translation by Jointly Learning to Align and Translate",
            "venue": "Proceedings of the 2015 International Conference on Learning Representations.",
            "year": 2015
        },
        {
            "authors": [
                "D. Bahdanau",
                "F. Hill",
                "J. Leike",
                "E. Hughes",
                "A. Hosseini",
                "P. Kohli",
                "E. Grefenstette"
            ],
            "title": "Learning to Understand Goal Specifications by Modelling Reward",
            "venue": "ICLR.",
            "year": 2018
        },
        {
            "authors": [
                "M.G. Bellemare",
                "Y. Naddaf",
                "J. Veness",
                "M. Bowling"
            ],
            "title": "The Arcade Learning Environment: An Evaluation Platform for General Agents",
            "venue": "Journal of Artificial Intelligence Research, 47:253\u2013279. arXiv: 1207.4708.",
            "year": 2013
        },
        {
            "authors": [
                "Y. Bengio",
                "J. Louradour",
                "R. Collobert",
                "J. Weston"
            ],
            "title": "Curriculum learning",
            "venue": "Proceedings of the 26th annual international conference on machine learning, pages 41\u201348.",
            "year": 2009
        },
        {
            "authors": [
                "D.S. Chaplot",
                "K.M. Sathyendra",
                "R.K. Pasumarthi",
                "D. Rajagopal",
                "R. Salakhutdinov"
            ],
            "title": "Gated-Attention Architectures for Task-Oriented Language Grounding",
            "venue": "Proceedings of 32nd AAAI Conference on Artificial Intelligence.",
            "year": 2018
        },
        {
            "authors": [
                "D.L. Chen",
                "R.J. Mooney"
            ],
            "title": "Learning to Interpret Natural Language Navigation Instructions from Observations",
            "venue": "Proceedings of the Twenty-Fifth AAAI Conference on Artificial Intelligence, pages 859\u2013865.",
            "year": 2011
        },
        {
            "authors": [
                "K. Cho",
                "B. van Merrienboer",
                "C. Gulcehre",
                "F. Bougares",
                "H. Schwenk",
                "Y. Bengio"
            ],
            "title": "Learning Phrase Representations using RNN Encoder-Decoder for Statistical Machine Translation",
            "venue": "In Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP)",
            "year": 2014
        },
        {
            "authors": [
                "P. Christiano",
                "J. Leike",
                "T.B. Brown",
                "M. Martic",
                "S. Legg",
                "D. Amodei"
            ],
            "title": "Deep reinforcement learning from human preferences",
            "venue": "Advances in Neural Information Processing Systems",
            "year": 2017
        },
        {
            "authors": [
                "H. Daum\u00e9 Iii",
                "J. Langford",
                "D. Marcu"
            ],
            "title": "Search-based structured prediction",
            "venue": "Machine learning, 75(3):297\u2013325.",
            "year": 2009
        },
        {
            "authors": [
                "L. Espeholt",
                "H. Soyer",
                "R. Munos",
                "K. Simonyan",
                "V. Mnih",
                "T. Ward",
                "Y. Doron",
                "V. Firoiu",
                "T. Harley",
                "I. Dunning",
                "S. Legg",
                "K. Kavukcuoglu"
            ],
            "title": "IMPALA: Scalable Distributed Deep-RL with Importance Weighted Actor-Learner Architectures",
            "venue": "Proceedings of the 22nd international conference on Machine learning. arXiv: 1802.01561.",
            "year": 2018
        },
        {
            "authors": [
                "A. Graves",
                "G. Wayne",
                "M. Reynolds",
                "T. Harley",
                "I. Danihelka",
                "A. Grabska-Barwi\u0144ska",
                "S.G. Colmenarejo",
                "E. Grefenstette",
                "T. Ramalho",
                "J. Agapiou",
                "A.P. Badia",
                "K.M. Hermann",
                "Y. Zwols",
                "G. Ostrovski",
                "A. Cain",
                "H. King",
                "C. Summerfield",
                "P. Blunsom",
                "K. Kavukcuoglu",
                "D. Hassabis"
            ],
            "title": "Hybrid computing using a neural network with dynamic external memory",
            "venue": "Nature, 538(7626):471\u2013476.",
            "year": 2016
        },
        {
            "authors": [
                "K.M. Hermann",
                "F. Hill",
                "S. Green",
                "F. Wang",
                "R. Faulkner",
                "H. Soyer",
                "D. Szepesvari",
                "W.M. Czarnecki",
                "M. Jaderberg",
                "D. Teplyashin",
                "M. Wainwright",
                "C. Apps",
                "D. Hassabis",
                "P. Blunsom"
            ],
            "title": "Grounded Language Learning in a Simulated 3d World",
            "venue": "arXiv:1706.06551 [cs, stat].",
            "year": 2017
        },
        {
            "authors": [
                "S. Hochreiter",
                "J. Schmidhuber"
            ],
            "title": "Long Short-Term Memory",
            "venue": "Neural Computation, 9(8):1735\u20131780.",
            "year": 1997
        },
        {
            "authors": [
                "S. Ioffe",
                "C. Szegedy"
            ],
            "title": "Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift",
            "venue": "Proceedings of the 32nd International Conference on Machine Learning, ICML 2015, Lille, France, 6-11 July 2015, pages 448\u2013456.",
            "year": 2015
        },
        {
            "authors": [
                "M. Kempka",
                "M. Wydmuch",
                "G. Runc",
                "J. Toczek",
                "W. Jaskowski"
            ],
            "title": "ViZDoom: A Doombased AI research platform for visual reinforcement learning",
            "venue": "CIG, pages 1\u20138. IEEE.",
            "year": 2016
        },
        {
            "authors": [
                "D.P. Kingma",
                "J. Ba"
            ],
            "title": "Adam: A Method for Stochastic Optimization",
            "venue": "Proceedings of the 2015 International Conference on Learning Representations. arXiv: 1412.6980.",
            "year": 2015
        },
        {
            "authors": [
                "N. Koenig",
                "A. Howard"
            ],
            "title": "Design and Use Paradigms for Gazebo, An Open-Source MultiRobot Simulator",
            "venue": "IEEE/RSJ International Conference on Intelligent Robots and Systems, pages 2149\u20132154, Sendai, Japan.",
            "year": 2004
        },
        {
            "authors": [
                "E. Kolve",
                "R. Mottaghi",
                "D. Gordon",
                "Y. Zhu",
                "A. Gupta",
                "A. Farhadi"
            ],
            "title": "AI2-THOR: An Interactive 3d Environment for Visual AI",
            "venue": "CoRR, abs/1712.05474.",
            "year": 2017
        },
        {
            "authors": [
                "M.P. Kumar",
                "B. Packer",
                "D. Koller"
            ],
            "title": "Self-Paced Learning for Latent Variable Models",
            "venue": "Advances in Neural Information Processing Systems 23, pages 1189\u20131197. Curran Associates, Inc.",
            "year": 2010
        },
        {
            "authors": [
                "M. Macmahon",
                "B. Stankiewicz",
                "B. Kuipers"
            ],
            "title": "Walk the Talk: Connecting Language, Knowledge, Action in Route Instructions",
            "venue": "In Proc. of the Nat. Conf. on Artificial Intelligence (AAAI, pages 1475\u20131482.",
            "year": 2006
        },
        {
            "authors": [
                "H. Mei",
                "M. Bansal",
                "M.R. Walter"
            ],
            "title": "Listen, Attend, and Walk: Neural Mapping of Navigational Instructions to Action Sequences",
            "venue": "Proceedings of the 2016 AAAI Conference on Artificial Intelligence.",
            "year": 2016
        },
        {
            "authors": [
                "F. Pedregosa",
                "G. Varoquaux",
                "A. Gramfort",
                "V. Michel",
                "B. Thirion",
                "O. Grisel",
                "M. Blondel",
                "P. Prettenhofer",
                "R. Weiss",
                "V. Dubourg",
                "J. Vanderplas",
                "A. Passos",
                "D. Cournapeau",
                "M. Brucher",
                "M. Perrot",
                "E. Duchesnay"
            ],
            "title": "Scikit-learn: machine learning in Python",
            "venue": "Journal of Machine Learning Research, 12:2825\u20132830.",
            "year": 2011
        },
        {
            "authors": [
                "E. Perez",
                "F. Strub",
                "H. de Vries",
                "V. Dumoulin",
                "A. Courville"
            ],
            "title": "FiLM: Visual Reasoning with a General Conditioning Layer",
            "venue": "Proceedings of the 2017 AAAI Conference on Artificial Intelligence",
            "year": 2017
        },
        {
            "authors": [
                "C.E. Rasmussen",
                "C.K.I. Williams"
            ],
            "title": "Gaussian Processes for Machine Learning (Adaptive Computation and Machine Learning)",
            "year": 2005
        },
        {
            "authors": [
                "S. Reed",
                "N. de Freitas"
            ],
            "title": "Neural Programmer-Interpreters",
            "venue": "2016 International Conference on Learning Representations. arXiv: 1511.06279.",
            "year": 2015
        },
        {
            "authors": [
                "S. Ross",
                "G. Gordon",
                "D. Bagnell"
            ],
            "title": "A Reduction of Imitation Learning and Structured Prediction to No-Regret Online Learning",
            "venue": "PMLR, pages 627\u2013635.",
            "year": 2011
        },
        {
            "authors": [
                "J. Schulman",
                "P. Moritz",
                "S. Levine",
                "M. Jordan",
                "P. Abbeel"
            ],
            "title": "High-Dimensional Continuous Control Using Generalized Advantage Estimation",
            "venue": "Advances in Neural Information Processing Systems 30.",
            "year": 2015
        },
        {
            "authors": [
                "J. Schulman",
                "F. Wolski",
                "P. Dhariwal",
                "A. Radford",
                "O. Klimov"
            ],
            "title": "Proximal Policy Optimization Algorithms",
            "venue": "arXiv:1707.06347 [cs]. arXiv: 1707.06347.",
            "year": 2017
        },
        {
            "authors": [
                "S. Sukhbaatar",
                "A. Szlam",
                "G. Synnaeve",
                "S. Chintala",
                "R. Fergus"
            ],
            "title": "MazeBase: A Sandbox for Learning from Games",
            "venue": "arXiv:1511.07401 [cs]. arXiv: 1511.07401.",
            "year": 2015
        },
        {
            "authors": [
                "I. Sutskever",
                "O. Vinyals",
                "Q.V. Le"
            ],
            "title": "Sequence to Sequence Learning with Neural Networks",
            "venue": "Advances in Neural Information Processing Systems 27, pages 3104\u20133112.",
            "year": 2014
        },
        {
            "authors": [
                "S. Tellex",
                "T. Kollar",
                "S. Dickerson",
                "M.R. Walter",
                "A.G. Banerjee",
                "S. Teller",
                "N. Roy"
            ],
            "title": "Understanding Natural Language Commands for Robotic Navigation and Mobile Manipulation",
            "venue": "Twenty-Fifth AAAI Conference on Artificial Intelligence.",
            "year": 2011
        },
        {
            "authors": [
                "S.I. Wang",
                "P. Liang",
                "C.D. Manning"
            ],
            "title": "Learning Language Games through Interaction",
            "venue": "Proceedings Of the 54th Annual Meeting of the Association for Computational Linguistics. arXiv: 1606.02447.",
            "year": 2016
        },
        {
            "authors": [
                "G. Warnell",
                "N. Waytowich",
                "V. Lawhern",
                "P. Stone"
            ],
            "title": "Deep TAMER: Interactive Agent Shaping in High-Dimensional State Spaces",
            "venue": "Proceedings of 32nd AAAI Conference on Artificial Intelligence. arXiv: 1709.10163.",
            "year": 2017
        },
        {
            "authors": [
                "J. Weston",
                "A. Bordes",
                "S. Chopra",
                "A.M. Rush",
                "B. van Merri\u00ebnboer",
                "A. Joulin",
                "T. Mikolov"
            ],
            "title": "Towards AI-Complete Question Answering: A Set of Prerequisite Toy Tasks",
            "year": 2016
        },
        {
            "authors": [
                "E.C. Williams",
                "N. Gopalan",
                "M. Rhee",
                "S. Tellex"
            ],
            "title": "Learning to Parse Natural Language to Grounded Reward Functions with Weak Supervision",
            "venue": "2018 IEEE International Conference on Robotics and Automation, ICRA 2018, Brisbane, Australia, May 21-25, 2018, pages 1\u20137.",
            "year": 2018
        },
        {
            "authors": [
                "A. Wilson",
                "A. Fern",
                "P. Tadepalli"
            ],
            "title": "A Bayesian Approach for Policy Learning from Trajectory Preference Queries",
            "venue": "Pereira, F., Burges, C. J. C., Bottou, L., and Weinberger, K. Q., editors, Advances in Neural Information Processing Systems 25, pages 1133\u20131141. Curran Associates, Inc.",
            "year": 2012
        },
        {
            "authors": [
                "Y. Wu",
                "M. Schuster",
                "Z. Chen",
                "Q.V. Le",
                "M. Norouzi",
                "W. Macherey",
                "M. Krikun",
                "Y. Cao",
                "Q. Gao",
                "K. Macherey"
            ],
            "title": "Google\u2019s Neural Machine Translation System: Bridging the Gap between Human and Machine Translation",
            "venue": "arXiv preprint arXiv:1609.08144",
            "year": 2016
        },
        {
            "authors": [
                "Y. Wu",
                "Y. Wu",
                "G. Gkioxari",
                "Y. Tian"
            ],
            "title": "Building Generalizable Agents with a Realistic and Rich 3d Environment",
            "venue": "arXiv:1801.02209 [cs]. arXiv: 1801.02209.",
            "year": 2018
        },
        {
            "authors": [
                "H. Yu",
                "H. Zhang",
                "W. Xu"
            ],
            "title": "Interactive Grounded Language Acquisition and Generalization in 2d Environment",
            "venue": "ICLR.",
            "year": 2018
        },
        {
            "authors": [
                "W. Zaremba",
                "I. Sutskever"
            ],
            "title": "Learning to Execute",
            "venue": "2015 International Conference on Learning Representations. arXiv: 1410.4615.",
            "year": 2015
        },
        {
            "authors": [
                "B.D. Ziebart",
                "A. Maas",
                "J.A. Bagnell",
                "A.K. Dey"
            ],
            "title": "Maximum Entropy Inverse Reinforcement Learning",
            "venue": "Proc. AAAI, pages 1433\u20131438.",
            "year": 2008
        }
    ],
    "sections": [
        {
            "heading": "1 INTRODUCTION",
            "text": "How can a human train an intelligent agent to understand natural language instructions? We believe that this research question is important from both technological and scientific perspectives. No matter how advanced AI technology becomes, human users will likely want to customize their intelligent helpers to better understand their desires and needs. On the other hand, developmental psychology, cognitive science and linguistics study similar questions but applied to human children, and a synergy is possible between research in grounded language learning by computers and research in human language acquisition.\nIn this work, we present the BabyAI research platform, whose purpose is to facilitate research on grounded language learning. In our platform we substitute a simulated human expert for a real human; yet our aspiration is that BabyAI-based studies enable substantial progress towards putting an actual human in the loop. The current domain of BabyAI is a 2D gridworld in which synthetic natural-looking instructions (e.g. \u201cput the red ball next to the box on your left\u201d) require the agent to navigate the world (including unlocking doors) and move objects to specified locations. BabyAI improves upon similar prior setups (Hermann et al., 2017; Chaplot et al., 2018; Yu et al., 2018) by supporting simulation of certain essential aspects of the future human in the loop agent training: \u2217Equal contribution. \u2020Work done during an internship at Mila. \u2021Work done during a post-doc at Mila.\nar X\niv :1\n81 0.\n08 27\n2v 4\n[ cs\n.A I]\n1 9\ncurriculum learning and interactive teaching. The usefulness of curriculum learning for training machine learning models has been demonstrated numerous times in the literature (Bengio et al., 2009; Kumar et al., 2010; Zaremba and Sutskever, 2015; Graves et al., 2016), and we believe that gradually increasing the difficulty of the task will likely be essential for achieving efficient humanmachine teaching, as in the case of human-human teaching. To facilitate curriculum learning studies, BabyAI currently features 19 levels in which the difficulty of the environment configuration and the complexity of the instruction language are gradually increased. Interactive teaching, i.e. teaching differently based on what the learner can currently achieve, is another key capability of human teachers. Many advanced agent training methods, including DAGGER (Ross et al., 2011), TAMER (Warnell et al., 2017) and learning from human preferences (Wilson et al., 2012; Christiano et al., 2017), assume that interaction between the learner and the teacher is possible. To support interactive experiments, BabyAI provides a bot agent that can be used to generate new demonstrations on the fly and advise the learner on how to continue acting.\nArguably, the main obstacle to language learning with a human in the loop is the amount of data (and thus human-machine interactions) that would be required. Deep learning methods that are used in the context of imitation learning or reinforcement learning paradigms have been shown to be very effective in both simulated language learning settings (Mei et al., 2016; Hermann et al., 2017) and applications (Sutskever et al., 2014; Bahdanau et al., 2015; Wu et al., 2016). These methods, however, require enormous amounts of data, either in terms of millions of reward function queries or hundreds of thousands of demonstrations. To show how our BabyAI platform can be used for sample efficiency research, we perform several case studies. In particular, we estimate the number of demonstrations/episodes required to solve several levels with imitation and reinforcement learning baselines. As a first step towards improving sample efficiency, we additionally investigate to which extent pretraining and interactive imitation learning can improve sample efficiency.\nThe concrete contributions of this paper are two-fold. First, we contribute the BabyAI research platform for learning to perform language instructions with a simulated human in the loop. The platform already contains 19 levels and can easily be extended. Second, we establish baseline results for all levels and report sample efficiency results for a number of learning approaches. The platform and pretrained models are available online. We hope that BabyAI will spur further research towards improving sample efficiency of grounded language learning, ultimately allowing human-in-the-loop training."
        },
        {
            "heading": "2 RELATED WORK",
            "text": "There are numerous 2D and 3D environments for studying synthetic language acquistion. (Hermann et al., 2017; Chaplot et al., 2018; Yu et al., 2018; Wu et al., 2018). Inspired by these efforts, BabyAI augments them by uniquely combining three desirable features. First, BabyAI supports world state manipulation, missing in the visually appealing 3D environments of Hermann et al. (2017), Chaplot et al. (2018) and Wu et al. (2018). In these environments, an agent can navigate around, but cannot alter its state by, for instance, moving objects. Secondly, BabyAI introduces partial observability (unlike the gridworld of Bahdanau et al. (2018)). Thirdly, BabyAI provides a systematic definition of the synthetic language. As opposed to using instruction templates, the Baby Language we introduce defines the semantics of all utterances generated by a context-free grammar (Section 3.2). This makes our language richer and more complete than prior work. Most importantly, BabyAI provides a simulated human expert, which can be used to investigate human-in-the-loop training, the aspiration of this paper.\nCurrently, most general-purpose simulation frameworks do not feature language, such as PycoLab (DeepMind, 2017), MazeBase (Sukhbaatar et al., 2015), Gazebo (Koenig and Howard, 2004), VizDoom (Kempka et al., 2016), DM-30 (Espeholt et al., 2018), and AI2-Thor (Kolve et al., 2017). Using a more realistic simulated environment such as a 3D rather than 2D world comes at a high computational cost. Therefore, BabyAI uses a gridworld rather than 3D environments. As we found that available gridworld platforms were insufficient for defining a compositional language, we built a MiniGrid environment for BabyAI.\nGeneral-purpose RL testbeds such as the Arcade Learning Environment (Bellemare et al., 2013), DM-30 (Espeholt et al., 2018), and MazeBase (Sukhbaatar et al., 2015) do not assume a humanin-the-loop setting. In order to simulate this, we have to assume that all rewards (except intrinsic\nrewards) would have to be given by a human, and are therefore rather expensive to get. Under this assumption, imitation learning methods such as behavioral cloning, Searn (Daum\u00e9 Iii et al., 2009), DAGGER (Ross et al., 2011) or maximum-entropy RL (Ziebart et al., 2008) are more appealing, as more learning can be achieved per human-input unit.\nSimilar to BabyAI, studying sample efficiency of deep learning methods was a goal of the bAbI tasks (Weston et al., 2016), which tested reasoning capabilities of a learning agent. Our work differs in both of the object of the study (grounded language with a simulated human in the loop) and in the method: instead of generating a fixed-size dataset and measuring the performance, we measure how much data a general-purpose model would require to get close-to-perfect performance.\nThere has been much research on instruction following with natural language (Tellex et al., 2011; Chen and Mooney, 2011; Artzi and Zettlemoyer, 2013; Mei et al., 2016; Williams et al., 2018) as well as several datasets including SAIL (Macmahon et al., 2006; Chen and Mooney, 2011) and Room-to-Room (Anderson et al., 2018). Instead of using natural language, BabyAI utilises a synthetic Baby language, in order to fully control the semantics of an instruction and easily generate as much data as needed.\nFinally, Wang et al. (2016) presented a system that interactively learned language from a human. We note that their system relied on substantial amounts of prior knowledge about the task, most importantly a task-specific executable formal language."
        },
        {
            "heading": "3 BABYAI PLATFORM",
            "text": "The BabyAI platform that we present in this work comprises an efficiently simulated gridworld environment (MiniGrid) and a number of instruction-following tasks that we call levels, all formulated using subsets of a synthetic language (Baby Language). The platform also includes a bot that can generate successful demonstrations for all BabyAI levels. All the code is available online at https://github.com/mila-iqia/babyai/tree/iclr19."
        },
        {
            "heading": "3.1 MINIGRID ENVIRONMENT",
            "text": "Studies of sample efficiency are very computationally expensive given that multiple runs are required for different amounts of data. Hence, in our design of the environment, we have aimed for a minimalistic and efficient environment which still poses a considerable challenge for current general-purpose agent learning methods. We have implemented MiniGrid, a partially observable 2D gridworld environment. The environment is populated with entities of different colors, such as the agent, balls, boxes, doors and keys (see Figure 1). Objects can be picked up, dropped and moved around by the agent. Doors can be unlocked with keys matching their color. At each step, the agent receives a 7x7 representation of its field of view (the grid cells in front of it) as well as a Baby Language instruction (textual string).\nThe MiniGrid environment is fast and lightweight. Throughput of over 3000 frames per second is possible on a modern multi-core laptop, which makes experimentation quicker and more accessible. The environment is open source, available online, and supports integration with OpenAI Gym. For more details, see Appendix B."
        },
        {
            "heading": "3.2 BABY LANGUAGE",
            "text": "We have developed a synthetic Baby Language to give instructions to the agent as well as to automatically verify their execution. Although Baby Language utterances are a comparatively small subset of English, they are combinatorially rich and unambigously understood by humans. The language is intentionally kept simple, but still exhibits interesting combinatorial properties, and contains 2.48\u00d7 1019 possible instructions. In this language, the agent can be instructed to go to objects, pick up objects, open doors, and put objects next to other objects. The language also expresses the conjunction of several such tasks, for example \u201cput a red ball next to the green box after you open the door\". The Backus-Naur Form (BNF) grammar for the language is presented in Figure 2 and some example instructions drawn from this language are shown in Figure 3. In order to keep the resulting instructions readable by humans, we have imposed some structural restrictions on this language: the and connector can only appear inside the then and after forms, and instructions can contain no more than one then or after word.\nThe BabyAI platform includes a verifier which checks if an agent\u2019s sequence of actions successfully achieves the goal of a given instruction within an environment. Descriptors in the language refer to one or to multiple objects. For instance, if an agent is instructed to \"go to a red door\", it can successfully execute this instruction by going to any of the red doors in the environment. The then and after connectors can be used to sequence subgoals. The and form implies that both subgoals must be completed, without ordering constraints. Importantly, Baby Language instructions leave\ndetails about the execution implicit. An agent may have to find a key and unlock a door, or move obstacles out of the way to complete instructions, without this being stated explicitly."
        },
        {
            "heading": "3.3 BABYAI LEVELS",
            "text": "There is abundant evidence in prior literature which shows that a curriculum may greatly facilitate learning of complex tasks for neural architectures (Bengio et al., 2009; Kumar et al., 2010; Zaremba and Sutskever, 2015; Graves et al., 2016). To investigate how a curriculum improves sample efficiency, we created 19 levels which require understanding only a limited subset of Baby Language within environments of varying complexity. Formally, a level is a distribution of missions, where a mission combines an instruction within an initial environment state. We built levels by selecting competencies necessary for each level and implementing a generator to generate missions solvable by an agent possessing only these competencies. Each competency is informally defined by specifying what an agent should be able to do:\n\u2022 Room Navigation (ROOM): navigate a 6x6 room. \u2022 Ignoring Distracting Boxes (DISTR-BOX): navigate the environment even when there\nare multiple distracting grey box objects in it.\n\u2022 Ignoring Distractors (DISTR): same as DISTR-BOX, but distractor objects can be boxes, keys or balls of any color.\n\u2022 Maze Navigation (MAZE): navigate a 3x3 maze of 6x6 rooms, randomly inter-connected by doors.\n\u2022 Unblocking the Way (UNBLOCK): navigate the environment even when it requires moving objects out of the way.\n\u2022 Unlocking Doors (UNLOCK): to be able to find the key and unlock the door if the instruction requires this explicitly.\n\u2022 Guessing to Unlock Doors (IMP-UNLOCK): to solve levels that require unlocking a door, even if this is not explicitly stated in the instruction.\n\u2022 Go To Instructions (GOTO): understand \u201cgo to\u201d instructions, e.g. \u201cgo to the red ball\u201d. \u2022 Open Instructions (OPEN): understand \u201copen\u201d instructions, e.g. \u201copen the door on your\nleft\u201d.\n\u2022 Pickup Instructions (PICKUP): understand \u201cpick up\u201d instructions, e.g. \u201cpick up a box\u201d. \u2022 Put Instructions (PUT): understand \u201cput\u201d instructions, e.g. \u201cput a ball next to the blue\nkey\u201d.\n\u2022 Location Language (LOC): understand instructions where objects are referred to by relative location as well as their shape and color, e.g. \u201cgo to the red ball in front of you\u201d.\n\u2022 Sequences of Commands (SEQ): understand composite instructions requiring an agent to execute a sequence of instruction clauses, e.g. \u201cput red ball next to the green box after you open the door\u201d.\nTable 1 lists all current BabyAI levels together with the competencies required to solve them. These levels form a progression in terms of the competencies required to solve them, culminating with\nthe BossLevel, which requires mastering all competencies. The definitions of competencies are informal and should be understood in the minimalistic sense, i.e. to test the ROOM competency we have built the GoToObj level where the agent needs to reach the only object in an empty room. Note that the GoToObj level does not require the GOTO competency, as this level can be solved without any language understanding, since there is only a single object in the room. However, solving the GoToLocal level, which instructs the agent to go to a specific object in the presence of multiple distractors, requires understanding GOTO instructions."
        },
        {
            "heading": "3.4 THE BOT AGENT",
            "text": "The bot is a key ingredient intended to perform the role of a simulated human teacher. For any of the BabyAI levels, it can generate demonstrations or suggest actions for a given environment state. Whereas the BabyAI learner is meant to be generic and should scale to new and more complex tasks, the bot is engineered using knowledge of the tasks. This makes sense since the bot stands for the human in the loop, who is supposed to understand the environment, how to solve missions, and how to teach the baby learner. The bot has direct access to a tree representation of instructions, and so does not need to parse the Baby Language. Internally, it executes a stack machine in which instructions and subgoals are represented (more details can be found in Appendix C). The stackbased design allows the bot to interrupt what it is currently doing to achieve a new subgoal, and then resume the original task. For example, going to a given object will require exploring the environment to find that object.\nThe subgoals which the bot implements are:\n\u2022 Open: Open a door that is in front of the agent. \u2022 Close: Close a door that is in front of the agent. \u2022 Pickup: Execute the pickup action (pick up an object). \u2022 Drop: Execute the drop action (drop an object being carried). \u2022 GoNextTo: Go next to an object matching a given (type, color) description or next to a cell\nat a given position.\n\u2022 Explore: Uncover previously unseen parts of the environment.\nAll of the Baby Language instructions are decomposed into these internal subgoals which the bot knows how to solve. Many of these subgoals, during their execution, can also push new subgoals on the stack. A central part of the design of the bot is that it keeps track of the grid cells of the environment which it has and has not seen. This is crucial to ensure that the bot can only use information which it could realistically have access to by exploring the environment. Exploration is implemented as part of the Explore subgoal, which is recursive. For instance, exploring the environment may require opening doors, or moving objects that are in the way. Opening locked doors may in turn require finding a key, which may itself require exploration and moving obstructing objects. Another key component of the bot\u2019s design is a shortest path search routine. This is used to navigate to objects, to locate the closest door, or to navigate to the closest unexplored cell."
        },
        {
            "heading": "4 EXPERIMENTS",
            "text": "We assess the difficulty of BabyAI levels by training a behavioral cloning baseline for each level. Furthermore, we estimate how much data is required to solve some of the simpler levels and study to which extent the data demands can be reduced by using basic curriculum learning and interactive teaching methods. All the code that we use for the experiments, as well as containerized pretrained models, is available online."
        },
        {
            "heading": "4.1 SETUP",
            "text": "The BabyAI platform provides by default a 7x7x3 symbolic observation xt (a partial and local egocentric view of the state of the environment) and a variable length instruction c as inputs at each time step. We use a basic model consisting of standard components to predict the next action a based on x and c. In particular, we use a GRU (Cho et al., 2014) to encode the instruction and a convolutional network with two batch-normalized (Ioffe and Szegedy, 2015) FiLM (Perez et al., 2017) layers to jointly process the observation and the instruction. An LSTM (Hochreiter and Schmidhuber, 1997) memory is used to integrate representations produced by the FiLM module at each step. Our model is thus similar to the gated-attention model used by Chaplot et al. (2018), inasmuch as gated attention is equivalent to using FiLM without biases and only at the output layer.\nWe have used two versions of our model, to which we will refer as the Large model and the Small model. In the Large model, the memory LSTM has 2048 units and the instruction GRU is bidirectional and has 256 units. Furthermore, an attention mechanism (Bahdanau et al., 2015) is used to focus on the relevant states of the GRU. The Small model uses a smaller memory of 128 units and encodes the instruction with a unidirectional GRU and no attention mechanism.\nIn all our experiments, we used the Adam optimizer (Kingma and Ba, 2015) with the hyperparameters \u03b1 = 10\u22124, \u03b21 = 0.9, \u03b22 = 0.999 and = 10\u22125. In our imitation learning (IL) experiments, we truncated the backpropagation through time at 20 steps for the Small model and at 80 steps for the Large model. For our reinforcement learning experiments, we used the Proximal Policy Optimization (PPO, Schulman et al., 2017) algorithm with parallelized data collection. Namely, we performed 4 epochs of PPO using 64 rollouts of length 40 collected with multiple processes. We gave a non-zero reward to the agent only when it fully completed the mission, and the magnitude of the reward was 1 \u2212 0.9n/nmax, where n is the length of the successful episode and nmax is the maximum number of steps that we allowed for completing the episode, different for each mission. The future returns were discounted with a factor \u03b3 = 0.99. For generalized advantage estimation (Schulman et al., 2015) in PPO we used \u03bb = 0.99.\nIn all our experiments we reported the success rate, defined as the ratio of missions of the level that the agent was able to accomplish within nmax steps.\nRunning the experiments outlined in this section required between 20 and 50 GPUs over two weeks. At least as much computing was required for preliminary investigations."
        },
        {
            "heading": "4.2 BASELINE RESULTS",
            "text": "To obtain baseline results for all BabyAI levels, we have trained the Large model (see Section 4.1) with imitation learning using one million demonstration episodes for each level. The demonstrations were generated using the bot described in Section 3.4. The models were trained for 40 epochs on levels with a single room and for 20 epochs on levels with a 3x3 maze of rooms. Table 2 reports the maximum success rate on a validation set of 512 episodes. All of the single-room levels are solved with a success rate of 100.0%. As a general rule, levels for which demonstrations are longer tend to be more difficult to solve.\nUsing 1M demonstrations for levels as simple as GoToRedBall is very inefficient and hardly ever compatible with the long-term goal of enabling human teaching. The BabyAI platform is meant to support studies of how neural agents can learn with less data. To bootstrap such studies, we have computed baseline sample efficiencies for imitation learning and reinforcement learning approaches to solving BabyAI levels. We say an agent solves a level if it reaches a success rate of at least 99%. We define the sample efficiency as the minimum number of demonstrations or RL episodes required to train an agent to solve a given level. To estimate the thus defined sample efficiency for imitation learning while staying within a reasonable computing budget, we adopt the following procedure. For a given level, we first run three experiments with 106 demonstrations. In the remaining M experiments we use k1 = 2l0 , k2 = 2l0+d, . . . , kM = 2l0+(M\u22121)d demonstrations respectively. We use different values of l0, M for each level to ensure that we run experiments with not enough, just enough and more than enough demonstrations. Same value of d = 0.2 is used in all imitation learning experiments. For each experiment i, we measure the best smoothed online validation performance si that is achieved during the first 2T training steps, where T = (T1 + T2 + T3)/3 is the average number of training steps required to solve the level in the three runs with 106 demonstrations. We then fit a Gaussian Process (GP) model (Rasmussen and Williams, 2005) with noisy observations using (ki, si) as training data in order to interpolate between these data points. The GP posterior is fully tractable, which allows us to compute analytically the posterior distribution of the expected success rate, as well as the posterior over the minimum number of samples kmin that is sufficient to solve the level. We report the 99% credible interval for kmin. We refer the reader to Appendix A for a more detailed explanation of this procedure.\nWe estimate sample efficiency of imitation learning on 6 chosen levels. The results are shown in Table 3 (see \u201cIL from Bot\u201d column). In the same table (column \u201cRL\u201d) we report the 99% confidence\ninterval for the number of episodes that were required to solve each of these levels with RL, and as expected, the sample efficiency of RL is substantially worse than that of IL (anywhere between 2 to 10 times in these experiments).\nTo analyze how much the sample efficiency of IL depends on the source of demonstrations, we try generating demonstrations from agents that were trained with RL in the previous experiments. The results for the 3 easiest levels are reported in the \u201cIL from RL Expert\u201d column in Table 5. Interestingly, we found that the demonstrations produced by the RL agent are easier for the learner to imitate. The difference is most significant for GoToRedBallGrey, where less than 2K and more than 8K RL and bot demonstrations respectively are required to solve the level. For GoToRedBall and GoToLocal, using RL demonstrations results in 1.5-2 times better sample efficiency. This can be explained by the fact that the RL expert has the same neural network architecture as the learner."
        },
        {
            "heading": "4.3 CURRICULUM LEARNING",
            "text": "To demonstrate how curriculum learning research can be done using the BabyAI platform, we perform a number of basic pretraining experiments. In particular, we select 5 combinations of base levels and a target level and study whether pretraining on base levels can help the agent master the target level with fewer demonstrations. The results are reported in Table 4. In four cases, using GoToLocal as one of the base levels reduces the number of demonstrations required to solve the target level. However, when only GoToObjMaze was used as the base level, we have not found pretraining to be beneficial. We find this counter-intuitive result interesting, as it shows how current deep learning methods often can not take the full advantage of available curriculums."
        },
        {
            "heading": "4.4 INTERACTIVE LEARNING",
            "text": "Lastly, we perform a simple case study of how sample efficiency can be improved by interactively providing more informative examples to the agent based on what it has already learned. We experiment with an iterative algorithm for adaptively growing the agent\u2019s training set. In particular, we start with 210 base demonstrations, and at each iteration we increase the dataset size by a factor of 21/4 by providing bot demonstrations for missions on which the agent failed. After each dataset increase we train a new agent from scratch. We perform such dataset increases until the dataset\nreaches the final size is clearly sufficient to achieve 99% success rate. We repeat the experiment 3 times for levels GoToRedBallGrey, GoToRedBall and GoToLocal and then estimate how many interactively provided demonstrations would be required for the agent be 99% successful for each of these levels. To this end, we use the same GP posterior analysis as for regular imitation learning experiments.\nThe results for the interactive imitation learning protocol are reported in Table 5. For all 3 levels that we experimented with, we have observed substantial improvement over the vanilla IL, which is most significant (4 times less demonstrations) for GoToRedBallGrey and smaller (1.5-2 times less demonstrations) for the other two levels."
        },
        {
            "heading": "5 CONCLUSION & FUTURE WORK",
            "text": "We present the BabyAI research platform to study language learning with a human in the loop. The platform includes 19 levels of increasing difficulty, based on a decomposition of tasks into a set of basic competencies. Solving the levels requires understanding the Baby Language, a subset of English with a formally defined grammar which exhibits compositional properties. The language is minimalistic and the levels seem simple, but empirically we have found them quite challenging to solve. The platform is open source and extensible, meaning new levels and language concepts can be integrated easily.\nThe results in Section 4 suggest that current imitation learning and reinforcement learning methods scale and generalize poorly when it comes to learning tasks with a compositional structure. Hundreds of thousands of demonstrations are needed to learn tasks which seem trivial by human standards. Methods such as curriculum learning and interactive learning can provide measurable improvements in terms of sample efficiency, but, in order for learning with an actual human in the loop to become realistic, an improvement of at least three orders of magnitude is required.\nAn obvious direction of future research to find strategies to improve sample efficiency of language learning. Tackling this challenge will likely require new models and new teaching methods. Approaches that involve an explicit notion of modularity and subroutines, such as Neural Module Networks (Andreas et al., 2016) or Neural Programmer-Interpreters (Reed and de Freitas, 2015), seem like a promising direction. It is our hope that the BabyAI platform can serve as a challenge and a benchmark for the sample efficiency of language learning for years to come."
        },
        {
            "heading": "ACKNOWLEDGEMENTS",
            "text": "We thank Tristan Deleu, Saizheng Zhang for useful discussions. We also thank Rachel Samson, L\u00e9onard Boussioux and David Yu-Tung Hui for their help in preparing the final version of the paper. This research was enabled in part by support provided by Compute Canada (www.computecanada.ca), NSERC and Canada Research Chairs. We also thank Nvidia for donating NVIDIA DGX-1 used for this research."
        },
        {
            "heading": "A SAMPLE EFFICIENCY ESTIMATION",
            "text": "A.1 REINFORCEMENT LEARNING\nTo estimate the number of episodes required for an RL agent to solve a BabyAI level, we monitored the agent\u2019s smoothed online success rate. We recorded the number of training episodes after which the smoothed performance crossed the 99% success rate threshold. Each experiment was repeated 10 times and the 99% t-test confidence interval is reported in Table 3.\nA.2 IMITATION LEARNING\nEstimating how many demonstrations is required for imitation learning to achieve a given performance level is challenging. In principle, one can sample a dense grid of dataset sizes, train the model until full convergence on each of the resulting datasets, and find the smallest dataset size for which on average the model\u2019s best performance exceeds the target level. In practice, such a procedure would be prohibitively computationally expensive.\nTo make sample efficiency estimation practical, we designed a relatively cheap semi-automatic approximate protocol. We minimize computational resources by using early-stopping and nonparametric interpolation between different data points.\nEarly Stopping Using Normal Time Understanding if a training run has converged and if the model\u2019s performance will not improve any further is non-trivial. To early-stop models in a consistent automatic way, we estimate the \u201cnormal\u201d time T that training a model on a given level would take if an unlimited (in our case 106) number of demonstrations was available. To this end, we train 3 models with 106 demonstrations. We evaluate the online success rate after every 100 or 400 (depending on the model size) batches, each time using 512 different episodes. The online success rate is smoothed using a sliding window of length 10. Let s(k, j, t) denote the smoothed online performance for the j-th run with k demonstrations at time t. Using this notation, we compute the normal time T as T = (T1 + T2 + T3)/3, where Ti = min\nt\n{ t : sj(10 6, j, t) > 99 }\n. Once T is computed, it is used to early stop the remaining M runs that use different numbers of demonstrations ki. Namely the result si of the i-th of these runs is computed as si = max\nt<2T s(ki, 1, t).\nInterpolation Using Gaussian Processes Given the success rate measurements D = {(ki, si)}Mi=1, k1 < k2 < . . . < kM , we estimate the minimum number of samples kmin that is required for the model to reach 99% average success rate. To this end, we a Gaussian Process (GP) model to interpolate between the available (ki, si) data points (Rasmussen and Williams, 2005). GP is a popular model for non-linear regression, whose main advantage is principled modelling of predictions\u2019 uncertainty.\nSpecifically, we model the dependency between the success rate s and the number of examples k as follows:\nf \u223c GPRBF (l), (1) s\u0303(k) = 99 + \u03c3ff(log2 k), (2)\n(k) \u223c N(0, 1), (3) s(k) = s\u0303(k) + \u03c3 (k), (4)\nwhere RBF reflects the fact that we use the Radial Basis Function kernel, l is the kernel\u2019s lengthscale parameter, (k) is white noise, \u03c3f and \u03c3 add scaling to the GP f and the noise . Note the distinction between the average and the observed performances s\u0303(k) and s(k). Using the introduced notation, kmin can be formally defined as kmin = min\nk\u2208[k1;kM ] s\u0303(k) = 99.\nTo focus on the interpolation in the region of interest, we drop all (ki, si) data points for which si < 95. We then fit the model\u2019s hyperparameters l, \u03c3f and \u03c3 by maximizing the likelihood of the remaining data points. To this end, we use the implementation from scikit-learn (Pedregosa et al., 2011). Once the model is fit, it defines a Gaussian posterior density p(s\u0303(k\u20321), . . . , s\u0303(k \u2032 M \u2032)|D) for any M \u2032 data points k\u20321, k \u2032 2, . . . , k \u2032 M \u2032 . It also defines a probability distribution p(kmin|D). We are not\naware of an analytic expression for p(kmin|D), and hence we compute a numerical approximation as follows. We sample a dense log-scale grid of M \u2032 points k\u20321, k \u2032 2, . . . , k \u2032 M \u2032 in the range [k1; kM ]. For each number of demonstrations k\u2032i we approximate the probability p(k \u2032 i\u22121 < kmin < k \u2032 i|D) that s\u0303(k) crosses the 99% threshold somewhere between k\u2032i\u22121 and k \u2032 i as follows:\np(k\u2032i\u22121 < kmin < k \u2032 i|D) \u2248 p\u2032i = p(s\u0303(k\u20321) < 99, . . . , s\u0303(k\u2032i\u22121) < 99, s\u0303(k\u2032i) > 99|D) (5)\nEquation 5 is an approximation because the posterior s\u0303 is not necessarily monotonic. In practice, we observed that the monotonic nature of the observed data D shapes the posterior accordingly. We use the probabilities p\u2032i to construct the following discrete approximation of the posterior p(kmin|D):\np(kmin|D) \u2248 M\u2211 i=1 p\u2032i\u03b4(k \u2032 i) (6)\nwhere \u03b4(k\u2032i) are Dirac delta-functions. Such a discrete approximation is sufficient for the purpose of computing 99% credible intervals for kmin that we report in the paper."
        },
        {
            "heading": "B MINIGRID ENVIRONMENTS FOR OPENAI GYM",
            "text": "The environments used for this research are built on top of MiniGrid, which is an open source gridworld package. This package includes a family of reinforcement learning environments compatible with the OpenAI Gym framework. Many of these environments are parameterizable so that the difficulty of tasks can be adjusted (e.g. the size of rooms is often adjustable).\nB.1 THE WORLD\nIn MiniGrid, the world is a grid of size NxN. Each tile in the grid contains exactly zero or one object, and the agent can only be on an empty tile or on a tile containing an open door. The possible object types are wall, door, key, ball, box and goal. Each object has an associated discrete color, which can be one of red, green, blue, purple, yellow and grey. By default, walls are always grey and goal squares are always green.\nB.2 REWARD FUNCTION\nRewards are sparse for all MiniGrid environments. Each environment has an associated time step limit. The agent receives a positive reward if it succeeds in satisfying an environment\u2019s success criterion within the time step limit, otherwise zero. The formula for calculating positive sparse rewards is 1\u2212 0.9 \u2217 (step_count/max_steps). That is, rewards are always between zero and one, and the quicker the agent can successfully complete an episode, the closer to 1 the reward will be. The max_steps parameter is different for each mission, and varies depending on the size of the environment (larger environments having a higher time step limit) and the length of the instruction (more time steps are allowed for longer instructions).\nB.3 ACTION SPACE\nThere are seven actions in MiniGrid: turn left, turn right, move forward, pick up an object, drop an object, toggle and done. The agent can use the turn left and turn right action to rotate and face one of 4 possible directions (north, south, east, west). The move forward action makes the agent move from its current tile onto the tile in the direction it is currently facing, provided there is nothing on that tile, or that the tile contains an open door. The agent can open doors if they are right in front of it by using the toggle action.\nB.4 OBSERVATION SPACE\nObservations in MiniGrid are partial and egocentric. By default, the agent sees a square of 7x7 tiles in the direction it is facing. These include the tile the agent is standing on. The agent cannot see through walls or closed doors. The observations are provided as a tensor of shape 7x7x3. However, note that these are not RGB images. Each tile is encoded using 3 integer values: one describing the\ntype of object contained in the cell, one describing its color, and a state indicating whether doors are open, closed or locked. This compact encoding was chosen for space efficiency and to enable faster training. The fully observable RGB image view of the environments shown in this paper is provided for human viewing."
        },
        {
            "heading": "C BOT IMPLEMENTATION DETAILS",
            "text": "C.1 TRANSLATION OF INSTRUCTIONS INTO SUBGOALS\nThe bot has access to a representation of the instructions for each environment. These instructions are decomposed into subgoals that are added to a stack. In Figure 4 we show the stacks corresponding to the examples in Figure 1. The stacks are illustrated in bottom to top order, that is, the lowest subgoal in the illustration is to be executed first.\nC.2 PROCESSING OF SUBGOALS\nOnce instructions for a task are translated into the initial stack of subgoals, the bot starts by processing the first subgoal. Each subgoal is processed independently, and can either lead to more subgoals being added to the stack, or to an action being taken. When an action is taken, the state of the bot in the environment changes, and its visibility mask is populated with all the new observed cells and objects, if any. The visibility mask is essential when looking for objects and paths towards cells, because it keeps track of what the bot has seen so far. Once a subgoal is marked as completed, it is removed from the stack, and the bot starts processing the next subgoal in the stack. Note that the same subgoal can remain on top of the stack for multiple time steps, and result in multiple actions being taken.\nThe Close, Drop and Pickup subgoals are trivial, that is, they result in the execution of the corresponding action and then immediately remove themselves from the stack. Diagrams depicting how the Open, GoNextTo and Explore subgoals are handled are depicted in Figures 5, 6, and 7 respectively. In the diagrams, we use the term \"forward cell\" to refer to the grid cell that the agent is facing. We say that a path from X to Y contains blockers if there are objects that need to be moved in order for the agent to be able to navigate from X to Y. A \"clear path\" is a path without blockers."
        }
    ],
    "title": "CIENCY OF GROUNDED LANGUAGE LEARNING",
    "year": 2019
}