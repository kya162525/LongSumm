{
    "abstractText": "We present a class of efficient models called MobileNets for mobile and embedded vision applications. MobileNets are based on a streamlined architecture that uses depthwise separable convolutions to build light weight deep neural networks. We introduce two simple global hyperparameters that efficiently trade off between latency and accuracy. These hyper-parameters allow the model builder to choose the right sized model for their application based on the constraints of the problem. We present extensive experiments on resource and accuracy tradeoffs and show strong performance compared to other popular models on ImageNet classification. We then demonstrate the effectiveness of MobileNets across a wide range of applications and use cases including object detection, finegrain classification, face attributes and large scale geo-localization.",
    "authors": [
        {
            "affiliations": [],
            "name": "Andrew G. Howard"
        },
        {
            "affiliations": [],
            "name": "Menglong Zhu"
        },
        {
            "affiliations": [],
            "name": "Bo Chen"
        },
        {
            "affiliations": [],
            "name": "Dmitry Kalenichenko"
        },
        {
            "affiliations": [],
            "name": "Weijun Wang"
        },
        {
            "affiliations": [],
            "name": "Tobias Weyand"
        },
        {
            "affiliations": [],
            "name": "Marco Andreetto"
        },
        {
            "affiliations": [],
            "name": "Hartwig Adam"
        }
    ],
    "id": "SP:a1543975098f8ec14f4402f761eefb473100beee",
    "references": [
        {
            "authors": [
                "M. Abadi",
                "A. Agarwal",
                "P. Barham",
                "E. Brevdo",
                "Z. Chen",
                "C. Citro",
                "G.S. Corrado",
                "A. Davis",
                "J. Dean",
                "M. Devin"
            ],
            "title": "Tensorflow: Large-scale machine learning on heterogeneous systems, 2015",
            "venue": "Software available from tensorflow. org,",
            "year": 2015
        },
        {
            "authors": [
                "W. Chen",
                "J.T. Wilson",
                "S. Tyree",
                "K.Q. Weinberger",
                "Y. Chen"
            ],
            "title": "Compressing neural networks with the hashing trick",
            "venue": "CoRR, abs/1504.04788,",
            "year": 2015
        },
        {
            "authors": [
                "F. Chollet"
            ],
            "title": "Xception: Deep learning with depthwise separable convolutions",
            "venue": "arXiv preprint arXiv:1610.02357v2,",
            "year": 2016
        },
        {
            "authors": [
                "M. Courbariaux",
                "J.-P. David",
                "Y. Bengio"
            ],
            "title": "Training deep neural networks with low precision multiplications",
            "venue": "arXiv preprint arXiv:1412.7024,",
            "year": 2014
        },
        {
            "authors": [
                "S. Han",
                "H. Mao",
                "W.J. Dally"
            ],
            "title": "Deep compression: Compressing deep neural network with pruning, trained quantization and huffman coding",
            "venue": "CoRR, abs/1510.00149,",
            "year": 2015
        },
        {
            "authors": [
                "J. Hays",
                "A. Efros"
            ],
            "title": "IM2GPS: estimating geographic information from a single image",
            "venue": "In Proceedings of the IEEE International Conference on Computer Vision and Pattern Recognition,",
            "year": 2008
        },
        {
            "authors": [
                "J. Hays",
                "A. Efros"
            ],
            "title": "Large-Scale Image Geolocalization",
            "venue": "Multimodal Location Estimation of Videos and Images. Springer,",
            "year": 2014
        },
        {
            "authors": [
                "K. He",
                "X. Zhang",
                "S. Ren",
                "J. Sun"
            ],
            "title": "Deep residual learning for image recognition",
            "venue": "arXiv preprint arXiv:1512.03385,",
            "year": 2015
        },
        {
            "authors": [
                "G. Hinton",
                "O. Vinyals",
                "J. Dean"
            ],
            "title": "Distilling the knowledge in a neural network",
            "venue": "arXiv preprint arXiv:1503.02531,",
            "year": 2015
        },
        {
            "authors": [
                "J. Huang",
                "V. Rathod",
                "C. Sun",
                "M. Zhu",
                "A. Korattikara",
                "A. Fathi",
                "I. Fischer",
                "Z. Wojna",
                "Y. Song",
                "S. Guadarrama"
            ],
            "title": "Speed/accuracy trade-offs for modern convolutional object detectors",
            "venue": "arXiv preprint arXiv:1611.10012,",
            "year": 2016
        },
        {
            "authors": [
                "I. Hubara",
                "M. Courbariaux",
                "D. Soudry",
                "R. El-Yaniv",
                "Y. Bengio"
            ],
            "title": "Quantized neural networks: Training neural networks with low precision weights and activations",
            "venue": "arXiv preprint arXiv:1609.07061,",
            "year": 2016
        },
        {
            "authors": [
                "F.N. Iandola",
                "M.W. Moskewicz",
                "K. Ashraf",
                "S. Han",
                "W.J. Dally",
                "K. Keutzer"
            ],
            "title": "Squeezenet: Alexnet-level accuracy with 50x fewer parameters and\u00a1 1mb model size",
            "venue": "arXiv preprint arXiv:1602.07360,",
            "year": 2016
        },
        {
            "authors": [
                "S. Ioffe",
                "C. Szegedy"
            ],
            "title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift",
            "venue": "arXiv preprint arXiv:1502.03167,",
            "year": 2015
        },
        {
            "authors": [
                "M. Jaderberg",
                "A. Vedaldi",
                "A. Zisserman"
            ],
            "title": "Speeding up convolutional neural networks with low rank expansions",
            "venue": "arXiv preprint arXiv:1405.3866,",
            "year": 2014
        },
        {
            "authors": [
                "Y. Jia",
                "E. Shelhamer",
                "J. Donahue",
                "S. Karayev",
                "J. Long",
                "R. Girshick",
                "S. Guadarrama",
                "T. Darrell"
            ],
            "title": "Caffe: Convolutional architecture for fast feature embedding",
            "venue": "arXiv preprint arXiv:1408.5093,",
            "year": 2014
        },
        {
            "authors": [
                "J. Jin",
                "A. Dundar",
                "E. Culurciello"
            ],
            "title": "Flattened convolutional neural networks for feedforward acceleration",
            "venue": "arXiv preprint arXiv:1412.5474,",
            "year": 2014
        },
        {
            "authors": [
                "A. Khosla",
                "N. Jayadevaprakash",
                "B. Yao",
                "L. Fei-Fei"
            ],
            "title": "Novel dataset for fine-grained image categorization",
            "venue": "In First Workshop on Fine-Grained Visual Categorization, IEEE Conference on Computer Vision and Pattern Recognition,",
            "year": 2011
        },
        {
            "authors": [
                "J. Krause",
                "B. Sapp",
                "A. Howard",
                "H. Zhou",
                "A. Toshev",
                "T. Duerig",
                "J. Philbin",
                "L. Fei-Fei"
            ],
            "title": "The unreasonable effectiveness of noisy data for fine-grained recognition",
            "venue": "arXiv preprint arXiv:1511.06789,",
            "year": 2015
        },
        {
            "authors": [
                "A. Krizhevsky",
                "I. Sutskever",
                "G.E. Hinton"
            ],
            "title": "Imagenet classification with deep convolutional neural networks",
            "venue": "In Advances in neural information processing systems,",
            "year": 2012
        },
        {
            "authors": [
                "V. Lebedev",
                "Y. Ganin",
                "M. Rakhuba",
                "I. Oseledets",
                "V. Lempitsky"
            ],
            "title": "Speeding-up convolutional neural networks using fine-tuned cp-decomposition",
            "venue": "arXiv preprint arXiv:1412.6553,",
            "year": 2014
        },
        {
            "authors": [
                "W. Liu",
                "D. Anguelov",
                "D. Erhan",
                "C. Szegedy",
                "S. Reed"
            ],
            "title": "Ssd: Single shot multibox detector",
            "venue": "arXiv preprint arXiv:1512.02325,",
            "year": 2015
        },
        {
            "authors": [
                "M. Rastegari",
                "V. Ordonez",
                "J. Redmon",
                "A. Farhadi"
            ],
            "title": "Xnornet: Imagenet classification using binary convolutional neural networks",
            "venue": "arXiv preprint arXiv:1603.05279,",
            "year": 2016
        },
        {
            "authors": [
                "S. Ren",
                "K. He",
                "R. Girshick",
                "J. Sun"
            ],
            "title": "Faster r-cnn: Towards real-time object detection with region proposal networks",
            "venue": "In Advances in neural information processing systems,",
            "year": 2015
        },
        {
            "authors": [
                "O. Russakovsky",
                "J. Deng",
                "H. Su",
                "J. Krause",
                "S. Satheesh",
                "S. Ma",
                "Z. Huang",
                "A. Karpathy",
                "A. Khosla",
                "M. Bernstein"
            ],
            "title": "Imagenet large scale visual recognition challenge",
            "venue": "International Journal of Computer Vision,",
            "year": 2015
        },
        {
            "authors": [
                "F. Schroff",
                "D. Kalenichenko",
                "J. Philbin"
            ],
            "title": "Facenet: A unified embedding for face recognition and clustering",
            "venue": "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,",
            "year": 2015
        },
        {
            "authors": [
                "L. Sifre"
            ],
            "title": "Rigid-motion scattering for image classification",
            "venue": "PhD thesis, Ph. D. thesis,",
            "year": 2014
        },
        {
            "authors": [
                "K. Simonyan",
                "A. Zisserman"
            ],
            "title": "Very deep convolutional networks for large-scale image recognition",
            "venue": "arXiv preprint arXiv:1409.1556,",
            "year": 2014
        },
        {
            "authors": [
                "V. Sindhwani",
                "T. Sainath",
                "S. Kumar"
            ],
            "title": "Structured transforms for small-footprint deep learning",
            "venue": "In Advances in Neural Information Processing Systems,",
            "year": 2015
        },
        {
            "authors": [
                "C. Szegedy",
                "S. Ioffe",
                "V. Vanhoucke"
            ],
            "title": "Inception-v4, inception-resnet and the impact of residual connections on learning",
            "venue": "arXiv preprint arXiv:1602.07261,",
            "year": 2016
        },
        {
            "authors": [
                "C. Szegedy",
                "W. Liu",
                "Y. Jia",
                "P. Sermanet",
                "S. Reed",
                "D. Anguelov",
                "D. Erhan",
                "V. Vanhoucke",
                "A. Rabinovich"
            ],
            "title": "Going deeper with convolutions",
            "venue": "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,",
            "year": 2015
        },
        {
            "authors": [
                "C. Szegedy",
                "V. Vanhoucke",
                "S. Ioffe",
                "J. Shlens",
                "Z. Wojna"
            ],
            "title": "Rethinking the inception architecture for computer vision",
            "venue": "arXiv preprint arXiv:1512.00567,",
            "year": 2015
        },
        {
            "authors": [
                "B. Thomee",
                "D.A. Shamma",
                "G. Friedland",
                "B. Elizalde",
                "K. Ni",
                "D. Poland",
                "D. Borth",
                "L.-J. Li"
            ],
            "title": "Yfcc100m: The new data in multimedia research",
            "venue": "Communications of the ACM,",
            "year": 2016
        },
        {
            "authors": [
                "T. Tieleman",
                "G. Hinton"
            ],
            "title": "Lecture 6.5-rmsprop: Divide the gradient by a running average of its recent magnitude",
            "venue": "COURSERA: Neural Networks for Machine Learning,",
            "year": 2012
        },
        {
            "authors": [
                "M. Wang",
                "B. Liu",
                "H. Foroosh"
            ],
            "title": "Factorized convolutional neural networks",
            "venue": "arXiv preprint arXiv:1608.04337,",
            "year": 2016
        },
        {
            "authors": [
                "T. Weyand",
                "I. Kostrikov",
                "J. Philbin"
            ],
            "title": "PlaNet - Photo Geolocation with Convolutional Neural Networks",
            "venue": "In European Conference on Computer Vision (ECCV),",
            "year": 2016
        },
        {
            "authors": [
                "J. Wu",
                "C. Leng",
                "Y. Wang",
                "Q. Hu",
                "J. Cheng"
            ],
            "title": "Quantized convolutional neural networks for mobile devices",
            "venue": "arXiv preprint arXiv:1512.06473,",
            "year": 2015
        },
        {
            "authors": [
                "Z. Yang",
                "M. Moczulski",
                "M. Denil",
                "N. de Freitas",
                "A. Smola",
                "L. Song",
                "Z. Wang"
            ],
            "title": "Deep fried convnets",
            "venue": "In Proceedings of the IEEE International Conference on Computer Vision,",
            "year": 2015
        }
    ],
    "sections": [
        {
            "heading": "1. Introduction",
            "text": "Convolutional neural networks have become ubiquitous in computer vision ever since AlexNet [19] popularized deep convolutional neural networks by winning the ImageNet Challenge: ILSVRC 2012 [24]. The general trend has been to make deeper and more complicated networks in order to achieve higher accuracy [27, 31, 29, 8]. However, these advances to improve accuracy are not necessarily making networks more efficient with respect to size and speed. In many real world applications such as robotics, self-driving car and augmented reality, the recognition tasks need to be carried out in a timely fashion on a computationally limited platform.\nThis paper describes an efficient network architecture and a set of two hyper-parameters in order to build very small, low latency models that can be easily matched to the design requirements for mobile and embedded vision applications. Section 2 reviews prior work in building small\nmodels. Section 3 describes the MobileNet architecture and two hyper-parameters width multiplier and resolution multiplier to define smaller and more efficient MobileNets. Section 4 describes experiments on ImageNet as well a variety of different applications and use cases. Section 5 closes with a summary and conclusion."
        },
        {
            "heading": "2. Prior Work",
            "text": "There has been rising interest in building small and efficient neural networks in the recent literature, e.g. [16, 34, 12, 36, 22]. Many different approaches can be generally categorized into either compressing pretrained networks or training small networks directly. This paper proposes a class of network architectures that allows a model developer to specifically choose a small network that matches the resource restrictions (latency, size) for their application. MobileNets primarily focus on optimizing for latency but also yield small networks. Many papers on small networks focus only on size but do not consider speed.\nMobileNets are built primarily from depthwise separable convolutions initially introduced in [26] and subsequently used in Inception models [13] to reduce the computation in the first few layers. Flattened networks [16] build a network out of fully factorized convolutions and showed the potential of extremely factorized networks. Independent of this current paper, Factorized Networks[34] introduces a similar factorized convolution as well as the use of topological connections. Subsequently, the Xception network [3] demonstrated how to scale up depthwise separable filters to out perform Inception V3 networks. Another small network is Squeezenet [12] which uses a bottleneck approach to design a very small network. Other reduced computation networks include structured transform networks [28] and deep fried convnets [37].\nA different approach for obtaining small networks is shrinking, factorizing or compressing pretrained networks. Compression based on product quantization [36], hashing\n1\nar X\niv :1\n70 4.\n04 86\n1v 1\n[ cs\n.C V\n] 1\n7 A\npr 2\nProprietary + Confidential\n[2], and pruning, vector quantization and Huffman coding [5] have been proposed in the literature. Additionally various factorizations have been proposed to speed up pretrained networks [14, 20]. Another method for training small networks is distillation [9] which uses a larger network to teach a smaller network. It is complementary to our approach and is covered in some of our use cases in section 4. Another emerging approach is low bit networks [4, 22, 11]."
        },
        {
            "heading": "3. MobileNet Architecture",
            "text": "In this section we first describe the core layers that MobileNet is built on which are depthwise separable filters. We then describe the MobileNet network structure and conclude with descriptions of the two model shrinking hyperparameters width multiplier and resolution multiplier."
        },
        {
            "heading": "3.1. Depthwise Separable Convolution",
            "text": "The MobileNet model is based on depthwise separable convolutions which is a form of factorized convolutions which factorize a standard convolution into a depthwise convolution and a 1\u00d71 convolution called a pointwise convolution. For MobileNets the depthwise convolution applies a single filter to each input channel. The pointwise convolution then applies a 1\u00d71 convolution to combine the outputs the depthwise convolution. A standard convolution both filters and combines inputs into a new set of outputs in one step. The depthwise separable convolution splits this into two layers, a separate layer for filtering and a separate layer for combining. This factorization has the effect of drastically reducing computation and model size. Figure 2 shows how a standard convolution 2(a) is factorized into a depthwise convolution 2(b) and a 1\u00d7 1 pointwise convolution 2(c).\nA standard convolutional layer takes as input a DF \u00d7\nDF \u00d7 M feature map F and produces a DF \u00d7 DF \u00d7 N feature map G where DF is the spatial width and height of a square input feature map1, M is the number of input channels (input depth),DG is the spatial width and height of a square output feature map and N is the number of output channel (output depth).\nThe standard convolutional layer is parameterized by convolution kernel K of sizeDK\u00d7DK\u00d7M\u00d7N whereDK is the spatial dimension of the kernel assumed to be square and M is number of input channels and N is the number of output channels as defined previously.\nThe output feature map for standard convolution assuming stride one and padding is computed as:\nGk,l,n = \u2211 i,j,m Ki,j,m,n \u00b7 Fk+i\u22121,l+j\u22121,m (1)\nStandard convolutions have the computational cost of:\nDK \u00b7DK \u00b7M \u00b7N \u00b7DF \u00b7DF (2)\nwhere the computational cost depends multiplicatively on the number of input channels M , the number of output channels N the kernel size Dk \u00d7 Dk and the feature map size DF \u00d7 DF . MobileNet models address each of these terms and their interactions. First it uses depthwise separable convolutions to break the interaction between the number of output channels and the size of the kernel.\nThe standard convolution operation has the effect of filtering features based on the convolutional kernels and combining features in order to produce a new representation. The filtering and combination steps can be split into two steps via the use of factorized convolutions called depthwise\n1We assume that the output feature map has the same spatial dimensions as the input and both feature maps are square. Our model shrinking results generalize to feature maps with arbitrary sizes and aspect ratios.\nseparable convolutions for substantial reduction in computational cost.\nDepthwise separable convolution are made up of two layers: depthwise convolutions and pointwise convolutions. We use depthwise convolutions to apply a single filter per each input channel (input depth). Pointwise convolution, a simple 1\u00d71 convolution, is then used to create a linear combination of the output of the depthwise layer. MobileNets use both batchnorm and ReLU nonlinearities for both layers.\nDepthwise convolution with one filter per input channel (input depth) can be written as:\nG\u0302k,l,m = \u2211 i,j K\u0302i,j,m \u00b7 Fk+i\u22121,l+j\u22121,m (3)\nwhere K\u0302 is the depthwise convolutional kernel of size DK \u00d7 DK \u00d7 M where the mth filter in K\u0302 is applied to the mth channel in F to produce the mth channel of the filtered output feature map G\u0302.\nDepthwise convolution has a computational cost of:\nDK \u00b7DK \u00b7M \u00b7DF \u00b7DF (4)\nDepthwise convolution is extremely efficient relative to standard convolution. However it only filters input channels, it does not combine them to create new features. So an additional layer that computes a linear combination of the output of depthwise convolution via 1 \u00d7 1 convolution is needed in order to generate these new features.\nThe combination of depthwise convolution and 1 \u00d7 1 (pointwise) convolution is called depthwise separable convolution which was originally introduced in [26].\nDepthwise separable convolutions cost:\nDK \u00b7DK \u00b7M \u00b7DF \u00b7DF +M \u00b7N \u00b7DF \u00b7DF (5)\nwhich is the sum of the depthwise and 1\u00d7 1 pointwise convolutions.\nBy expressing convolution as a two step process of filtering and combining we get a reduction in computation of:\nDK \u00b7DK \u00b7M \u00b7DF \u00b7DF +M \u00b7N \u00b7DF \u00b7DF DK \u00b7DK \u00b7M \u00b7N \u00b7DF \u00b7DF\n= 1\nN +\n1\nD2K\nMobileNet uses 3\u00d7 3 depthwise separable convolutions which uses between 8 to 9 times less computation than standard convolutions at only a small reduction in accuracy as seen in Section 4.\nAdditional factorization in spatial dimension such as in [16, 31] does not save much additional computation as very little computation is spent in depthwise convolutions."
        },
        {
            "heading": "3.2. Network Structure and Training",
            "text": "The MobileNet structure is built on depthwise separable convolutions as mentioned in the previous section except for the first layer which is a full convolution. By defining the network in such simple terms we are able to easily explore network topologies to find a good network. The MobileNet architecture is defined in Table 1. All layers are followed by a batchnorm [13] and ReLU nonlinearity with the exception of the final fully connected layer which has no nonlinearity and feeds into a softmax layer for classification. Figure 3 contrasts a layer with regular convolutions, batchnorm and ReLU nonlinearity to the factorized layer with depthwise convolution, 1 \u00d7 1 pointwise convolution as well as batchnorm and ReLU after each convolutional layer. Down sampling is handled with strided convolution in the depthwise convolutions as well as in the first layer. A final average pooling reduces the spatial resolution to 1 before the fully connected layer. Counting depthwise and pointwise convolutions as separate layers, MobileNet has 28 layers.\nIt is not enough to simply define networks in terms of a small number of Mult-Adds. It is also important to make sure these operations can be efficiently implementable. For\ninstance unstructured sparse matrix operations are not typically faster than dense matrix operations until a very high level of sparsity. Our model structure puts nearly all of the computation into dense 1\u00d7 1 convolutions. This can be implemented with highly optimized general matrix multiply (GEMM) functions. Often convolutions are implemented by a GEMM but require an initial reordering in memory called im2col in order to map it to a GEMM. For instance, this approach is used in the popular Caffe package [15]. 1\u00d71 convolutions do not require this reordering in memory and can be implemented directly with GEMM which is one of the most optimized numerical linear algebra algorithms. MobileNet spends 95% of it\u2019s computation time in 1 \u00d7 1 convolutions which also has 75% of the parameters as can be seen in Table 2. Nearly all of the additional parameters are in the fully connected layer.\nMobileNet models were trained in TensorFlow [1] using RMSprop [33] with asynchronous gradient descent similar to Inception V3 [31]. However, contrary to training large models we use less regularization and data augmentation techniques because small models have less trouble with overfitting. When training MobileNets we do not use side heads or label smoothing and additionally reduce the amount image of distortions by limiting the size of small crops that are used in large Inception training [31]. Additionally, we found that it was important to put very little or no weight decay (l2 regularization) on the depthwise filters since their are so few parameters in them. For the ImageNet benchmarks in the next section all models were trained with same training parameters regardless of the size of the model."
        },
        {
            "heading": "3.3. Width Multiplier: Thinner Models",
            "text": "Although the base MobileNet architecture is already small and low latency, many times a specific use case or application may require the model to be smaller and faster. In order to construct these smaller and less computationally expensive models we introduce a very simple parameter \u03b1 called width multiplier. The role of the width multiplier \u03b1 is to thin a network uniformly at each layer. For a given layer\nand width multiplier \u03b1, the number of input channelsM becomes \u03b1M and the number of output channels N becomes \u03b1N .\nThe computational cost of a depthwise separable convolution with width multiplier \u03b1 is:\nDK \u00b7DK \u00b7 \u03b1M \u00b7DF \u00b7DF + \u03b1M \u00b7 \u03b1N \u00b7DF \u00b7DF (6)\nwhere \u03b1 \u2208 (0, 1] with typical settings of 1, 0.75, 0.5 and 0.25. \u03b1 = 1 is the baseline MobileNet and \u03b1 < 1 are reduced MobileNets. Width multiplier has the effect of reducing computational cost and the number of parameters quadratically by roughly \u03b12. Width multiplier can be applied to any model structure to define a new smaller model with a reasonable accuracy, latency and size trade off. It is used to define a new reduced structure that needs to be trained from scratch."
        },
        {
            "heading": "3.4. Resolution Multiplier: Reduced Representation",
            "text": "The second hyper-parameter to reduce the computational cost of a neural network is a resolution multiplier \u03c1. We ap-\nply this to the input image and the internal representation of every layer is subsequently reduced by the same multiplier. In practice we implicitly set \u03c1 by setting the input resolution.\nWe can now express the computational cost for the core layers of our network as depthwise separable convolutions with width multiplier \u03b1 and resolution multiplier \u03c1:\nDK \u00b7DK \u00b7\u03b1M \u00b7 \u03c1DF \u00b7 \u03c1DF +\u03b1M \u00b7\u03b1N \u00b7 \u03c1DF \u00b7 \u03c1DF (7)\nwhere \u03c1 \u2208 (0, 1] which is typically set implicitly so that the input resolution of the network is 224, 192, 160 or 128. \u03c1 = 1 is the baseline MobileNet and \u03c1 < 1 are reduced computation MobileNets. Resolution multiplier has the effect of reducing computational cost by \u03c12.\nAs an example we can look at a typical layer in MobileNet and see how depthwise separable convolutions, width multiplier and resolution multiplier reduce the cost and parameters. Table 3 shows the computation and number of parameters for a layer as architecture shrinking methods are sequentially applied to the layer. The first row shows the Mult-Adds and parameters for a full convolutional layer with an input feature map of size 14\u00d7 14\u00d7 512 with a kernel K of size 3 \u00d7 3 \u00d7 512 \u00d7 512. We will look in detail in the next section at the trade offs between resources and accuracy."
        },
        {
            "heading": "4. Experiments",
            "text": "In this section we first investigate the effects of depthwise convolutions as well as the choice of shrinking by reducing the width of the network rather than the number of layers. We then show the trade offs of reducing the network based on the two hyper-parameters: width multiplier and resolution multiplier and compare results to a number of popular models. We then investigate MobileNets applied to a number of different applications."
        },
        {
            "heading": "4.1. Model Choices",
            "text": "First we show results for MobileNet with depthwise separable convolutions compared to a model built with full convolutions. In Table 4 we see that using depthwise separable convolutions compared to full convolutions only reduces\naccuracy by 1% on ImageNet was saving tremendously on mult-adds and parameters.\nWe next show results comparing thinner models with width multiplier to shallower models using less layers. To make MobileNet shallower, the 5 layers of separable filters with feature size 14 \u00d7 14 \u00d7 512 in Table 1 are removed. Table 5 shows that at similar computation and number of parameters, that making MobileNets thinner is 3% better than making them shallower."
        },
        {
            "heading": "4.2. Model Shrinking Hyperparameters",
            "text": "Table 6 shows the accuracy, computation and size trade offs of shrinking the MobileNet architecture with the width multiplier \u03b1. Accuracy drops off smoothly until the architecture is made too small at \u03b1 = 0.25.\nTable 7 shows the accuracy, computation and size trade offs for different resolution multipliers by training MobileNets with reduced input resolutions. Accuracy drops off smoothly across resolution.\nFigure 4 shows the trade off between ImageNet Accuracy and computation for the 16 models made from the cross product of width multiplier \u03b1 \u2208 {1, 0.75, 0.5, 0.25} and resolutions {224, 192, 160, 128}. Results are log linear with a jump when models get very small at \u03b1 = 0.25.\nFigure 5 shows the trade off between ImageNet Accuracy and number of parameters for the 16 models made from the cross product of width multiplier \u03b1 \u2208 {1, 0.75, 0.5, 0.25} and resolutions {224, 192, 160, 128}.\nTable 8 compares full MobileNet to the original GoogleNet [30] and VGG16 [27]. MobileNet is nearly as accurate as VGG16 while being 32 times smaller and 27 times less compute intensive. It is more accurate than GoogleNet while being smaller and more than 2.5 times less computation.\nTable 9 compares a reduced MobileNet with width multiplier \u03b1 = 0.5 and reduced resolution 160\u00d7 160. Reduced MobileNet is 4% better than AlexNet [19] while being 45\u00d7 smaller and 9.4\u00d7 less compute than AlexNet. It is also 4% better than Squeezenet [12] at about the same size and 22\u00d7 less computation."
        },
        {
            "heading": "4.3. Fine Grained Recognition",
            "text": "We train MobileNet for fine grained recognition on the Stanford Dogs dataset [17]. We extend the approach of [18] and collect an even larger but noisy training set than [18] from the web. We use the noisy web data to pretrain a fine grained dog recognition model and then fine tune the model on the Stanford Dogs training set. Results on Stanford Dogs test set are in Table 10. MobileNet can almost achieve the state of the art results from [18] at greatly reduced computation and size."
        },
        {
            "heading": "4.4. Large Scale Geolocalizaton",
            "text": "PlaNet [35] casts the task of determining where on earth a photo was taken as a classification problem. The approach divides the earth into a grid of geographic cells that serve as the target classes and trains a convolutional neural network\non millions of geo-tagged photos. PlaNet has been shown to successfully localize a large variety of photos and to outperform Im2GPS [6, 7] that addresses the same task.\nWe re-train PlaNet using the MobileNet architecture on the same data. While the full PlaNet model based on the Inception V3 architecture [31] has 52 million parameters and 5.74 billion mult-adds. The MobileNet model has only 13 million parameters with the usual 3 million for the body and 10 million for the final layer and 0.58 Million mult-adds. As shown in Tab. 11, the MobileNet version delivers only slightly decreased performance compared to PlaNet despite being much more compact. Moreover, it still outperforms Im2GPS by a large margin."
        },
        {
            "heading": "4.5. Face Attributes",
            "text": "Another use-case for MobileNet is compressing large systems with unknown or esoteric training procedures. In a face attribute classification task, we demonstrate a synergistic relationship between MobileNet and distillation [9], a knowledge transfer technique for deep networks. We seek to reduce a large face attribute classifier with 75 million parameters and 1600 million Mult-Adds. The classifier is trained on a multi-attribute dataset similar to YFCC100M [32].\nWe distill a face attribute classifier using the MobileNet architecture. Distillation [9] works by training the classifier to emulate the outputs of a larger model2 instead of the ground-truth labels, hence enabling training from large (and potentially infinite) unlabeled datasets. Marrying the scalability of distillation training and the parsimonious parameterization of MobileNet, the end system not only requires no regularization (e.g. weight-decay and early-stopping), but also demonstrates enhanced performances. It is evident from Tab. 12 that the MobileNet-based classifier is resilient to aggressive model shrinking: it achieves a similar mean average precision across attributes (mean AP) as the in-house while consuming only 1% the Multi-Adds."
        },
        {
            "heading": "4.6. Object Detection",
            "text": "MobileNet can also be deployed as an effective base network in modern object detection systems. We report results for MobileNet trained for object detection on COCO data based on the recent work that won the 2016 COCO challenge [10]. In table 13, MobileNet is compared to VGG and Inception V2 [13] under both Faster-RCNN [23] and SSD [21] framework. In our experiments, SSD is evaluated with 300 input resolution (SSD 300) and Faster-RCNN is compared with both 300 and 600 input resolution (FasterRCNN 300, Faster-RCNN 600). The Faster-RCNN model evaluates 300 RPN proposal boxes per image. The models are trained on COCO train+val excluding 8k minival images\n2The emulation quality is measured by averaging the per-attribute cross-entropy over all attributes.\nand evaluated on minival. For both frameworks, MobileNet achieves comparable results to other networks with only a fraction of computational complexity and model size."
        },
        {
            "heading": "4.7. Face Embeddings",
            "text": "The FaceNet model is a state of the art face recognition model [25]. It builds face embeddings based on the triplet loss. To build a mobile FaceNet model we use distillation to train by minimizing the squared differences of the output\nof FaceNet and MobileNet on the training data. Results for very small MobileNet models can be found in table 14."
        },
        {
            "heading": "5. Conclusion",
            "text": "We proposed a new model architecture called MobileNets based on depthwise separable convolutions. We investigated some of the important design decisions leading to an efficient model. We then demonstrated how to build smaller and faster MobileNets using width multiplier and resolution multiplier by trading off a reasonable amount of accuracy to reduce size and latency. We then compared different MobileNets to popular models demonstrating superior size, speed and accuracy characteristics. We concluded by demonstrating MobileNet\u2019s effectiveness when applied to a wide variety of tasks. As a next step to help adoption and exploration of MobileNets, we plan on releasing models in Tensor Flow."
        }
    ],
    "title": "MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications",
    "year": 2017
}