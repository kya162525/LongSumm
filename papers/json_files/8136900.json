{
    "abstractText": "Deep learning tools have gained tremendous attention in applied machine learning. However such tools for regression and classification do not capture model uncertainty. In comparison, Bayesian models offer a mathematically grounded framework to reason about model uncertainty, but usually come with a prohibitive computational cost. In this paper we develop a new theoretical framework casting dropout training in deep neural networks (NNs) as approximate Bayesian inference in deep Gaussian processes. A direct result of this theory gives us tools to model uncertainty with dropout NNs \u2013 extracting information from existing models that has been thrown away so far. This mitigates the problem of representing uncertainty in deep learning without sacrificing either computational complexity or test accuracy. We perform an extensive study of the properties of dropout\u2019s uncertainty. Various network architectures and nonlinearities are assessed on tasks of regression and classification, using MNIST as an example. We show a considerable improvement in predictive log-likelihood and RMSE compared to existing state-of-the-art methods, and finish by using dropout\u2019s uncertainty in deep reinforcement learning.",
    "authors": [
        {
            "affiliations": [],
            "name": "Yarin Gal"
        },
        {
            "affiliations": [],
            "name": "Zoubin Ghahramani"
        }
    ],
    "id": "SP:dcd1c7c4787539b8ecbbf0fa6ec0994e3ac768be",
    "references": [
        {
            "authors": [
                "O Anjos",
                "C Iglesias",
                "F Peres",
                "J Mart\u0131\u0301nez",
                "\u00c1 Garc\u0131\u0301a",
                "J. Taboada"
            ],
            "title": "Neural networks applied to discriminate botanical origin of honeys",
            "venue": "Food chemistry,",
            "year": 2015
        },
        {
            "authors": [
                "D Barber",
                "Bishop",
                "C M"
            ],
            "title": "Ensemble learning in Bayesian neural networks",
            "venue": "NATO ASI SERIES F COMPUTER AND SYSTEMS SCIENCES,",
            "year": 1998
        },
        {
            "authors": [
                "S Bergmann",
                "S Stelzer",
                "S. Strassburger"
            ],
            "title": "On the use of artificial neural networks in simulation-based manufacturing control",
            "venue": "Journal of Simulation,",
            "year": 2014
        },
        {
            "authors": [
                "D M Blei",
                "M I Jordan",
                "Paisley",
                "J W"
            ],
            "title": "Variational Bayesian inference with stochastic search",
            "venue": "In ICML,",
            "year": 2012
        },
        {
            "authors": [
                "W Chen",
                "J T Wilson",
                "S Tyree",
                "K Q Weinberger",
                "Y. Chen"
            ],
            "title": "Compressing neural networks with the hashing trick",
            "venue": "In ICML-15,",
            "year": 2015
        },
        {
            "authors": [
                "A Damianou",
                "N. Lawrence"
            ],
            "title": "Deep Gaussian processes",
            "venue": "In AISTATS,",
            "year": 2013
        },
        {
            "authors": [
                "Z. Ghahramani"
            ],
            "title": "Probabilistic machine learning and artificial intelligence",
            "venue": "Nature, 521(7553),",
            "year": 2015
        },
        {
            "authors": [
                "A. Graves"
            ],
            "title": "Practical variational inference for neural networks",
            "venue": "In NIPS,",
            "year": 2011
        },
        {
            "authors": [
                "J M Hern\u00e1ndez-Lobato",
                "Adams",
                "R P"
            ],
            "title": "Probabilistic backpropagation for scalable learning of bayesian neural networks",
            "venue": "In ICML-15,",
            "year": 2015
        },
        {
            "authors": [
                "S Herzog",
                "D. Ostwald"
            ],
            "title": "Experimental biology: Sometimes Bayesian statistics are better",
            "venue": "Nature, 494,",
            "year": 2013
        },
        {
            "authors": [
                "G E Hinton",
                "D. Van Camp"
            ],
            "title": "Keeping the neural networks simple by minimizing the description length of the weights",
            "venue": "In Proceedings of the sixth annual conference on Computational learning theory,",
            "year": 1993
        },
        {
            "authors": [
                "M D Hoffman",
                "D M Blei",
                "C Wang",
                "J. Paisley"
            ],
            "title": "Stochastic variational inference",
            "venue": "The Journal of Machine Learning Research,",
            "year": 2013
        },
        {
            "authors": [
                "Y Jia",
                "E Shelhamer",
                "J Donahue",
                "S Karayev",
                "J Long",
                "R Girshick",
                "S Guadarrama",
                "T. Darrell"
            ],
            "title": "Caffe: Convolutional architecture for fast feature embedding",
            "venue": "arXiv preprint arXiv:1408.5093,",
            "year": 2014
        },
        {
            "authors": [
                "A Karpathy",
                "authors"
            ],
            "title": "A Javascript implementation of neural networks. https://github.com/ karpathy/convnetjs, 2014\u20132015",
            "year": 2015
        },
        {
            "authors": [
                "C D Keeling",
                "T Whorf"
            ],
            "title": "P, and the Carbon Dioxide Research Group. Atmospheric CO2 concentrations (ppmv) derived from in situ air samples collected at Mauna",
            "venue": "Loa Observatory,",
            "year": 2004
        },
        {
            "authors": [
                "D P Kingma",
                "M. Welling"
            ],
            "title": "Auto-encoding variational Bayes",
            "venue": "arXiv preprint arXiv:1312.6114,",
            "year": 2013
        },
        {
            "authors": [
                "Kingma",
                "Diederik",
                "Ba",
                "Jimmy"
            ],
            "title": "Adam: A method for stochastic optimization",
            "venue": "arXiv preprint arXiv:1412.6980,",
            "year": 2014
        },
        {
            "authors": [
                "M Krzywinski",
                "N. Altman"
            ],
            "title": "Points of significance: Importance of being uncertain",
            "venue": "Nature methods,",
            "year": 2013
        },
        {
            "authors": [
                "J. Lean"
            ],
            "title": "Solar irradiance reconstruction",
            "venue": "NOAA/NGDC Paleoclimatology Program,",
            "year": 2004
        },
        {
            "authors": [
                "Y LeCun",
                "C. Cortes"
            ],
            "title": "The mnist database of handwritten digits",
            "year": 1998
        },
        {
            "authors": [
                "Y LeCun",
                "L Bottou",
                "Y Bengio",
                "P. Haffner"
            ],
            "title": "Gradientbased learning applied to document recognition",
            "venue": "Proceedings of the IEEE,",
            "year": 1998
        },
        {
            "authors": [
                "O Linda",
                "T Vollmer",
                "M. Manic"
            ],
            "title": "Neural network based intrusion detection system for critical infrastructures",
            "venue": "In Neural Networks,",
            "year": 2009
        },
        {
            "authors": [
                "MacKay",
                "D J C"
            ],
            "title": "A practical Bayesian framework for backpropagation networks",
            "venue": "Neural computation,",
            "year": 1992
        },
        {
            "authors": [
                "S. Maeda"
            ],
            "title": "A Bayesian encourages dropout",
            "venue": "arXiv preprint arXiv:1412.7003,",
            "year": 2014
        },
        {
            "authors": [
                "V Mnih",
                "K Kavukcuoglu",
                "D Silver",
                "A A Rusu",
                "J Veness"
            ],
            "title": "Human-level control through deep reinforcement learning",
            "year": 2015
        },
        {
            "authors": [
                "Neal",
                "R M"
            ],
            "title": "Bayesian learning for neural networks",
            "venue": "PhD thesis, University of Toronto,",
            "year": 1995
        },
        {
            "authors": [
                "C E Rasmussen",
                "Williams",
                "C K I"
            ],
            "title": "Gaussian Processes for Machine Learning (Adaptive Computation and Machine Learning)",
            "year": 2006
        },
        {
            "authors": [
                "D J Rezende",
                "S Mohamed",
                "D. Wierstra"
            ],
            "title": "Stochastic backpropagation and approximate inference in deep generative models",
            "venue": "In ICML,",
            "year": 2014
        },
        {
            "authors": [
                "Snoek",
                "Jasper",
                "Larochelle",
                "Hugo",
                "Adams",
                "Ryan P"
            ],
            "title": "Practical Bayesian optimization of machine learning algorithms",
            "venue": "In Advances in neural information processing systems,",
            "year": 2012
        },
        {
            "authors": [
                "N Srivastava",
                "G Hinton",
                "A Krizhevsky",
                "I Sutskever",
                "R. Salakhutdinov"
            ],
            "title": "Dropout: A simple way to prevent neural networks from overfitting",
            "venue": "The Journal of Machine Learning Research,",
            "year": 2014
        },
        {
            "authors": [
                "C. Szepesv\u00e1ri"
            ],
            "title": "Algorithms for reinforcement learning",
            "venue": "Synthesis Lectures on Artificial Intelligence and Machine Learning,",
            "year": 2010
        },
        {
            "authors": [
                "Thompson",
                "W R"
            ],
            "title": "On the likelihood that one unknown probability exceeds another in view of the evidence of two samples",
            "year": 1933
        },
        {
            "authors": [
                "M Titsias",
                "M. L\u00e1zaro-Gredilla"
            ],
            "title": "Doubly stochastic variational Bayes for non-conjugate inference",
            "venue": "In ICML,",
            "year": 2014
        },
        {
            "authors": [
                "L Wan",
                "M Zeiler",
                "S Zhang",
                "Y LeCun",
                "R. Fergus"
            ],
            "title": "Regularization of neural networks using dropconnect",
            "venue": "In ICML-13,",
            "year": 2013
        },
        {
            "authors": [
                "Williams",
                "C K I"
            ],
            "title": "Computing with infinite networks",
            "year": 1997
        }
    ],
    "sections": [
        {
            "heading": "1. Introduction",
            "text": "Deep learning has attracted tremendous attention from researchers in fields such as physics, biology, and manufacturing, to name a few (Baldi et al., 2014; Anjos et al., 2015; Bergmann et al., 2014). Tools such as neural networks (NNs), dropout, convolutional neural networks (convnets), and others are used extensively. However, these are fields in which representing model uncertainty is of crucial importance (Krzywinski & Altman, 2013; Ghahramani, 2015).\nProceedings of the 33 rd International Conference on Machine Learning, New York, NY, USA, 2016. JMLR: W&CP volume 48. Copyright 2016 by the author(s).\nWith the recent shift in many of these fields towards the use of Bayesian uncertainty (Herzog & Ostwald, 2013; Trafimow & Marks, 2015; Nuzzo, 2014), new needs arise from deep learning tools.\nStandard deep learning tools for regression and classification do not capture model uncertainty. In classification, predictive probabilities obtained at the end of the pipeline (the softmax output) are often erroneously interpreted as model confidence. A model can be uncertain in its predictions even with a high softmax output (fig. 1). Passing a point estimate of a function (solid line 1a) through a softmax (solid line 1b) results in extrapolations with unjustified high confidence for points far from the training data. x\u2217 for example would be classified as class 1 with probability 1. However, passing the distribution (shaded area 1a) through a softmax (shaded area 1b) better reflects classification uncertainty far from the training data.\nModel uncertainty is indispensable for the deep learning practitioner as well. With model confidence at hand we can treat uncertain inputs and special cases explicitly. For example, in the case of classification, a model might return a result with high uncertainty. In this case we might decide to pass the input to a human for classification. This can happen in a post office, sorting letters according to their zip code, or in a nuclear power plant with a system responsible for critical infrastructure (Linda et al., 2009). Uncertainty is important in reinforcement learning (RL) as well (Szepesva\u0301ri, 2010). With uncertainty information an agent can decide when to exploit and when to explore its environment. Recent advances in RL have made use of NNs for Q-value function approximation. These are functions that estimate the quality of different actions an agent can take. Epsilon greedy search is often used where the agent selects its best action with some probability and explores otherwise. With uncertainty estimates over the agent\u2019s Q-value function, techniques such as Thompson sampling (Thompson, 1933) can be used to learn much faster.\nBayesian probability theory offers us mathematically grounded tools to reason about model uncertainty, but these usually come with a prohibitive computational cost. It is perhaps surprising then that it is possible to cast recent\nar X\niv :1\n50 6.\n02 14\n2v 6\n[ st\nat .M\nL ]\n4 O\nct 2\n01 6\ndeep learning tools as Bayesian models \u2013 without changing either the models or the optimisation. We show that the use of dropout (and its variants) in NNs can be interpreted as a Bayesian approximation of a well known probabilistic model: the Gaussian process (GP) (Rasmussen & Williams, 2006). Dropout is used in many models in deep learning as a way to avoid over-fitting (Srivastava et al., 2014), and our interpretation suggests that dropout approximately integrates over the models\u2019 weights. We develop tools for representing model uncertainty of existing dropout NNs \u2013 extracting information that has been thrown away so far. This mitigates the problem of representing model uncertainty in deep learning without sacrificing either computational complexity or test accuracy.\nIn this paper we give a complete theoretical treatment of the link between Gaussian processes and dropout, and develop the tools necessary to represent uncertainty in deep learning. We perform an extensive exploratory assessment of the properties of the uncertainty obtained from dropout NNs and convnets on the tasks of regression and classification. We compare the uncertainty obtained from different model architectures and non-linearities in regression, and show that model uncertainty is indispensable for classification tasks, using MNIST as a concrete example. We then show a considerable improvement in predictive loglikelihood and RMSE compared to existing state-of-theart methods. Lastly we give a quantitative assessment of model uncertainty in the setting of reinforcement learning, on a practical task similar to that used in deep reinforcement learning (Mnih et al., 2015).1"
        },
        {
            "heading": "2. Related Research",
            "text": "It has long been known that infinitely wide (single hidden layer) NNs with distributions placed over their weights converge to Gaussian processes (Neal, 1995; Williams, 1997). This known relation is through a limit argument that does not allow us to translate properties from the Gaussian process to finite NNs easily. Finite NNs with distri-\n1Code and demos are available at http://yarin.co.\nbutions placed over the weights have been studied extensively as Bayesian neural networks (Neal, 1995; MacKay, 1992). These offer robustness to over-fitting as well, but with challenging inference and additional computational costs. Variational inference has been applied to these models, but with limited success (Hinton & Van Camp, 1993; Barber & Bishop, 1998; Graves, 2011). Recent advances in variational inference introduced new techniques into the field such as sampling-based variational inference and stochastic variational inference (Blei et al., 2012; Kingma & Welling, 2013; Rezende et al., 2014; Titsias & La\u0301zaroGredilla, 2014; Hoffman et al., 2013). These have been used to obtain new approximations for Bayesian neural networks that perform as well as dropout (Blundell et al., 2015). However these models come with a prohibitive computational cost. To represent uncertainty, the number of parameters in these models is doubled for the same network size. Further, they require more time to converge and do not improve on existing techniques. Given that good uncertainty estimates can be cheaply obtained from common dropout models, this might result in unnecessary additional computation. An alternative approach to variational inference makes use of expectation propagation (Herna\u0301ndezLobato & Adams, 2015) and has improved considerably in RMSE and uncertainty estimation on VI approaches such as (Graves, 2011). In the results section we compare dropout to these approaches and show a significant improvement in both RMSE and uncertainty estimation."
        },
        {
            "heading": "3. Dropout as a Bayesian Approximation",
            "text": "We show that a neural network with arbitrary depth and non-linearities, with dropout applied before every weight layer, is mathematically equivalent to an approximation to the probabilistic deep Gaussian process (Damianou & Lawrence, 2013) (marginalised over its covariance function parameters). We would like to stress that no simplifying assumptions are made on the use of dropout in the literature, and that the results derived are applicable to any network architecture that makes use of dropout exactly as it appears in practical applications. Furthermore, our results carry to other variants of dropout as well (such as drop-connect\n(Wan et al., 2013), multiplicative Gaussian noise (Srivastava et al., 2014), etc.). We show that the dropout objective, in effect, minimises the Kullback\u2013Leibler divergence between an approximate distribution and the posterior of a deep Gaussian process (marginalised over its finite rank covariance function parameters). Due to space constraints we refer the reader to the appendix for an in depth review of dropout, Gaussian processes, and variational inference (section 2), as well as the main derivation for dropout and its variations (section 3). The results are summarised here and in the next section we obtain uncertainty estimates for dropout NNs.\nLet y\u0302 be the output of a NN model with L layers and a loss function E(\u00b7, \u00b7) such as the softmax loss or the Euclidean loss (square loss). We denote by Wi the NN\u2019s weight matrices of dimensions Ki \u00d7 Ki\u22121, and by bi the bias vectors of dimensions Ki for each layer i = 1, ..., L. We denote by yi the observed output corresponding to input xi for 1 \u2264 i \u2264 N data points, and the input and output sets as X,Y. During NN optimisation a regularisation term is often added. We often use L2 regularisation weighted by some weight decay \u03bb, resulting in a minimisation objective (often referred to as cost),\nLdropout := 1\nN N\u2211 i=1 E(yi, y\u0302i) + \u03bb L\u2211 i=1 ( ||Wi||22 + ||bi||22 ) .\n(1)\nWith dropout, we sample binary variables for every input point and for every network unit in each layer (apart from the last one). Each binary variable takes value 1 with probability pi for layer i. A unit is dropped (i.e. its value is set to zero) for a given input if its corresponding binary variable takes value 0. We use the same values in the backward pass propagating the derivatives to the parameters.\nIn comparison to the non-probabilistic NN, the deep Gaussian process is a powerful tool in statistics that allows us to model distributions over functions. Assume we are given a covariance function of the form\nK(x,y) = \u222b p(w)p(b)\u03c3(wTx+ b)\u03c3(wTy + b)dwdb\nwith some element-wise non-linearity \u03c3(\u00b7) and distributions p(w), p(b). In sections 3 and 4 in the appendix we show that a deep Gaussian process with L layers and covariance function K(x,y) can be approximated by placing a variational distribution over each component of a spectral decomposition of the GPs\u2019 covariance functions. This spectral decomposition maps each layer of the deep GP to a layer of explicitly represented hidden units, as will be briefly explained next.\nLet Wi be a (now random) matrix of dimensions Ki \u00d7 Ki\u22121 for each layer i, and write \u03c9 = {Wi}Li=1. A priori,\nwe let each row of Wi distribute according to the p(w) above. In addition, assume vectors mi of dimensions Ki for each GP layer. The predictive probability of the deep GP model (integrated w.r.t. the finite rank covariance function parameters \u03c9) given some precision parameter \u03c4 > 0 can be parametrised as\np(y|x,X,Y) = \u222b p(y|x,\u03c9)p(\u03c9|X,Y)d\u03c9 (2)\np(y|x,\u03c9) = N ( y; y\u0302(x,\u03c9), \u03c4\u22121ID ) y\u0302 ( x,\u03c9 = {W1, ...,WL}\n) = \u221a 1\nKL WL\u03c3\n( ... \u221a 1\nK1 W2\u03c3\n( W1x+m1 ) ... ) The posterior distribution p(\u03c9|X,Y) in eq. (2) is intractable. We use q(\u03c9), a distribution over matrices whose columns are randomly set to zero, to approximate the intractable posterior. We define q(\u03c9) as:\nWi = Mi \u00b7 diag([zi,j ]Kij=1) zi,j \u223c Bernoulli(pi) for i = 1, ..., L, j = 1, ...,Ki\u22121\ngiven some probabilities pi and matrices Mi as variational parameters. The binary variable zi,j = 0 corresponds then to unit j in layer i \u2212 1 being dropped out as an input to layer i. The variational distribution q(\u03c9) is highly multimodal, inducing strong joint correlations over the rows of the matrices Wi (which correspond to the frequencies in the sparse spectrum GP approximation).\nWe minimise the KL divergence between the approximate posterior q(\u03c9) above and the posterior of the full deep GP, p(\u03c9|X,Y). This KL is our minimisation objective\n\u2212 \u222b q(\u03c9) log p(Y|X,\u03c9)d\u03c9 + KL(q(\u03c9)||p(\u03c9)). (3)\nWe rewrite the first term as a sum\n\u2212 N\u2211\nn=1\n\u222b q(\u03c9) log p(yn|xn,\u03c9)d\u03c9\nand approximate each term in the sum by Monte Carlo integration with a single sample \u03c9\u0302n \u223c q(\u03c9) to get an unbiased estimate\u2212 log p(yn|xn, \u03c9\u0302n). We further approximate the second term in eq. (3) and obtain \u2211L i=1 ( pil 2 2 ||Mi|| 2 2 + l2\n2 ||mi|| 2 2\n) with prior length-scale l (see section 4.2 in the\nappendix). Given model precision \u03c4 we scale the result by the constant 1/\u03c4N to obtain the objective:\nLGP-MC \u221d 1\nN N\u2211 n=1 \u2212 log p(yn|xn, \u03c9\u0302n) \u03c4\n(4)\n+ L\u2211 i=1 ( pil 2 2\u03c4N ||Mi||22 + l2 2\u03c4N ||mi||22 ) .\nSetting\nE(yn, y\u0302(xn, \u03c9\u0302n)) = \u2212 log p(yn|xn, \u03c9\u0302n)/\u03c4\nwe recover eq. (1) for an appropriate setting of the precision hyper-parameter \u03c4 and length-scale l. The sampled \u03c9\u0302n result in realisations from the Bernoulli distribution zni,j equivalent to the binary variables in the dropout case2."
        },
        {
            "heading": "4. Obtaining Model Uncertainty",
            "text": "We next derive results extending on the above showing that model uncertainty can be obtained from dropout NN models.\nFollowing section 2.3 in the appendix, our approximate predictive distribution is given by\nq(y\u2217|x\u2217) = \u222b p(y\u2217|x\u2217,\u03c9)q(\u03c9)d\u03c9 (5)\nwhere \u03c9 = {Wi}Li=1 is our set of random variables for a model with L layers.\nWe will perform moment-matching and estimate the first two moments of the predictive distribution empirically. More specifically, we sample T sets of vectors of realisations from the Bernoulli distribution {zt1, ..., ztL}Tt=1 with zti = [z t i,j ] Ki j=1, giving {Wt1, ...,WtL}Tt=1. We estimate\nEq(y\u2217|x\u2217)(y\u2217) \u2248 1\nT T\u2211 t=1 y\u0302\u2217(x\u2217,Wt1, ...,W t L) (6)\nfollowing proposition C in the appendix. We refer to this Monte Carlo estimate as MC dropout. In practice this is equivalent to performing T stochastic forward passes through the network and averaging the results.\nThis result has been presented in the literature before as model averaging. We have given a new derivation for this result which allows us to derive mathematically grounded uncertainty estimates as well. Srivastava et al. (2014, section 7.5) have reasoned empirically that MC dropout can be approximated by averaging the weights of the network (multiplying each Wi by pi at test time, referred to as standard dropout).\nWe estimate the second raw moment in the same way: Eq(y\u2217|x\u2217) ( (y\u2217)T (y\u2217) ) \u2248 \u03c4\u22121ID\n+ 1\nT T\u2211 t=1 y\u0302\u2217(x\u2217,Wt1, ...,W t L) T y\u0302\u2217(x\u2217,Wt1, ...,W t L)\nfollowing proposition D in the appendix. To obtain the model\u2019s predictive variance we have:\nVarq(y\u2217|x\u2217) ( y\u2217 ) \u2248 \u03c4\u22121ID\n2In the appendix (section 4.1) we extend this derivation to classification. E(\u00b7) is defined as softmax loss and \u03c4 is set to 1.\n+ 1\nT T\u2211 t=1 y\u0302\u2217(x\u2217,Wt1, ...,W t L) T y\u0302\u2217(x\u2217,Wt1, ...,W t L)\n\u2212 Eq(y\u2217|x\u2217)(y\u2217)TEq(y\u2217|x\u2217)(y\u2217)\nwhich equals the sample variance of T stochastic forward passes through the NN plus the inverse model precision. Note that y\u2217 is a row vector thus the sum is over the outerproducts. Given the weight-decay \u03bb (and our prior lengthscale l) we can find the model precision from the identity\n\u03c4 = pl2\n2N\u03bb . (7)\nWe can estimate our predictive log-likelihood by Monte Carlo integration of eq. (2). This is an estimate of how well the model fits the mean and uncertainty (see section 4.4 in the appendix). For regression this is given by:\nlog p(y\u2217|x\u2217,X,Y) \u2248 logsumexp ( \u2212 1\n2 \u03c4 ||y \u2212 y\u0302t||2 ) \u2212 log T \u2212 1\n2 log 2\u03c0 \u2212 1 2 log \u03c4\u22121\n(8)\nwith a log-sum-exp of T terms and y\u0302t stochastic forward passes through the network.\nOur predictive distribution q(y\u2217|x\u2217) is expected to be highly multi-modal, and the above approximations only give a glimpse into its properties. This is because the approximating variational distribution placed on each weight matrix column is bi-modal, and as a result the joint distribution over each layer\u2019s weights is multi-modal (section 3.2 in the appendix).\nNote that the dropout NN model itself is not changed. To estimate the predictive mean and predictive uncertainty we simply collect the results of stochastic forward passes through the model. As a result, this information can be used with existing NN models trained with dropout. Furthermore, the forward passes can be done concurrently, resulting in constant running time identical to that of standard dropout."
        },
        {
            "heading": "5. Experiments",
            "text": "We next perform an extensive assessment of the properties of the uncertainty estimates obtained from dropout NNs and convnets on the tasks of regression and classification. We compare the uncertainty obtained from different model architectures and non-linearities, both on tasks of extrapolation, and show that model uncertainty is important for classification tasks using MNIST (LeCun & Cortes, 1998) as an example. We then show that using dropout\u2019s uncertainty we can obtain a considerable improvement in predictive log-likelihood and RMSE compared to existing stateof-the-art methods. We finish with an example use of the\nmodel\u2019s uncertainty in a Bayesian pipeline. We give a quantitative assessment of the model\u2019s performance in the setting of reinforcement learning on a task similar to that used in deep reinforcement learning (Mnih et al., 2015).\nUsing the results from the previous section, we begin by qualitatively evaluating the dropout NN uncertainty on two regression tasks. We use two regression datasets and model scalar functions which are easy to visualise. These are tasks one would often come across in real-world data analysis. We use a subset of the atmospheric CO2 concentrations dataset derived from in situ air samples collected at Mauna Loa Observatory, Hawaii (Keeling et al., 2004) (referred to as CO2) to evaluate model extrapolation. In the appendix (section D.1) we give further results on a second dataset, the reconstructed solar irradiance dataset (Lean, 2004), to assess model interpolation. The datasets are fairly small, with each dataset consisting of about 200 data points. We centred and normalised both datasets."
        },
        {
            "heading": "5.1. Model Uncertainty in Regression Tasks",
            "text": "We trained several models on the CO2 dataset. We use NNs with either 4 or 5 hidden layers and 1024 hidden units. We use either ReLU non-linearities or TanH non-linearities in each network, and use dropout probabilities of either 0.1 or 0.2. Exact experiment set-up is given in section E.1 in the appendix.\nExtrapolation results are shown in figure 2. The model is trained on the training data (left of the dashed blue line), and tested on the entire dataset. Fig. 2a shows the results for standard dropout (i.e. with weight averaging and without assessing model uncertainty) for the 5 layer ReLU model. Fig. 2b shows the results obtained from a Gaussian process with a squared exponential covariance function for\ncomparison. Fig. 2c shows the results of the same network as in fig. 2a, but with MC dropout used to evaluate the predictive mean and uncertainty for the training and test sets. Lastly, fig. 2d shows the same using the TanH network with 5 layers (plotted with 8 times the standard deviation for visualisation purposes). The shades of blue represent model uncertainty: each colour gradient represents half a standard deviation (in total, predictive mean plus/minus 2 standard deviations are shown, representing 95% confidence). Not plotted are the models with 4 layers as these converge to the same results.\nExtrapolating the observed data, none of the models can capture the periodicity (although with a suitable covariance function the GP will capture it well). The standard dropout NN model (fig. 2a) predicts value 0 for point x\u2217 (marked with a dashed red line) with high confidence, even though it is clearly not a sensible prediction. The GP model represents this by increasing its predictive uncertainty \u2013 in effect declaring that the predictive value might be 0 but the model is uncertain. This behaviour is captured in MC dropout as well. Even though the models in figures 2 have an incorrect predictive mean, the increased standard deviation expresses the models\u2019 uncertainty about the point.\nNote that the uncertainty is increasing far from the data for the ReLU model, whereas for the TanH model it stays bounded.\nThis is not surprising, as dropout\u2019s uncertainty draws its properties from the GP in which different covariance functions correspond to different uncertainty estimates. ReLU and TanH approximate different GP covariance functions (section 3.1 in the appendix) and TanH saturates whereas ReLU does not. For the TanH model we assessed the uncertainty using both dropout probability 0.1 and dropout probability 0.2. Models initialised with dropout probability 0.1 initially exhibit smaller uncertainty than the ones initialised with dropout probability 0.2, but towards the end of the optimisation when the model has converged the uncertainty is almost indistinguishable. It seems that the moments of the dropout models converge to the moments of the approximated GP model \u2013 its mean and uncertainty. It is worth mentioning that we attempted to fit the data with models with a smaller number of layers unsuccessfully.\nThe number of forward iterations used to estimate the uncertainty (T ) was 1000 for drawing purposes. A much smaller numbers can be used to get a reasonable estimation to the predictive mean and uncertainty (see fig. 3 for example with T = 10)."
        },
        {
            "heading": "5.2. Model Uncertainty in Classification Tasks",
            "text": "To assess model classification confidence in a realistic example we test a convolutional neural network trained on the full MNIST dataset (LeCun & Cortes, 1998). We trained the LeNet convolutional neural network model (LeCun et al., 1998) with dropout applied before the last fully connected inner-product layer (the usual way dropout is used in convnets). We used dropout probability of 0.5. We trained the model for 106 iterations with the same learning rate policy as before with \u03b3 = 0.0001 and p = 0.75. We used Caffe (Jia et al., 2014) reference implementation for this experiment.\nWe evaluated the trained model on a continuously rotated image of the digit 1 (shown on the X axis of fig. 4). We\nscatter 100 stochastic forward passes of the softmax input (the output from the last fully connected layer, fig. 4a), as well as of the softmax output for each of the top classes (fig. 4b). For the 12 images, the model predicts classes [1 1 1 1 1 5 5 7 7 7 7 7].\nThe plots show the softmax input value and softmax output value for the 3 digits with the largest values for each corresponding input. When the softmax input for a class is larger than that of all other classes (class 1 for the first 5 images, class 5 for the next 2 images, and class 7 for the rest in fig 4a), the model predicts the corresponding class. Looking at the softmax input values, if the uncertainty envelope of a class is far from that of other classes\u2019 (for example the left most image) then the input is classified with high confidence. On the other hand, if the uncertainty envelope intersects that of other classes (such as in the case of the middle input image), then even though the softmax output can be arbitrarily high (as far as 1 if the mean is far from the means of the other classes), the softmax output uncertainty can be as large as the entire space. This signifies the model\u2019s uncertainty in its softmax output value \u2013 i.e. in the prediction. In this scenario it would not be reasonable to use probit to return class 5 for the middle image when its uncertainty is so high. One would expect the model to ask an external annotator for a label for this input. Model uncertainty in such cases can be quantified by looking at the entropy or variation ratios of the model prediction."
        },
        {
            "heading": "5.3. Predictive Performance",
            "text": "Predictive log-likelihood captures how well a model fits the data, with larger values indicating better model fit. Uncertainty quality can be determined from this quantity as well (see section 4.4 in the appendix). We replicate the experiment set-up in Herna\u0301ndez-Lobato & Adams (2015) and compare the RMSE and predictive log-likelihood of dropout (referred to as \u201cDropout\u201d in the experiments) to that of Probabilistic Back-propagation (referred to as\n\u201cPBP\u201d, (Herna\u0301ndez-Lobato & Adams, 2015)) and to a popular variational inference technique in Bayesian NNs (referred to as \u201cVI\u201d, (Graves, 2011)). The aim of this experiment is to compare the uncertainty quality obtained from a naive application of dropout in NNs to that of specialised methods developed to capture uncertainty.\nFollowing our Bayesian interpretation of dropout (eq. (4)) we need to define a prior length-scale, and find an optimal model precision parameter \u03c4 which will allow us to evaluate the predictive log-likelihood (eq. (8)). Similarly to (Herna\u0301ndez-Lobato & Adams, 2015) we use Bayesian optimisation (BO, (Snoek et al., 2012; Snoek & authors, 2015)) over validation log-likelihood to find optimal \u03c4 , and set the prior length-scale to 10\u22122 for most datasets based on the range of the data. Note that this is a standard dropout NN, where the prior length-scale l and model precision \u03c4 are simply used to define the model\u2019s weight decay through eq. (7). We used dropout with probabilities 0.05 and 0.005 since the network size is very small (with 50 units following (Herna\u0301ndez-Lobato & Adams, 2015)) and the datasets are fairly small as well. The BO runs used 40 iterations following the original setup, but after finding the optimal parameter values we used 10x more iterations, as dropout takes longer to converge. Even though the model doesn\u2019t converge within 40 iterations, it gives BO a good indication of whether a parameter is good or not. Finally, we used mini-batches of size 32 and the Adam optimiser (Kingma & Ba, 2014). Further details about the various datasets are given in (Herna\u0301ndez-Lobato & Adams, 2015).\nThe results are shown in table3 1. Dropout significantly outperforms all other models both in terms of RMSE as well as test log-likelihood on all datasets apart from Yacht, for which PBP obtains better RMSE. All experiments were averaged on 20 random splits of the data (apart from Pro-\n3Update [October 2016]: Note that in an earlier version of this paper our reported dropout standard error was erroneously scaledup by a factor of 4.5 (i.e. for Boston RMSE we reported standard error 0.85 instead of 0.19 for example).\ntein for which only 5 splits were used and Year for which one split was used). The median for most datasets gives much better performance than the mean. For example, on the Boston Housing dataset dropout achieves median RMSE of 2.68 with an IQR interval of [2.45, 3.35] and predictive log-likelihood median of -2.34 with IQR [-2.54, -2.29]. In the Concrete Strength dataset dropout achieves median RMSE of 5.15.\nTo implement the model we used Keras (Chollet, 2015), an open source deep learning package based on Theano (Bergstra et al., 2010). In (Herna\u0301ndez-Lobato & Adams, 2015) BO for VI seems to require a considerable amount of additional time compared to PBP. However our model\u2019s running time (including BO) is comparable to PBP\u2019s Theano implementation4. On Naval Propulsion for example our model takes 276 seconds on average per split (startto-finish, divided by the number of splits). With the optimal parameters BO found, model training took 95 seconds. This is in comparison to PBP\u2019s 220 seconds. For Kin8nm our model requires 188 seconds on average including BO, 65 seconds without, compared to PBP\u2019s 156 seconds.\nDropout\u2019s RMSE in table 1 is given by averaging stochastic forward passes through the network following eq. (6) (MC dropout). We observed an improvement using this estimate compared to the standard dropout weight averaging, and also compared to much smaller dropout probabilities (near zero). For the Boston Housing dataset for example, repeating the same experiment with dropout probability 0 results in RMSE of 3.07 and predictive log-likelihood of\n4 Update [October 2016]: In the results above we attempted to match PBP\u2019s run time (hence used only 10x more epochs compared to PBP\u2019s 40 epochs). Experimenting with 100x more epochs compared to PBP (10x more epochs compared to the results in table 1) gives a considerable improvement both in terms of test RMSE as well as test log-likelihood over the results in table 1. We further assessed a model with two hidden layers instead of one (using the same number of units for the second layer). Both experiments are shown in table 2 at the end of this document.\n-2.59. This demonstrates that dropout significantly affects the predictive log-likelihood and RMSE, even though the dropout probability is fairly small.\nWe used dropout following the same way the method would be used in current research \u2013 without adapting model structure. This is to demonstrate the results that could be obtained from existing models when evaluated with MC dropout. Experimenting with different network architectures we expect the method to give even better uncertainty estimates."
        },
        {
            "heading": "5.4. Model Uncertainty in Reinforcement Learning",
            "text": "In reinforcement learning an agent receives various rewards from different states, and its aim is to maximise its expected reward over time. The agent tries to learn to avoid transitioning into states with low rewards, and to pick actions that lead to better states instead. Uncertainty is of great importance in this task \u2013 with uncertainty information an agent can decide when to exploit rewards it knows of, and when to explore its environment.\nRecent advances in RL have made use of NNs to estimate agents\u2019 Q-value functions (referred to as Q-networks), a function that estimates the quality of different actions an agent can take at different states. This has led to impressive results on Atari game simulations, where agents superseded human performance on a variety of games (Mnih et al., 2015). Epsilon greedy search was used in this setting, where the agent selects the best action following its current Q-function estimation with some probability, and explores otherwise. With our uncertainty estimates given by a dropout Q-network we can use techniques such as Thompson sampling (Thompson, 1933) to converge faster\nthan epsilon greedy while avoiding over-fitting.\nWe use code by (Karpathy & authors, 2014\u20132015) that replicated the results by (Mnih et al., 2015) with a simpler 2D setting. We simulate an agent in a 2D world with 9 eyes pointing in different angles ahead (depicted in fig. 5). Each eye can sense a single pixel intensity of 3 colours. The agent navigates by using one of 5 actions controlling two motors at its base. An action turns the motors at different angles and different speeds. The environment consists of red circles which give the agent a positive reward for reaching, and green circles which result in a negative reward. The agent is further rewarded for not looking at (white) walls, and for walking in a straight line.\nWe trained the original model, and an additional model with dropout with probability 0.1 applied before the every weight layer. Note that both agents use the same network structure in this experiment for comparison purposes. In a real world scenario using dropout we would use a larger model (as the original model was intentially selected to be small to avoid over-fitting). To make use of the dropout Qnetwork\u2019s uncertainty estimates, we use Thompson sampling instead of epsilon greedy. In effect this means that we perform a single stochastic forward pass through the network every time we need to take an action. In replay, we perform a single stochastic forward pass and then backpropagate with the sampled Bernoulli random variables. Exact experiment set-up is given in section E.2 in the appendix.\nIn fig. 6 we show a log plot of the average reward obtained by both the original implementation (in green) and our approach (in blue), as a function of the number of batches. Not plotted is the burn-in intervals of 25 batches (random\nmoves). Thompson sampling gets reward larger than 1 within 25 batches from burn-in. Epsilon greedy takes 175 batches to achieve the same performance. It is interesting to note that our approach seems to stop improving after 1K batches. This is because we are still sampling random moves, whereas epsilon greedy only exploits at this stage."
        },
        {
            "heading": "6. Conclusions and Future Research",
            "text": "We have built a probabilistic interpretation of dropout which allowed us to obtain model uncertainty out of existing deep learning models. We have studied the properties of this uncertainty in detail, and demonstrated possible applications, interleaving Bayesian models and deep learning models together. This extends on initial research studying dropout from the Bayesian perspective (Wang & Manning, 2013; Maeda, 2014).\nBernoulli dropout is only one example of a regularisation technique corresponding to an approximate variational distribution which results in uncertainty estimates. Other variants of dropout follow our interpretation as well and correspond to alternative approximating distributions. These would result in different uncertainty estimates, trading-off uncertainty quality with computational complexity. We explore these in follow-up work.\nFurthermore, each GP covariance function has a one-toone correspondence with the combination of both NN nonlinearities and weight regularisation. This suggests techniques to select appropriate NN structure and regularisation based on our a priori assumptions about the data. For example, if one expects the function to be smooth and the uncertainty to increase far from the data, cosine nonlinearities and L2 regularisation might be appropriate. The study of non-linearity\u2013regularisation combinations and the corresponding predictive mean and variance are subject of current research."
        },
        {
            "heading": "ACKNOWLEDGEMENTS",
            "text": "The authors would like to thank Dr Yutian Chen, Mr Christof Angermueller, Mr Roger Frigola, Mr Rowan McAllister, Dr Gabriel Synnaeve, Mr Mark van der Wilk, Mr Yan Wu, and many other reviewers for their helpful comments. Yarin Gal is supported by the Google European Fellowship in Machine Learning."
        },
        {
            "heading": "A. Appendix",
            "text": "The appendix for the paper is given at http://arxiv. org/abs/1506.02157."
        }
    ],
    "title": "Dropout as a Bayesian Approximation:  Representing Model Uncertainty in Deep Learning",
    "year": 2016
}