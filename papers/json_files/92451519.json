{
    "abstractText": "Learning to navigate in complex environments with dynamic elements is an important milestone in developing AI agents. In this work we formulate the navigation question as a reinforcement learning problem and show that data efficiency and task performance can be dramatically improved by relying on additional auxiliary tasks. In particular we consider jointly learning the goal-driven reinforcement learning problem with a self-supervised depth prediction task and a self-supervised loop closure classification task. This approach can learn to navigate from raw sensory input in complicated 3D mazes, approaching human-level performance even under conditions where the goal location changes frequently. We provide detailed analysis of the agent behaviour1, its ability to localise, and its network activity dynamics, showing that the agent implicitly learns key navigation abilities.",
    "authors": [
        {
            "affiliations": [],
            "name": "Piotr Mirowski"
        },
        {
            "affiliations": [],
            "name": "Razvan Pascanu"
        },
        {
            "affiliations": [],
            "name": "Fabio Viola"
        },
        {
            "affiliations": [],
            "name": "Hubert Soyer"
        },
        {
            "affiliations": [],
            "name": "Andrew J. Ballard"
        },
        {
            "affiliations": [],
            "name": "Andrea Banino"
        },
        {
            "affiliations": [],
            "name": "Misha Denil"
        },
        {
            "affiliations": [],
            "name": "Ross Goroshin"
        },
        {
            "affiliations": [],
            "name": "Laurent Sifre"
        },
        {
            "affiliations": [],
            "name": "Koray Kavukcuoglu"
        },
        {
            "affiliations": [],
            "name": "Dharshan Kumaran"
        },
        {
            "affiliations": [],
            "name": "Raia Hadsell"
        }
    ],
    "id": "SP:df1c81ab7fbece0e180b30360f6f48c84de03f40",
    "references": [
        {
            "authors": [
                "Trevor Barron",
                "Matthew Whitehead",
                "Alan Yeung"
            ],
            "title": "Deep reinforcement learning in a 3-d blockworld environment",
            "venue": "In Deep Reinforcement Learning: Frontiers and Challenges,",
            "year": 2016
        },
        {
            "authors": [
                "MWM Gamini Dissanayake",
                "Paul Newman",
                "Steve Clark",
                "Hugh F. Durrant-Whyte",
                "Michael Csorba"
            ],
            "title": "A solution to the simultaneous localization and map building (slam) problem",
            "venue": "IEEE Transactions on Robotics and Automation,",
            "year": 2001
        },
        {
            "authors": [
                "David Eigen",
                "Christian Puhrsch",
                "Rob Fergus"
            ],
            "title": "Depth map prediction from a single image using a multi-scale deep network",
            "venue": "In Proc. of Neural Information Processing Systems,",
            "year": 2014
        },
        {
            "authors": [
                "Alex Graves",
                "Mohamed Abdelrahman",
                "Geoffrey Hinton"
            ],
            "title": "Speech recognition with deep recurrent neural networks",
            "venue": "In Proceedings of the International Conference on Acoustics, Speech and Signal Processing,",
            "year": 2013
        },
        {
            "authors": [
                "Alex Graves",
                "Greg Wayne",
                "Malcolm Reynolds",
                "Tim Harley",
                "Ivo Danihelka",
                "Agnieszka GrabskaBarwi\u0144ska",
                "Sergio G\u00f3mez Colmenarejo",
                "Edward Grefenstette",
                "Tiago Ramalho",
                "John Agapiou"
            ],
            "title": "Hybrid computing using a neural network with dynamic external memory",
            "year": 2016
        },
        {
            "authors": [
                "Matthew J. Hausknecht",
                "Peter Stone"
            ],
            "title": "Deep recurrent q-learning for partially observable mdps",
            "venue": "Proc. of Conf. on Artificial Intelligence,",
            "year": 2015
        },
        {
            "authors": [
                "Max Jaderberg",
                "Volodymir Mnih",
                "Wojciech Czarnecki",
                "Tom Schaul",
                "Joel Z. Leibo",
                "David Silver",
                "Koray Kavukcuoglu"
            ],
            "title": "Reinforcement learning with unsupervised auxiliary tasks",
            "venue": "In Submitted to Int\u2019l Conference on Learning Representations,",
            "year": 2017
        },
        {
            "authors": [
                "Jan Koutnik",
                "Giuseppe Cuccu",
                "J\u00c3ijrgen Schmidhuber",
                "Faustino Gomez"
            ],
            "title": "Evolving large-scale neural networks for vision-based reinforcement learning",
            "venue": "In Proceedings of the 15th annual conference on Genetic and evolutionary computation,",
            "year": 2013
        },
        {
            "authors": [
                "Tejas D. Kulkarni",
                "Ardavan Saeedi",
                "Simanta Gautam",
                "Samuel J. Gershman"
            ],
            "title": "Deep successor reinforcement learning",
            "venue": "CoRR, abs/1606.02396,",
            "year": 2016
        },
        {
            "authors": [
                "Guillaume Lample",
                "Devendra Singh Chaplot"
            ],
            "title": "Playing FPS games with deep reinforcement learning. CoRR, 2016",
            "venue": "URL http://arxiv.org/abs/1609.05521",
            "year": 2016
        },
        {
            "authors": [
                "Xiujun Li",
                "Lihong Li",
                "Jianfeng Gao",
                "Xiaodong He",
                "Jianshu Chen",
                "Li Deng",
                "Ji He"
            ],
            "title": "Recurrent reinforcement learning: A hybrid approach",
            "venue": "In Proceedings of the International Conference on Learning Representations,",
            "year": 2016
        },
        {
            "authors": [
                "Laurens van der Maaten",
                "Geoffrey Hinton"
            ],
            "title": "Visualizing data using t-sne",
            "venue": "Journal of Machine Learning Research,",
            "year": 2008
        },
        {
            "authors": [
                "Piotr Mirowski",
                "Marc\u2019Aurelio Ranzato",
                "Yann LeCun"
            ],
            "title": "Dynamic auto-encoders for semantic indexing",
            "venue": "In NIPS Deep Learning and Unsupervised Learning Workshop,",
            "year": 2010
        },
        {
            "authors": [
                "Volodymyr Mnih",
                "Koray Kavukcuoglu",
                "David Silver",
                "Andrei A. Rusu",
                "Joel Veness"
            ],
            "title": "Human-level control through deep reinforcement learning",
            "venue": "Nature, 518:529\u2013533,",
            "year": 2015
        },
        {
            "authors": [
                "Volodymyr Mnih",
                "Adri\u00c3\u0103 Puigdom\u00c3\u013anech Badia",
                "Mehdi Mirza",
                "Alex Graves",
                "Timothy P. Lillicrap",
                "Tim Harley",
                "David Silver",
                "Koray Kavukcuoglu"
            ],
            "title": "Asynchronous methods for deep reinforcement learning",
            "venue": "In Proc. of Int\u2019l Conf. on Machine Learning,",
            "year": 2016
        },
        {
            "authors": [
                "Arun Nair",
                "Praveen Srinivasan",
                "Sam Blackwell",
                "Cagdas Alcicek",
                "Rory Fearon"
            ],
            "title": "Massively parallel methods for deep reinforcement learning",
            "venue": "In Proceedings of the International Conference on Machine Learning Deep Learning Workshop,",
            "year": 2015
        },
        {
            "authors": [
                "Karthik Narasimhan",
                "Tejas D. Kulkarni",
                "Regina Barzilay"
            ],
            "title": "Language understanding for text-based games using deep reinforcement learning",
            "venue": "In Proc. of Empirical Methods in Natural Language Processing,",
            "year": 2015
        },
        {
            "authors": [
                "Junhyuk Oh",
                "Valliappa Chockalingam",
                "Satinder P. Singh",
                "Honglak Lee"
            ],
            "title": "Control of memory, active perception, and action in minecraft",
            "venue": "In Proc. of International Conference on Machine Learning,",
            "year": 2016
        },
        {
            "authors": [
                "David S Olton",
                "James T Becker",
                "Gail E Handelmann"
            ],
            "title": "Hippocampus, space, and memory",
            "venue": "Behavioral and Brain Sciences,",
            "year": 1979
        },
        {
            "authors": [
                "Razvan Pascanu",
                "Caglar Gulcehre",
                "Kyunghyun Cho",
                "Yoshua Bengio"
            ],
            "title": "How to construct deep recurrent neural networks",
            "venue": "arXiv preprint arXiv:1312.6026,",
            "year": 2013
        },
        {
            "authors": [
                "Antti Rasmus",
                "Mathias Berglund",
                "Mikko Honkala",
                "Harri Valpola",
                "Tapani Raiko"
            ],
            "title": "Semi-supervised learning with ladder networks",
            "venue": "In Advances in Neural Information Processing Systems,",
            "year": 2015
        },
        {
            "authors": [
                "Steven C Suddarth",
                "YL Kergosien"
            ],
            "title": "Rule-injection hints as a means of improving network performance and learning time",
            "venue": "In Neural Networks,",
            "year": 1990
        },
        {
            "authors": [
                "Richard S Sutton",
                "Doina Precup",
                "Satinder Singh"
            ],
            "title": "Between mdps and semi-mdps: A framework for temporal abstraction in reinforcement learning",
            "venue": "Artificial intelligence,",
            "year": 1999
        },
        {
            "authors": [
                "Lei Tai",
                "Ming Liu"
            ],
            "title": "Towards cognitive exploration through deep reinforcement learning for mobile robots",
            "venue": "In arXiv,",
            "year": 2016
        },
        {
            "authors": [
                "Chen Tessler",
                "Shahar Givony",
                "Tom Zahavy",
                "Daniel J. Mankowitz",
                "Shie Mannor"
            ],
            "title": "A deep hierarchical approach to lifelong learning in minecraft",
            "venue": "CoRR, abs/1604.07255,",
            "year": 2016
        },
        {
            "authors": [
                "Tijmen Tieleman",
                "Geoffrey Hinton"
            ],
            "title": "rmsprop: Divide the gradient by a running average of its recent magnitude",
            "venue": "In Coursera: Neural Networks for Machine Learning,",
            "year": 2012
        },
        {
            "authors": [
                "Yuting Zhang",
                "Kibok Lee",
                "Honglak Lee"
            ],
            "title": "Augmenting supervised neural networks with unsupervised objectives for large-scale image classification",
            "venue": "In Proc. of International Conference on Machine Learning,",
            "year": 2016
        },
        {
            "authors": [
                "Junbo Zhao",
                "Micha\u00ebl Mathieu",
                "Ross Goroshin",
                "Yann LeCun"
            ],
            "title": "Stacked what-where auto-encoders",
            "venue": "Int\u2019l Conf. on Learning Representations (Workshop),",
            "year": 2015
        },
        {
            "authors": [
                "Yuke Zhu",
                "Roozbeh Mottaghi",
                "Eric Kolve",
                "Joseph J. Lim",
                "Abhinav Gupta",
                "Li Fei-Fei",
                "Ali Farhadi"
            ],
            "title": "Target-driven visual navigation in indoor scenes using deep reinforcement learning",
            "venue": "CoRR, abs/1609.05143,",
            "year": 2016
        }
    ],
    "sections": [
        {
            "heading": "1 INTRODUCTION",
            "text": "The ability to navigate efficiently within an environment is fundamental to intelligent behavior. Whilst conventional robotics methods, such as Simultaneous Localisation and Mapping (SLAM), tackle navigation through an explicit focus on position inference and mapping (Dissanayake et al., 2001), here we follow recent work in deep reinforcement learning (Mnih et al., 2015; 2016) and propose that navigational abilities could emerge as the by-product of an agent learning a policy that maximizes reward. One advantage of an intrinsic, end-to-end approach is that actions are not divorced from representation, but rather learnt together, thus ensuring that task-relevant features are present in the representation. Learning to navigate from reinforcement learning in partially observable environments, however, poses several challenges.\nFirst, rewards are often sparsely distributed in the environment, where there may be only one goal location. Second, environments often comprise dynamic elements, requiring the agent to use memory at different timescales: rapid one-shot memory for the goal location, together with short term memory subserving temporal integration of velocity signals and visual observations, and longer term memory for constant aspects of the environment (e.g. boundaries, cues).\nTo improve statistical efficiency we bootstrap the reinforcement learning procedure by augmenting our loss with auxiliary tasks that provide denser training signals that support navigation-relevant representation learning. We consider two additional losses: the first involves reconstruction of a low-dimensional depth map at each time step. This self-supervised task concerns the 3D geometry of the environment, and is aimed to encourage the learning of representations that aid obstacle avoidance and short-term trajectory planning. The second task is self-supervised, and directly invokes loop closure from SLAM: the agent is trained to predict if the current location has been previously visited within a local trajectory. \u2217Denotes equal contribution 1A video illustrating the navigation agents is available at: https://youtu.be/lNoaTyMZsWI\nar X\niv :1\n61 1.\n03 67\n3v 2\n[ cs\n.A I]\n3 0\nN ov\nTo address the memory requirements of the task we rely on a stacked LSTM architecture (Graves et al., 2013; Pascanu et al., 2013). We evaluate our approach using five 3D maze environments and demonstrate the accelerated learning and increased performance of the proposed agent architecture. These environments feature complex geometry, random start position and orientation, dynamic goal locations, and long episodes that require thousands of agent steps (see Figure 1). We also provide detailed analysis of the trained agent to show that critical navigation skills are acquired. This is important as neither position inference nor mapping are directly part of the loss; therefore, raw performance on the goal finding task is not necessarily a good indication that these skills are acquired. In particular, we show that the proposed agent resolves ambiguous observations and quickly localizes itself in a complex maze, and that this localization capability is correlated with higher task reward."
        },
        {
            "heading": "2 APPROACH",
            "text": "We rely on a end-to-end learning framework that incorporates multiple objectives. Firstly it tries to maximize cumulative reward using an actor-critic approach. Secondly it minimizes a self-supervised loss of inferring the depth map from the RGB observation. Finally, the agent is trained to detect loop closures as a self-supervised task that encourages implicit velocity integration.\nThe reinforcement learning problem is addressed with the Asynchronous Advantage Actor-Critic (A3C) algorithm (Mnih et al., 2016) that relies on learning both a policy \u03c0(at|st; \u03b8) and value function V (st; \u03b8V ) given a state observation st. Both the policy and value function share all intermediate representations, both being computed using a separate linear layer from the topmost layer of the model. The agent setup closely follows the work of (Mnih et al., 2016) and we refer to this work for the details (e.g. the use of a convolutional encoder followed by either an MLP or an LSTM, the use of action repetition, entropy regularization to prevent the policy saturation, etc.). These details can also be found in the Appendix B.\nThe baseline that we consider in this work is an A3C agent (Mnih et al., 2016) that receives only RGB input from the environment, using either a recurrent or a purely feed-forward model (see Figure 2a,b). The encoder for the RGB input (used in all other considered architectures) is a 3 layer convolutional network. To support the navigation capability of our approach, we also rely on the Nav A3C agent (Figure 2c) which employs a two-layer stacked LSTM after the convolutional encoder. We expand the observations of the agents to include agent-relative velocity, the action sampled from the stochastic policy and the immediate reward, from the previous time step. We opt to feed the velocity and previously selected action directly to the second recurrent layer, with the first layer only receiving the reward. We postulate that the first layer might be able to make associations between reward and visual observations that are provided as context to the second layer from which the policy is computed. Thus, the observation st may include an image xt \u2208 R3\u00d7W\u00d7H (where W and H are the width and\nheight of the image), the agent-relative lateral and rotational velocity vt \u2208 R6, the previous action at\u22121 \u2208 RNA , and the previous reward rt\u22121 \u2208 R. Figure 2d shows the augmentation of the Nav A3C with the different possible auxiliary losses. In particular we consider predicting depth from the convolutional layer (we will refer to this choice as D1), or from the top LSTM layer (D2) or predicting loop closure (L). The auxiliary losses are computed on the current frame via a single layer MLP. The agent is trained by applying a weighted sum of the gradients coming from A3C, the gradients from depth prediction (multiplied with \u03b2d1 , \u03b2d2 ) and the gradients from the loop closure (scaled by \u03b2l). More details of the online learning algorithm are given in Appendix B."
        },
        {
            "heading": "2.1 DEPTH PREDICTION",
            "text": "The primary input to the agent is in the form of RGB images. However, depth information, covering the central field of view of the agent, might supply valuable information about the 3D structure of the environment. While depth could be directly used as an input, we argue that if presented as an additional loss it is actually more valuable to the learning process. In particular if the prediction loss shares representation with the policy, it could help build useful features for RL much faster, bootstrapping learning. Since we know from (Eigen et al., 2014) that a single frame can be enough to predict depth, we know this auxiliary task can be learnt. A comparison between having depth as input versus as an additional loss is given in Appendix C, which shows significant gain for depth as a loss.\nSince the role of the auxiliary loss is just to build up the representation of the model, we do not necessarily care about the specific performance obtained or nature of the prediction. We do care about the data efficiency aspect of the problem and also computational complexity. If the loss is to be useful for the main task, we should converge faster on it compared to solving the RL problem (using less data samples), and the additional computational cost should be minimal. To achieve this we use a low resolution variant of the depth map, reducing the screen resolution to 4x16 pixels2.\nWe explore two different variants for the loss. The first choice is to phrase it as a regression task, the most natural choice. While this formulation, combined with a higher depth resolution, extracts the most information, mean square error imposes a unimodal distribution (van den Oord et al., 2016). To address this possible issue, we also consider a classification loss, where depth at each position is discretised into 8 different bands. The bands are non-uniformally distributed such that we pay more attention to far-away objects (details in Appendix B). The motivation for the classification formulation is that while it greatly reduces the resolution of depth, it is more flexible from a learning perspective and can result in faster convergence (hence faster bootstrapping).\n2The image is cropped before being subsampled to lessen the floor and ceiling which have little relevant depth information."
        },
        {
            "heading": "2.2 LOOP CLOSURE PREDICTION",
            "text": "Loop closure, like depth, is valuable for a navigating agent, since can be used for efficient exploration and spatial reasoning. To produce the training targets, we detect loop closures based on the similarity of local position information during an episode, which is obtained by integrating 2D velocity over time. Specifically, in a trajectory noted {p0, p1, . . . , pT }, where pt is the position of the agent at time t, we define a loop closure label lt that is equal to 1 if the position pt of the agent is close to the position pt\u2032 at an earlier time t\u2032. In order to avoid trivial loop closures on consecutive points of the trajectory, we add an extra condition on an intermediary position pt\u2032\u2032 being far from pt. Thresholds \u03b71 and \u03b72 provide these two limits. Learning to predict the binary loop label is done by minimizing the Bernoulli loss Ll between lt and the output of a single-layer output from the hidden representation ht of the last hidden layer of the model, followed by a sigmoid activation."
        },
        {
            "heading": "3 RELATED WORK",
            "text": "There is a rich literature on navigation, primarily in the robotics literature. However, here we focus on related work in deep RL. Deep Q-networks (DQN) have had breakthroughs in extremely challenging domains such as Atari (Mnih et al., 2015). Recent work has developed on-policy RL methods such as advantage actor-critic that use asynchronous training of multiple agents in parallel (Mnih et al., 2016). Recurrent networks have also been successfully incorporated to enable state disambiguation in partially observable environments (Koutnik et al., 2013; Hausknecht & Stone, 2015; Mnih et al., 2016; Narasimhan et al., 2015).\nDeep RL has recently been used in the navigation domain. Kulkarni et al. (2016) used a feedforward architecture to learn deep successor representations that enabled behavioral flexibility to reward changes in the MazeBase gridworld, and provided a means to detect bottlenecks in 3D VizDoom. Zhu et al. (2016) used a feedforward siamese actor-critic architecture incorporating a pretrained ResNet to support navigation to a target in a discretised 3D environment. Oh et al. (2016) investigated the performance of a variety of networks with external memory (Weston et al., 2014) on simple navigation tasks in the Minecraft 3D block world environment. Tessler et al. (2016) also used the Minecraft domain to show the benefit of combining feedforward deep-Q networks with the learning of resuable skill modules (cf options: (Sutton et al., 1999)) to transfer between navigation tasks. Tai & Liu (2016) trained a convnet DQN-based agent using depth channel inputs for obstacle avoidance in 3D environments. Barron et al. (2016) investigated how well a convnet can predict the depth channel from RGB in the Minecraft environment, but did not use depth for training the agent.\nAuxiliary tasks have often been used to facilitate representation learning (Suddarth & Kergosien, 1990). Recently, the incorporation of additional objectives, designed to augment representation learning through auxiliary reconstructive decoding pathways (Zhang et al., 2016; Rasmus et al., 2015; Zhao et al., 2015; Mirowski et al., 2010), has yielded benefits in large scale classification tasks. In deep RL settings, however, only two previous papers have examined the benefit of auxiliary tasks. Specifically, Li et al. (2016) consider a supervised loss for fitting a recurrent model on the hidden representations to predict the next observed state, in the context of imitation learning of sequences provided by experts, and Lample & Chaplot (2016) show that the performance of a DQN agent in a first-person shooter game in the VizDoom environment can be substantially enhanced by the addition of a supervised auxiliary task, whereby the convolutional network was trained on an enemy-detection task, with information about the presence of enemies, weapons, etc., provided by the game engine.\nIn contrast, our contribution addresses fundamental questions of how to learn an intrinsic representation of space, geometry, and movement while simultaneously maximising rewards through reinforcement learning. Our method is validated in challenging maze domains with random start and goal locations."
        },
        {
            "heading": "4 EXPERIMENTS",
            "text": "We consider a set of first-person 3D mazes called Labyrinth and based on OpenArena (see Fig. 1) that are visually rich, with additional observations available to the agent such as inertial information\nand local depth information.3 The action space is discrete, yet allows finegrained control, comprising 8 actions: the agent can rotate in small increments, accelerate forward or backward or sideways, or induce rotational acceleration while moving. Reward is achieved in these environments by reaching a goal from a random start location and orientation. If the goal is reached, the agent is respawned to a new start location and must return to the goal. The episode terminates when a fixed amount of time expires, affording the agent enough time to find the goal several times. There are sparse \u2018fruit\u2019 rewards which serve to encourage exploration. Apples are worth 1 point, strawberries 2 points and goals are 10 points. Videos of the agent solving the maze are linked in Appendix A.\nIn the static variant of the maze, the goal and fruit locations are fixed and only the agent\u2019s start location changes. In the dynamic (Random Goal) variant, the goal and fruits are randomly placed on every episode. Within an episode, the goal and apple locations stay fixed until the episode ends. This encourages an explore-exploit strategy, where the agent should initially explore the maze, then retain the goal location and quickly refind it after each respawn. For both variants (static and random goal) we consider a small and large map. The small mazes are 5\u00d7 10 and episodes last for 3600 timesteps, and the large mazes are 9\u00d7 15 with 10800 steps (see Figure 1). The RGB observation is 84\u00d7 84. The I-Maze environment (see Figure 1, right) is inspired by the classic T-maze used to investigate navigation in rodents (Olton et al., 1979): the layout remains fixed throughout, the agent spawns in the central corridor where there are apple rewards and has to locate the goal which is placed in the alcove of one of the four arms. Because the goal is hidden in the alcove, the optimal agent behaviour must rely on memory of the goal location in order to return to the goal using the most direct route. Goal location is constant within an episode but varies randomly across episodes.\nThe different agent architectures described in Section 2 are evaluated by training on the five mazes. Figure 3 shows learning curves (averaged over the 5 top performing agents). The agents are a feedforward model (FF A3C), a recurrent model (LSTM A3C), the stacked LSTM version with velocity, previous action and reward as input (Nav A3C), and Nav A3C with depth prediction from the convolution layer (Nav A3C+D1), Nav A3C with depth prediction from the last LSTM layer (Nav A3C+D2), Nav A3C with loop closure prediction (Nav A3C+L) as well as the Nav A3C with\n3The environments described in this paper will be publicly available before the conference.\nall auxiliary losses considered together (Nav A3C+D1D2L). In each case we ran 64 experiments with randomly sampled hyper-parameters (for ranges and details please see the appendix). The mean over the top 5 runs as well as the top 5 curves are plotted. Expert human scores, established by a professional game player, are compared to these results. The Nav A3C+D2 agents reach human-level performance on Static 1 and 2, and attain about 91% and 59% of human scores on Random Goal 1 and 2.\nIn Mnih et al. (2015) reward clipping is used to stabilize learning, technique which we employed in this work as well. Unfortunately, for these particular tasks, this yields slightly suboptimal policies because the agent does not distinguish apples (1 point) from goals (10 points). Removing the reward clipping results in unstable behaviour for the base A3C agent (see Appendix C). However it seems that the auxiliary signal from depth prediction mediates this problem to some extent, resulting in stable learning dynamics (e.g. Figure 3f, Nav A3C+D1 vs Nav A3C*+D1). We clearly indicate whether reward clipping is used by adding an asterisk to the agent name.\nFigure 3f also explores the difference between the two formulations of depth prediction, as a regression task or a classification task. We can see that the regression agent (Nav A3C*+D1[MSE]) performs worse than one that does classification (Nav A3C*+D1). This result extends to other maps, and we therefore only use the classification formulation in all our other results4. Also we see that predicting depth from the last LSTM layer (hence providing structure to the recurrent layer, not just the convolutional ones) performs better.\nWe note some particular results from these learning curves. In Figure 3 (a and b), consider the feedforward A3C model (red curve) versus the LSTM version (pink curve). Even though navigation seems to intrinsically require memory, as single observations could often be ambiguous, the feedforward model achieves competitive performance on static mazes. This suggest that there might be good strategies that do not involve temporal memory and give good results, namely a reactive policy held by the weights of the encoder, or learning a wall-following strategy. This motivates the dynamic environments that encourage the use of memory and more general navigation strategies.\nFigure 3 also shows the advantage of adding velocity, reward and action as an input, as well as the impact of using a two layer LSTM (orange curve vs red and pink). Though this agent (Nav A3C) is better than the simple architectures, it is still relatively slow to train on all of the mazes. We believe that this is mainly due to the slower, data inefficient learning that is generally seen in pure RL approaches. Supporting this we see that adding the auxiliary prediction targets of depth and loop closure (Nav A3C+D1D2L, black curve) speeds up learning dramatically on most of the mazes (see Table 1: AUC metric). It has the strongest effect on the static mazes because of the accelerated learning, but also gives a substantial and lasting performance increase on the random goal mazes.\nAlthough we place more value on the task performance than on the auxiliary losses, we report the results from the loop closure prediction task. Over 100 test episodes of 2250 steps each, within a large maze (random goal 2), the Nav A3C*+D1L agent demonstrated very successful loop detection, reaching an F-1 score of 0.83. A sample trajectory can be seen in Figure 4 (right).\n4An exception is the Nav A3C*+D1L agent on the I-maze (Figure 3c), which uses depth regression and reward clipping. While it does worse, we include it because some analysis is based on this agent."
        },
        {
            "heading": "5 ANALYSIS",
            "text": ""
        },
        {
            "heading": "5.1 POSITION DECODING",
            "text": "In order to evaluate the internal representation of location within the agent (either in the hidden units ht of the last LSTM, or, in the case of the FF A3C agent, in the features ft on the last layer of the conv-net), we train a position decoder that takes that representation as input, consisting of a linear classifier with multinomial probability distribution over the discretized maze locations. Small mazes (5\u00d7 10) have 50 locations, large mazes (9\u00d7 15) have 135 locations, and the I-maze has 77 locations. Note that we do not backpropagate the gradients from the position decoder through the rest of the network. The position decoder can only see the representation exposed by the model, not change it.\nAn example of position decoding by the Nav A3C+D2 agent is shown in Figure 6, where the initial uncertainty in position is improved to near perfect position prediction as more observations are acquired by the agent. We observe that position entropy spikes after a respawn, then decreases once the agent acquires certainty about its location. Additionally, videos of the agent\u2019s position decoding are linked in Appendix A. In these complex mazes, where localization is important for the purpose of reaching the goal, it seems that position accuracy and final score are correlated, as shown in Table 1. A pure feed-forward architecture still achieves 64.3% accuracy in a static maze with static goal, suggesting that the encoder memorizes the position in the weights and that this small maze is solvable by all the agents, with sufficient training time. In Random Goal 1, it is Nav A3C+D2 that achieves the best position decoding performance (85.5% accuracy), whereas the FF A3C and the LSTM A3C architectures are at approximately 50%.\nIn the I-maze, the opposite branches of the maze are nearly identical, with the exception of very sparse visual cues. We observe that once the goal is first found, the Nav A3C*+D1L agent is capable of directly returning to the correct branch in order to achieve the maximal score. However, the linear position decoder for this agent is only 68.5% accurate, whereas it is 87.8% in the plain LSTM A3C agent. We hypothesize that the symmetry of the I-maze will induce a symmetric policy that need not be sensitive to the exact position of the agent (see analysis below).\nA desired property of navigation agents in our Random Goal tasks is to be able to first find the goal, and reliably return to the goal via an efficient route after subsequent re-spawns. The latency column in Table 1 shows that the Nav A3C+D2 agents achieve the lowest latency to goal once the goal has been discovered (the first number shows the time in seconds to find the goal the first time, and the second number is the average time for subsequent finds). Figure 5 shows clearly how the agent finds the goal, and directly returns to that goal for the rest of the episode. For Random Goal 2, none of the agents achieve lower latency after initial goal acquisition; this is presumably due to the larger, more challenging environment."
        },
        {
            "heading": "5.2 STACKED LSTM GOAL ANALYSIS",
            "text": "Figure 7(a) shows shows the trajectories traversed by an agent for each of the four goal locations. After an initial exploratory phase to find the goal, the agent consistently returns to the goal location. We visualize the agent\u2019s policy by applying tSNE dimension reduction (Maaten & Hinton, 2008) to the cell activations at each step of the agent for each of the four goal locations. Whilst clusters corresponding to each of the four goal locations are clearly distinct in the LSTM A3C agent, there are 2 main clusters in the Nav A3C agent \u2013 with trajectories to diagonally opposite arms of the maze represented similarly. Given that the action sequence to opposite arms is equivalent (e.g. straight, turn left twice for top left and bottom right goal locations), this suggests that the Nav A3C policy-dictating LSTM maintains an efficient representation of 2 sub-policies (i.e. rather than 4 independent policies) \u2013 with critical information about the currently relevant goal provided by the additional LSTM."
        },
        {
            "heading": "6 CONCLUSION",
            "text": "We proposed a deep RL method, augmented with memory and auxiliary learning targets, for training agents to navigate within large and visually rich environments that include frequently changing start and goal locations. Our results and analysis highlight the utility of un/self-supervised auxiliary objectives, namely depth prediction and loop closure, in providing richer training signals that bootstrap learning and enhance data efficiency. Further, we examine the behavior of trained agents, their ability to localise, and their network activity dynamics, in order to analyse their navigational abilities.\nOur approach of augmenting deep RL with auxiliary objectives allows end-end learning and may encourage the development of more general navigation strategies. Notably, our work with auxiliary losses is related to (Jaderberg et al., 2017) which independently looks at data efficiency when exploiting auxiliary losses. One difference between the two works is that our auxiliary losses are online (for the current frame) and do not rely on any form of reply. Also the explored losses are very\ndifferent in nature. Finally our focus is on the navigation domain and understanding if navigation emerges as a bi-product of solving an RL problem, while Jaderberg et al. (2017) is concerned with data efficiency for any RL-task.\nWhilst our best performing agents are relatively successful at navigation, their abilities would be stretched if larger demands were placed on rapid memory (e.g. in procedurally generated mazes), due to the limited capacity of the stacked LSTM in this regard. It will be important for future work to combine visually complex environments with architectures that make use of external memory (Graves et al., 2016; Weston et al., 2014; Olton et al., 1979) to enhance the navigational abilities of agents."
        },
        {
            "heading": "ACKNOWLEDGEMENTS",
            "text": "We would like to thank Thomas Degris and Joseph Modayil for useful discussions, Charles Beattie, Julian Schrittwieser, Marcus Wainwright, and Stig Petersen for environment design and development, and Amir Sadik and Sarah York for expert human game testing."
        },
        {
            "heading": "B NETWORK ARCHITECTURE AND TRAINING",
            "text": "B.1 THE ONLINE MULTI-LEARNER ALGORITHM FOR MULTI-TASK LEARNING\nWe introduce a class of neural network-based agents that have modular structures and that are trained on multiple tasks, with inputs coming from different modalities (vision, depth, past rewards and past actions). Implementing our agent architecture is simplified by its modular nature. Essentially, we construct multiple networks, one per task, using shared building blocks, and optimise these networks jointly. Some modules, such as the conv-net used for perceiving visual inputs, or the LSTMs used for learning the navigation policy, are shared among multiple tasks, while other modules, such as depth predictor gd or loop closure predictor gl, are task-specific. The navigation network that outputs the policy and the value function is trained using reinforcement learning, while the depth prediction and loop closure prediction networks are trained using self-supervised learning.\nWithin each thread of the asynchronous training environment, the agent plays on its own episode of the game environment, and therefore sees observation and reward pairs {(st, rt)} and takes actions that are different from those experienced by agents from the other, parallel threads. Within a thread, the multiple tasks (navigation, depth and loop closure prediction) can be trained at their own schedule, and they add gradients to the shared parameter vector as they arrive. Within each thread, we use a flag-based system to subordinate gradient updates to the A3C reinforcement learning procedure.\nB.2 NETWORK AND TRAINING DETAILS\nFor all the experiments we use an encoder model with 2 convolutional layers followed by a fully connected layer, or recurrent layer(s), from which we predict the policy and value function. The architecture is similar to the one in (Mnih et al., 2016). The convolutional layers are as follows. The first convolutional layer has a kernel of size 8x8 and a stride of 4x4, and 16 feature maps. The second layer has a kernel of size 4x4 and a stride of 2x2, and 32 feature maps. The fully connected layer, in the FF A3C architecture in Figure 2a has 256 hidden units (and outputs visual features ft). The LSTM in the LSTM A3C architecture has 256 hidden units (and outputs LSTM hidden activations ht). The LSTMs in Figure 2c and 2d are fed extra inputs (past reward rt\u22121, previous action at expressed as a one-hot vector of dimension 8 and agent-relative lateral and rotational velocity vt encoded by a 6-dimensional vector), which are all concatenated to vector ft. The Nav A3C architectures (Figure 2c,d) have a first LSTM with 64 or 128 hiddens and a second LSTM with 256 hiddens. The depth predictor modules gd, g\u2032d and the loop closure detection module gl are all single-layer MLPs with 128 hidden units. The depth MLPs are followed by 64 independent 8-dimensional softmax outputs (one per depth pixel). The loop closure MLP is followed by a 2-dimensional softmax output. We illustrate on Figure 8 the architecture of the Nav A3C+D+L+Dr agent.\nDepth is taken as the Z-buffer from the Labyrinth environment (with values between 0 and 255), divided by 255 and taken to power 10 to spread the values in interval [0, 1]. We empirically decided to use the following quantization: {0, 0.05, 0.175, 0.3, 0.425, 0.55, 0.675, 0.8, 1} to ensure a uniform\n5Video of the Nav A3C*+D1L agent on the I-maze: https://youtu.be/PS4iJ7Hk_BU 6Video of the Nav A3C*+D1L agent on static maze 1: https://youtu.be/-HsjQoIou_c 7Video of the Nav A3C*+D1L agent on static maze 2: https://youtu.be/kH1AvRAYkbI 8Video of the Nav A3C*+D1L agent on random goal maze 1: https://youtu.be/5IBT2UADJY0 9Video of the Nav A3C*+D1L agent on random goal maze 2: https://youtu.be/e10mXgBG9yo\nbinning across 8 classes. The previous version of the agent had a single depth prediction MLP gd for regressing 8\u00d7 16 = 128 depth pixels from the convnet outputs ft. The parameters of each of the modules point to a subset of a common vector of parameters. We optimise these parameters using an asynchronous version of RMSProp (Tieleman & Hinton, 2012). (Nair et al., 2015) was a recent example of asynchronous and parallel gradient updates in deep reinforcement learning; in our case, we focus on the specific Asynchronous Advantage Actor Critic (A3C) reinforcement learning procedure in (Mnih et al., 2016).\nLearning follows closely the paradigm described in (Mnih et al., 2016). We use 16 workers and the same RMSProp algorithm without momentum or centering of the variance. Gradients are computed over non-overlaping chunks of the episode. The score for each point of a training curve is the average over all the episodes the model gets to finish in 5e4 environment steps.\nThe whole experiments are run for a maximum of 1e8 environment step. The agent has an action repeat of 4 as in (Mnih et al., 2016), which means that for 4 consecutive steps the agent will use the same action picked at the beginning of the series. For this reason through out the paper we actually report results in terms of agent perceived steps rather than environment steps. That is, the maximal number of agent perceived step that we do for any particular run is 2.5e7.\nIn our grid we sample hyper-parameters from categorical distributions:\n\u2022 Learning rate was sampled from [10\u22124, 5 \u00b7 10\u22124]. \u2022 Strength of the entropy regularization from [10\u22124, 10\u22123]. \u2022 Rewards were not scaled and not clipped in the new set of experiments. In our previous set\nof experiments, rewards were scaled by a factor from {0.3, 0.5} and clipped to 1 prior to back-propagation in the Advantage Actor-Critic algorithm. \u2022 Gradients are computed over non-overlaping chunks of 50 or 75 steps of the episode. In our\nprevious set of experiments, we used chunks of 100 steps.\nThe auxiliary tasks, when used, have hyperparameters sampled from:\n\u2022 Coefficient \u03b2d of the depth prediction loss from convnet features Ld sampled from {3.33, 10, 33}. \u2022 Coefficient \u03b2\u2032d of the depth prediction loss from LSTM hiddens Ld\u2032 sampled from {1, 3.33, 10}. \u2022 Coefficient \u03b2l of the loop closure prediction loss Ll sampled from {1, 3.33, 10}.\nLoop closure uses the following thresholds: maximum distance for position similarity \u03b71 = 1 square and minimum distance for removing trivial loop-closures \u03b72 = 2 squares."
        },
        {
            "heading": "C ADDITIONAL RESULTS",
            "text": "Figure 9 shows additional learning curves. In particular in the left plot we show that the baselines (A3C FF and A3C LSTM) as well as Nav A3C agent without auxiliary losses, perform worse without reward clipping than with reward clipping. It seems that removing reward clipping makes learning unstable in absence of auxiliary tasks. For this particular reason we chose to show the baselines with reward clipping in our main results.\nThe right subplot of Figure 9 compares having depth as an input versus as a target. Note that using RGBD inputs to the Nav A3C agent performs even worse than predicting depth as a regression task, and in general is worse than predicting depth as a classification task."
        }
    ],
    "year": 2021
}