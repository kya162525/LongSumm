{
    "abstractText": "Deep neural networks have been shown to be very successful at learning feature hierarchies in supervised learning tasks. Generative models, on the other hand, have benefited less from hierarchical models with multiple layers of latent variables. In this paper, we prove that hierarchical latent variable models do not take advantage of the hierarchical structure when trained with existing variational methods, and provide some limitations on the kind of features existing models can learn. Finally we propose an alternative architecture that do not suffer from these limitations. Our model is able to learn highly interpretable and disentangled hierarchical features on several natural image datasets with no task specific regularization or prior knowledge.",
    "authors": [
        {
            "affiliations": [],
            "name": "Shengjia Zhao"
        },
        {
            "affiliations": [],
            "name": "Jiaming Song"
        },
        {
            "affiliations": [],
            "name": "Stefano Ermon"
        }
    ],
    "id": "SP:657fca895e9217a0306739f8f58332c224b8a82e",
    "references": [
        {
            "authors": [
                "Bachman",
                "Philip"
            ],
            "title": "An architecture for deep, hierarchical generative models",
            "venue": "In Advances In Neural Information Processing Systems,",
            "year": 2016
        },
        {
            "authors": [
                "Bengio",
                "Yoshua"
            ],
            "title": "Learning deep architectures for ai",
            "venue": "Found. Trends Mach. Learn.,",
            "year": 2009
        },
        {
            "authors": [
                "X. Chen",
                "Y. Duan",
                "R. Houthooft",
                "J. Schulman",
                "I. Sutskever",
                "P. Abbeel"
            ],
            "title": "Infogan: Interpretable representation learning by information maximizing generative adversarial nets",
            "venue": "In Advances in Neural Information Processing Systems,",
            "year": 2016
        },
        {
            "authors": [
                "E.L. Denton",
                "S. Chintala",
                "R Fergus"
            ],
            "title": "Deep generative image models using a laplacian pyramid of adversarial networks",
            "venue": "In Advances in neural information processing systems,",
            "year": 2015
        },
        {
            "authors": [
                "L. Dinh",
                "D. Krueger",
                "Y. Bengio"
            ],
            "title": "Nice: Non-linear independent components estimation",
            "venue": "arXiv preprint arXiv:1410.8516,",
            "year": 2014
        },
        {
            "authors": [
                "Donahue",
                "Jeff",
                "Kr\u00e4henb\u00fchl",
                "Philipp",
                "Darrell",
                "Trevor"
            ],
            "title": "Adversarial feature learning",
            "venue": "arXiv preprint arXiv:1605.09782,",
            "year": 2016
        },
        {
            "authors": [
                "Dumoulin",
                "Vincent",
                "Belghazi",
                "Ishmael",
                "Poole",
                "Ben",
                "Lamb",
                "Alex",
                "Arjovsky",
                "Martin",
                "Mastropietro",
                "Olivier",
                "Courville",
                "Aaron"
            ],
            "title": "Adversarially learned inference",
            "venue": "arXiv preprint arXiv:1606.00704,",
            "year": 2016
        },
        {
            "authors": [
                "Gulrajani",
                "Ishaan",
                "Kumar",
                "Kundan",
                "Ahmed",
                "Faruk",
                "Taiga",
                "Adrien Ali",
                "Visin",
                "Francesco",
                "V\u00e1zquez",
                "David",
                "Courville",
                "Aaron C"
            ],
            "title": "Pixelvae: A latent variable model for natural images",
            "venue": "CoRR, abs/1611.05013,",
            "year": 2016
        },
        {
            "authors": [
                "D. Jimenez Rezende",
                "S. Mohamed",
                "D. Wierstra"
            ],
            "title": "Stochastic Backpropagation and Approximate Inference in Deep Generative Models",
            "venue": "ArXiv e-prints,",
            "year": 2014
        },
        {
            "authors": [
                "C. Kaae S\u00f8nderby",
                "T. Raiko",
                "L. Maal\u00f8e",
                "S. Kaae S\u00f8nderby",
                "O. Winther"
            ],
            "title": "Ladder Variational Autoencoders",
            "venue": "ArXiv e-prints,",
            "year": 2016
        },
        {
            "authors": [
                "Kingma",
                "D. P",
                "M. Welling"
            ],
            "title": "Auto-Encoding Variational Bayes",
            "venue": "ArXiv e-prints,",
            "year": 2013
        },
        {
            "authors": [
                "Kingma",
                "Diederik",
                "Ba",
                "Jimmy"
            ],
            "title": "Adam: A method for stochastic optimization",
            "venue": "arXiv preprint arXiv:1412.6980,",
            "year": 2014
        },
        {
            "authors": [
                "Kingma",
                "Diederik P",
                "Salimans",
                "Tim",
                "Welling",
                "Max"
            ],
            "title": "Improving variational inference with inverse autoregressive flow",
            "venue": "arXiv preprint arXiv:1606.04934,",
            "year": 2016
        },
        {
            "authors": [
                "C. Li",
                "J. Zhu",
                "B. Zhang"
            ],
            "title": "Learning to generate with memory",
            "venue": "arXiv preprint arXiv:1602.07416,",
            "year": 2016
        },
        {
            "authors": [
                "Liu",
                "Ziwei",
                "Luo",
                "Ping",
                "Wang",
                "Xiaogang",
                "Tang",
                "Xiaoou"
            ],
            "title": "Deep learning face attributes in the wild",
            "venue": "In Proceedings of International Conference on Computer Vision (ICCV),",
            "year": 2015
        },
        {
            "authors": [
                "Netzer",
                "Yuval",
                "Wang",
                "Tao",
                "Coates",
                "Adam",
                "Bissacco",
                "Alessandro",
                "Wu",
                "Bo",
                "Ng",
                "Andrew Y"
            ],
            "title": "Reading digits in natural images with unsupervised feature learning",
            "venue": "In NIPS workshop on deep learning and unsupervised feature learning,",
            "year": 2011
        },
        {
            "authors": [
                "Pezeshki",
                "Mohammad",
                "Fan",
                "Linxi",
                "Brakel",
                "Philemon",
                "Courville",
                "Aaron",
                "Bengio",
                "Yoshua"
            ],
            "title": "Deconstructing the ladder network architecture",
            "venue": "arXiv preprint arXiv:1511.06430,",
            "year": 2015
        },
        {
            "authors": [
                "Radford",
                "Alec",
                "Metz",
                "Luke",
                "Chintala",
                "Soumith"
            ],
            "title": "Unsupervised representation learning with deep convolutional generative adversarial networks",
            "venue": "arXiv preprint arXiv:1511.06434,",
            "year": 2015
        },
        {
            "authors": [
                "D.J. Rezende",
                "S. Mohamed"
            ],
            "title": "Variational inference with normalizing flows",
            "venue": "arXiv preprint arXiv:1505.05770,",
            "year": 2015
        },
        {
            "authors": [
                "T. Salimans",
                "D.P. Kingma",
                "M Welling"
            ],
            "title": "Markov chain monte carlo and variational inference: Bridging the gap",
            "venue": "In International Conference on Machine Learning,",
            "year": 2015
        },
        {
            "authors": [
                "J. Sohl-Dickstein",
                "E.A. Weiss",
                "N. Maheswaranathan",
                "S. Ganguli"
            ],
            "title": "Deep unsupervised learning using nonequilibrium thermodynamics",
            "venue": "arXiv preprint arXiv:1503.03585,",
            "year": 2015
        },
        {
            "authors": [
                "C.K. S\u00f8nderby",
                "T. Raiko",
                "L. Maal\u00f8e",
                "S.K. S\u00f8nderby",
                "O. Winther"
            ],
            "title": "Ladder variational autoencoders",
            "venue": "In Advances In Neural Information Processing Systems,",
            "year": 2016
        },
        {
            "authors": [
                "Theis",
                "Lucas",
                "Oord",
                "A\u00e4ron van den",
                "Bethge",
                "Matthias"
            ],
            "title": "A note on the evaluation of generative models",
            "venue": "arXiv preprint arXiv:1511.01844,",
            "year": 2015
        },
        {
            "authors": [
                "Valpola",
                "Harri"
            ],
            "title": "From neural pca to deep unsupervised learning",
            "venue": "Adv. in Independent Component Analysis and Learning Machines,",
            "year": 2015
        },
        {
            "authors": [
                "van den Oord",
                "Aaron",
                "Kalchbrenner",
                "Nal",
                "Espeholt",
                "Lasse",
                "Vinyals",
                "Oriol",
                "Graves",
                "Alex"
            ],
            "title": "Conditional image generation with pixelcnn decoders",
            "venue": "In Advances in Neural Information Processing Systems,",
            "year": 2016
        },
        {
            "authors": [
                "Zeiler",
                "Matthew D",
                "Fergus",
                "Rob"
            ],
            "title": "Visualizing and understanding convolutional networks",
            "venue": "vision\u2013ECCV",
            "year": 2014
        },
        {
            "authors": [
                "S. Zhao",
                "J. Song",
                "S. Ermon"
            ],
            "title": "Towards Deeper Understanding of Variational Autoencoding Models",
            "venue": "ArXiv e-prints,",
            "year": 2017
        }
    ],
    "sections": [
        {
            "heading": "1. Introduction",
            "text": "A key property of deep feed-forward networks is that they tend to learn learn increasingly abstract and invariant representations at higher levels in the hierarchy (Bengio, 2009; Zeiler & Fergus, 2014) In the context of image data, low levels may learn features corresponding to edges or basic shapes, while higher levels learn more abstract features, such as object detectors (Zeiler & Fergus, 2014).\nGenerative models with a hierarchical structure, where there are multiple layers of latent variables, have been less successful compared to their supervised counterparts (S\u00f8nderby et al., 2016). In fact, the most successful generative models often use only a single layer of latent variables (Radford et al., 2015; van den Oord et al., 2016), and those that use multiple layers only show modest performance increases in quantitative metrics such as loglikelihood (S\u00f8nderby et al., 2016; Bachman, 2016). Because of the difficulties in evaluating generative models\n1Stanford University. Correspondence to: Shengjia Zhao <zhaosj12@stanford.edu>, Jiaming Song <tsong@stanford.edu>.\nProceedings of the 34 th International Conference on Machine Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by the author(s).\ninsu cient for generation\nsu cient for classi cation\nFigure 1. Left: Body parts feature detectors only carry a small amount of information about an underlying image, yet, it is sufficient for a confident classification as a face. Right: if a hierarchical generative model attempts to reconstruct an image based on these high-level features, it could generate inconsistent images, even when each part can be perfectly generated. Even though this \u201dface\u201d is clearly absurd, Google cloud platform classification API can identify with 93% confidence that this is a face.\n(Theis et al., 2015), and the fact that adding network layers increases the number of parameters, it is not always clear whether the improvements truly come from the choice of a hierarchical architecture. Furthermore, the capability of learning a hierarchy of increasingly complex and abstract features has only been demonstrated to a limited extent, with feature hierarchies that are not nearly as rich as the ones learned by feed-forward networks (Gulrajani et al., 2016).\nPart of the problem is inherent and unavoidable for any generative model. The heart of the matter is that while highly invariant and local features are often sufficient for classification, generative modeling requires preservation of details (as illustrated in Figure 1). In fact, most latent features in a generative model of images cannot even demonstrate scale and translation invariance. The size and location of a sub-part often has to be dependent on the other sub-parts. For example, an eye should only be generated with the same size as the other eye, at symmetric locations with respect to the center of the face, with appropriate distance between them. The inductive biases that are directly encoded into the architecture of convolutional networks is\nar X\niv :1\n70 2.\n08 39\n6v 2\n[ cs\n.L G\n] 9\nJ un\n2 01\n7\nnot sufficient in the context of generative models.\nOn the other hand, other problems are associated with specific models or design choices, and may be avoided with deeper understanding and careful design. The goal of this paper is to provide a deeper understanding of the design and performance of common hierarchical latent variable models. We focus on variational models, though most of the conclusions can be generalized to adversarially trained models that support inference (Dumoulin et al., 2016; Donahue et al., 2016). In particular, we study two classes of models with a hierarchical structure:\n1) Stacked hierarchy: The first type we study is characterized by recursively stacking generative models on top of each other. Most existing models (S\u00f8nderby et al., 2016; Gulrajani et al., 2016; Bachman, 2016; Kingma et al., 2016), belong to this class. We show that these models have two limitations. First, we show that if these models can be trained to optimality, then the bottom layer alone contains enough information to reconstruct the data distribution, and the layers above the first one can be ignored. This result holds under fairly general conditions, and does not depend on the specific family of distributions used to define the hierarchy (e.g., Gaussian). Second, we argue that many of the building blocks commonly used to construct hierarchical generative models are unlikely to help us learn disentangled features.\n2) Architectural hierarchy: Motivated by these limitations, we turn our attention to single layer latent variable models. We propose an alternative way to learn disentangled hierarchical features by crafting a network architecture that prefers to place high-level features on certain parts of the latent code, and low-level features in others. We show that this approach, called Variational Ladder Autoencoder, allows us to learn very rich feature hierarchies on natural image datasets such as MNIST, SVHN (Netzer et al., 2011) and CelebA (Liu et al., 2015); in contrast, generative models with a stacked hierarchical structure fail to learn such features."
        },
        {
            "heading": "2. Problem Setting",
            "text": "We consider a family of latent variable models specified by a joint probability distribution p\u03b8(x, z) over a set of observed variables x and latent variables z. The family of models is assumed to be parametrized by \u03b8. Let p\u03b8(x) denote the marginal distribution of x. We wish to maximize the marginal log-likelihood p(x) over a dataset X = {x(1), . . . ,x(N)} drawn from some unknown underlying distribution pdata(x). Formally we would like to maximize\nlog p\u03b8(X) = N\u2211 n=1 log p\u03b8(x (i)) (1)\nwhich is non-convex and often intractable for complex generative models, as it involves marginalization over the latent variables z.\nWe are especially interested in unsupervised feature learning applications, where by maximizing (1) we hope to discover a meaningful representation for the data x in terms of latent features given by p\u03b8(z|x)."
        },
        {
            "heading": "2.1. Variational Autoencoders",
            "text": "A popular solution (Kingma & Welling, 2013; Jimenez Rezende et al., 2014) for optimizing the intractable marginal likelihood (1) is to optimize the evidence lower bound (ELBO) by introducing an inference model q\u03c6(z|x) parametrized by \u03c6 1:\nlog p(x) \u2265 Eq(z|x)[log p(x, z)\u2212 log q(z|x)] = Eq(z|x)[log p(x|z)]\u2212KL(q(z|x)\u2016p(z)) = L(x; \u03b8, \u03c6) (2)\nwhere KL is the Kullback-Leibler divergence."
        },
        {
            "heading": "2.2. Hierarchical Variational Autoencoders",
            "text": "A hierarchical VAE (HVAE) can be thought of as a series of VAEs stacked on top of each other. It has the following hierarchy of latent variables z = {z1, . . . , zL}, in addition to the observed variables x. We use the notation convention that z1 represents the lowest layer closest to x and zL the top layer. Using chain rule, the joint distribution p(x, z1, . . . , zL) can be factored as follows\np(x, z1, . . . , zL) = p(x|z>0) L\u22121\u220f `=1 p(z`|z>`)p(zL) (3)\nwhere z>` indicates (z`+1, \u00b7 \u00b7 \u00b7 , zL), and z>0 = z = (z1, . . . , zL). Note that this factorization via chain-rule is fully general. In particular it accounts for recent models that use shortcut connections (Kingma et al., 2016; Bachman, 2016), where each hidden layer z` directly depends on all layers above it (z>`). We shall refer to this fully general formulation as autoregressive HVAE.\nSeveral models assume a Markov independence structure on the hidden variables, leading to the following simpler factorization (Jimenez Rezende et al., 2014; Gulrajani et al., 2016; Kaae S\u00f8nderby et al., 2016)\np(x, z) = p(x|z`) L\u22121\u220f l=1 p(z`|z`+1)p(zL) (4)\n1We omit the dependency on \u03b8 and \u03c6 for the remainder of the paper.\nWe refer to this common but more restrictive formulation as Markov HVAE.\nFor the inference distribution q(z|x) we do not assume any factorized structure to account for complex inference techniques used in recent work (Kaae S\u00f8nderby et al., 2016; Bachman, 2016). We also denote q(x, z) = pdata(x)q(z|x).\nBoth p(x|z) and q(z|x) are jointly optimized, as before in Equation (2), to maximize the ELBO objective\nLELBO = Epdata(x)Eq(z|x)[log p(x|z)]\u2212 Epdata(x)[KL(q(z|x)||p(z))]\n= L\u2211 l=0 Eq(z,x)[log p(zl|z>l)] +H(q(z|x)) (5)\nwhere we define z0 \u2261 x, zL+1 \u2261 0, and H the entropy of a distribution, and expectation over pdata(x) is estimated by the samples in the dataset. This can be interpreted as stacking VAEs on top of each other."
        },
        {
            "heading": "3. Limitations of Hierarchical VAEs",
            "text": ""
        },
        {
            "heading": "3.1. Representational Efficiency",
            "text": "One of the main reasons deep hierarchical networks are widely used as function approximators is their representational power. It is well known that certain functions can be represented much more compactly with deep networks, requiring exponentially less parameters compared to shallow networks (Bengio et al., 2009). However, we show that under ideal optimization of LELBO, HVAE models do not lead to improved representational power. This is because for a well trained HVAE, a Gibbs chain on the bottom layer, which is a single layer model, can be used to recover pdata(x) exactly.\nWe first show this formally for Markov HVAE with the following proposition\nProposition 1. LELBO in Eq.(5) is globally maximized as a function of q(z|x) and p(x|z) when LELBO = \u2212H(pdata(x)). If LELBO is globally maximized for a Markov HVAE, the following Gibbs sampling chain converges to pdata(x) if it is ergodic\nz (t) 1 \u223c q(z1|x(t))\nx(t+1) \u223c p(x|z(t)1 ) (6)\nProof of Proposition 1. We notice that LELBO = Epdata(x)q(z|x) [ log p(x, z)\nq(z|x) ] = Epdata(x)q(z|x) [ log p(z|x) q(z|x) ] + Epdata(x)[log p(x)]\n= \u2212Epdata(x)[KL(q(z|x)||p(z|x))] \u2212KL(pdata(x)||p(x))\u2212H(pdata(x))\nBy non-negativity of KL-divergence, and the fact that KL divergence is zero if an only if the two distributions are identical, it can be seen that this is uniquely optimized when p(x) = \u222b z p(x, z)dz = pdata(x) and \u2200x, q(z|x) = p(z|x) and the optimum is\nL\u2217ELBO = \u2212H(pdata(x))\nThis also implies that \u2200x\nq(x|z1) = q(z1|x)pdata(x)\nq(z1) = p(x|z1) (7)\nBecause the following Gibbs chain converges to pdata(x) when it is ergodic\nz (t) 1 \u223c q(z1|x(t))\nx(t+1) \u223c q(x|z(t)1 )\nWe can replace q(x|z(t)1 ) with p(x|z (t) 1 ) using (7) and the chain still converges to pdata(x).\nTherefore under the assumptions of Proposition 1 we can sample from pdata(x) without using the latent code (z2, \u00b7 \u00b7 \u00b7 , zL) at all. Hence, optimization of the LELBO objective and efficient representation are conflicting, in the sense that optimality implies some level of redundancy in the representation.\nWe demonstrate that this phenomenon occurs in practice, even though the conditions of Proposition 1 might not be met exactly. We train a factorized three layer VAE in Equation (4) on MNIST by optimizing the ELBO criteria Equation (5). We use a model where each conditional distribution is factorized Gaussian p(z`|z`+1) = N (\u00b5`(z`+1), \u03c3`(z`+1)) where \u00b5` and \u03c3` are deep networks. We compare: the samples generated by the Gibbs chain in Equation (6) with samples generated by ancestral sampling with the entire model in Figure 2. We observe that the Gibbs chain generates samples (left panel) with similar visual quality as ancestral sampling with the entire model (right panel), even though the Gibbs chain only used the bottom layer of the model.\nThis problem can be generalized to autoregressive HVAEs. One can sample from pdata(x) without using p(z`|z>`), 1 \u2264 ` < L at all. We prove this in the Appendix."
        },
        {
            "heading": "3.2. Feature learning",
            "text": "Another significant advantage of hierarchical models for supervised learning is that they learn rich and disentangled hierarchies of features. This has been demonstrated for example using various visualization techniques (Zeiler & Fergus, 2014). However, we show in this section that typical HVAEs do not enjoy this property.\nRecall that we think of p(z|x) as a (probabilistic) feature detector, and q(z|x) as an approximation to p(z|x). It might therefore be natural to think that q might learn hierarchical features similarly to a feed-forward network x \u2192 z` \u2192 \u00b7 \u00b7 \u00b7 \u2192 zL, where higher layers correspond to higher level features that become increasingly abstract and invariant to nuisance variations. However if q(z>`|z`) maps low level features to high level features, then the reverse mapping q(z`|z>`) maps high level features to likely low level sub-features. For example, if zL correspond to object classes, then q(zL\u22121|zL) could represent the distribution over object subparts given the object class.\nSuppose we train LELBO in Equation (5) to optimality, we would have\np(x) = pdata(x), q(z|x) = p(z|x)\nRecall that\nq(x, z) := pdata(x)q(z|x) p(x, z) := p(z)p(x|z) = p(x)p(z|x)\nComparing the two we see that\np(x, z) = q(x, z)\nif the joint distributions are identical, then any conditional distribution would also be identical, which implies that for any z>`, q(z`|z>`) = p(z`|z>`).\nFor the majority of models the conditional distributions p(z`|z>`) belong to a very simple distribution family such as parameterized Gaussians (Kingma & Welling, 2013) (Jimenez Rezende et al., 2014) (Kaae S\u00f8nderby et al., 2016) (Kingma et al., 2016). Therefore for a perfectly optimized LELBO in the Gaussian case, the only type of feature hierarchy we can hope to learn is one under which q(z`|z>`) is also Gaussian. This limits the hierarchical representation we can learn. In fact, the hierarchies we observe for feed-forward models (Zeiler & Fergus, 2014) require complex multimodal distributions to be captured. For example, the distribution over object subparts for an object category is unlikely to be unimodal and cannot be well approximated with a Gaussian distribution.\nMore generally, as shown in (Zhao et al., 2017), even when LELBO is not globally optimized, optimizing LELBO encourages q(z`|z>`) and p(z`|z>`) to match. Because\np(z`|z>`) belong to some distribution family, such as Gaussians. This encourages q(z`|z>`) to belong to that distribution family as well.\nWe experimentally demonstrate these intuitions in Figure 3, where we train a three layer Markov HVAE with factorized Gaussian conditionals p(z`|z`+1) on MNIST and SVHN. Details about the experimental setup are explained in the Appendix. As suggested in (Kingma & Welling, 2013), we reparameterize the stochasticity in p(z`|z`+1) using a separate noise variable ` \u223c N (0, I), and implicitly rewrite the original conditional distribution as\nz` = \u00b5`(z`+1) + \u03c3`(z`+1) `\nwhere indicates element-wise product. We fix the value of k to a random sample from N (0, I) at all layers k = 1, \u00b7 \u00b7 \u00b7 , `\u2212 1, `+ 1, \u00b7 \u00b7 \u00b7 , L except for one, and observe the variations in x generated by randomly sampling `. We observe in Figure 3 that only very minor variations correspond to lower layers (Left and center panels), and almost all the variation is represented by the top layer (Right panel). More importantly, no notable hierarchical relationship between features is observed."
        },
        {
            "heading": "4. Variational Ladder Autoencoders",
            "text": "Given the limitations of hierarchical architectures described in the previous section, we focus on an alternative approach to learn a hierarchy of disentangled features.\nOur approach is to define a simple distribution with no hierarchical structure over the latent variables p(z) = p(z1, \u00b7 \u00b7 \u00b7 , zL). For example, the joint distribution p(z) can be a white Gaussian. Instead we encourage the latent code z1, \u00b7 \u00b7 \u00b7 , zL to learn features with different levels of abstraction by carefully choosing the mappings p(x|z) and q(z|x) between input x and latent code z. Our approach is based on the following intuition:\nAssumption: If zi is more abstract than zj , then the inference mapping q(zi|x) and generative mapping when other layers are fixed p(x|zi, z\u00aci = z0\u00aci) requires a more expressive network to capture.\nThis informal assumption suggests that we should use neural networks of different level of expressiveness to generate the corresponding features; the more abstract features require more expressive networks, and vice versa. We loosely quantify expressiveness with depth of the network. Based on these assumptions we are able to design an architecture that disentangles hierarchical features for many natural image datasets."
        },
        {
            "heading": "4.1. Model Definition",
            "text": "We decompose the latent code into subparts z = {z1, z2, . . .}, where z1 relates to x with a shallow network, and increase network depth up to zL, which relates to x with a deep network. In particular, we share parameters with a ladder-like architecture (Valpola, 2015; Pezeshki et al., 2015). Because of this similarity we denote this architecture as Variational Ladder Autoencoder (VLAE). Formally, our model, shown in Figure 4 is defined as follows\n1) Generative Network: p(z) = p(z1, \u00b7 \u00b7 \u00b7 , zL) is a simple prior on all latent variables. We choose it as a standard Gaussian N (0, I). The conditional distribution\np(x|z1, z2, . . . , zL) is defined implicitly as:\nz\u0303L = fL(zL) (8) z\u0303` = f`(z\u0303`+1, z`) ` = 1, \u00b7 \u00b7 \u00b7 , L\u2212 1 (9) x \u223c r(x; f0(z\u03031)) (10)\nwhere f` is parametrized as a neural network, and z\u0303` is an auxiliary variable we use to simplify the notation. r is a distribution family parameterized by f0(z\u03031). In our experiments we use the following choice for f`:\nz\u0303` = u`([z\u0303`+1;v`(z`)]) (11)\nwhere [\u00b7; \u00b7] denotes concatenation of two vectors, and v`,u` are neural networks. We choose r as a fixed variance factored Gaussian with mean given by \u00b5r = f0(z\u03031).\n2) Inference Network: For the inference network, we choose q(z|x) as\nh` = g`(h`\u22121) (12) z` \u223c N (\u00b5`(h`),\u03c3`(h`)) (13)\nwhere ` = 1, \u00b7 \u00b7 \u00b7 , L, g`, \u00b5`, \u03c3` are neural networks, and h0 \u2261 x.\n3) Learning: For learning we use the ELBO criteria as in Equ.(2):\nL(x) = Eq(z|x)[log p(x|z)]\u2212KL(q(z|x)\u2016p(z)) (14)\nwhere p(z) = N (0, I) denotes the prior for z. This is tractable if r has tractable log likelihood, i.e. when r is a Gaussian.\nThis is essentially the inference and learning framework for a one-layer VAE; the hierarchy is only implicitly defined by the network architecture, therefore we call this model flat hierarchy. Motivated by our earlier theoretical results, we do not use additional layers of latent variables."
        },
        {
            "heading": "4.2. Comparison with Ladder Variational Autoencoders",
            "text": "Our architecture resembles the ladder variational autoencoder (LVAE) (S\u00f8nderby et al., 2016). However the two models are very different. The purpose of our architecture is to connect subparts of the latent code with networks of different expressive power (depth); the model is encouraged to place high-level, complex features at the top, and low-level, simple features at the bottom, in order to reach lower reconstruction error with latent codes of the same capacity. Empirically, this allows the network to learn disentangled factors of variation, corresponding to different\nsubparts of the latent code. Meanwhile, because it is essentially a single-layer flat model, our VLAE does not exhibit the problems we have identified with traditional hierarchical VAE described in Section 3.\nLadder Variational Autoencoders (LVAE) on the other hand, utilize the ladder architecture from the inference/encoding side; its generative model is a standard HVAE. While the ladder inference network performs better than the one used in the original HVAE, ladder variational autoencoders still suffer from the problems we discussed in Section 3. The difference is between our model (VLAE) and LVAE is illustrated in Figure 4\nAn additional advantage over ladder variational autoencoders (and more generally HVAEs) is that our definition of the generative network Equ.(10) allows us to select a much richer family of generative models p. Because for HVAE the LELBO optimization requires the evaluation of log p(z`|z`+1) shown in Equ.(5), a reparameterized HVAE inject noise into the network in a way that corresponds to a conditional distribution with a tractable log-likelihood. For example, a HVAE can inject noise ` by\nz` = \u00b5`(z`+1) + \u03c3`(z`+1) ` (15)\nonly because this corresponds to Gaussian conditional distributions p(zl|zl+1). In comparison, for VLAE we only require evaluation of log p(x|z1, \u00b7 \u00b7 \u00b7 , zL), so except for the bottom layer r we can combine noise by any arbitrary black box function f`."
        },
        {
            "heading": "5. Experiments",
            "text": "We train VLAE over several datasets and visualize the semantic meaning of the latent code. 2 According to our assumptions, complex, high-level information will be learned by latent codes at higher layers, whereas simple, low-level features will be represented by lower layers.\nIn Figure 5, we visualize generation results from MNIST, where the model is a 3-layer VLAE with 2 dimensional latent code (z) at each layer. The visualizations are generated by systematically exploring the 2D latent code for one layer, while randomly sampling other layers. From the visualization, we see that the three layers encode stroke width, digit width and tilt and digit identity respectively. Remarkably, the semantic meaning of a particular latent code is stable with respect to the sampled latent codes from other layers. For example, in the second layer, the left side represents narrow digits whereas the right side represents wide digits. Sampling latent codes at other layers will control the digit identity, but have no influence over the width. This is interesting given that width is actually correlated\n2Code is available at https://github.com/ShengjiaZhao/VariationalLadder-Autoencoder\nwith the digit identity; for example, digit 1 is typically thin while digit 0 is mostly wide. Therefore, the model will generate more zeros than ones if the latent code at the second layer corresponds to a wide digit, as displayed in the visualization.\nNext we evaluate VLAE on the Street View House Number (SVHN, Netzer et al. (2011)) dataset, where it is significantly more challenging to learn interpretable representations since it is relatively noisy, containing certain digits which do not appear in the center. However, as is shown in Figure 6, our model is able to learn highly disentangled features through a 4-layer ladder, which includes color, digit shape, digit context, and general structure. These features are highly disentangled: since the latent code at the bottom layer controls color, modifying the code from other three layers while keeping the bottom layer fixed will generate a set of image which have the same tone in general. Moreover, the latent code learned at the top layer is the most complex one, which captures rich variations lower layers cannot accurately represent.\nFinally, we display compelling results from another challenging dataset, CelebA (Liu et al., 2015), which includes 200,000 celebrity images. These images are highly varied in terms of environment and facial expressions. We visualize the generation results in Figure 7. As in the SVHN model, the latent code at the bottom layer learns the ambient color of the environment while keeping the personal details intact. Controlling other latent codes will change the other details of the individual, such as skin color, hair color, identity, pose (azimuth); more complicated features are placed at higher levels of the hierarchy."
        },
        {
            "heading": "6. Discussions",
            "text": "Training hierarchical deep generative models is a very challenging task, and there are two main successful families of methods. One family defines the destruction and reconstruction of data using a pre-defined process. Among them, LapGANs (Denton et al., 2015) define the process as repeatedly downsampling, and Diffusion Nets (SohlDickstein et al., 2015) defines a forward Markov chain that coverts a complex data distribution to a simple, tractable one. Without having to perform inference, this makes training much easier, but it does not provide latent variables for other downstream tasks (unsupervised learning).\nAnother line of work focuses on learning a hierarchy of latent variables by stacking single layer models on top of each other. Many models also use more flexible inference techniques to improve performance (S\u00f8nderby et al., 2016; Dinh et al., 2014; Salimans et al., 2015; Rezende & Mohamed, 2015; Li et al., 2016; Kingma et al., 2016). However we show that there are limitations to stacked VAEs.\nOur work distinguishes itself from prior work by explicitly discussing the purpose of learning such models: the advantage of learning a hierarchy is not in better representation efficiency, or better samples, but rather in the introduction of structure in the features, such as hierarchy or disentanglement. This motivates our method, VLAE, which justifies our intuition that a reasonable network structure can be, by itself, highly effective at learning structured (disentangled) representations. Contrary to previous efforts on hierarchical models, we do not stack VAEs on top of each other, instead we use a \u201cflat\u201d approach. This can be applied in combination with the stacking approach.\nThe results displayed in the experiments resemble those obtained with InfoGAN (Chen et al., 2016); both frameworks learn disentangled representations from the data in an unsupervised manner. The InfoGAN objective, however, explicitly maximizes the mutual information between the latent variables and the observation; whereas in VLAE, this is achieved through the reconstruction error objective which encourages the use of latent codes. Furthermore we are able to explicitly disentangle features with different level of abstractness."
        },
        {
            "heading": "7. Conclusions",
            "text": "In this paper, we discussed the potential practical value of learning a hierarchical generative model over a nonhierarchical one. We show that little can be gained in terms of representation efficiency or sample quality. We further show that traditional HVAE models have trouble learning structured features. Based on these insights, we consider an alternative to learning structured features by leveraging the expressive power of a neural network. Empirical results show that we can learn highly disentangled features.\nOne limitation of VLAE is the inability to learn structures other than hierarchical disentanglement. Future work should consider more principled ways of designing architectures that allow for learning features with more complex structures."
        },
        {
            "heading": "8. Acknowledgement",
            "text": "This research was supported by Intel Corporation, NSF (#1649208) and Future of Life Institute (#2016-158687)."
        },
        {
            "heading": "A. Additional Results",
            "text": "Proposition 2. LELBO for HVAE in Eq.(5) is optimized when LELBO = \u2212H(pdata(x)). If LELBO is optimized the following Gibbs sampling chain converges to pdata(x) if it is ergodic\nz(t) \u223c q(z|x(t)) x(t+1) \u223c p(x|z(t)) (16)\nProof of Proposition 2. As in the proof of Proposition 1 when LELBO is optimized, q(z|x) = p(z|x). Because the following Gibbs chain converges to pdata(x)\nz(t) \u223c q(z|x(t)) x(t+1) \u223c q(x|z(t))\nWe can replace q(x|z(t)) with p(x|z(t)) and the chain still converges to pdata(x)."
        },
        {
            "heading": "B. Experimental Details",
            "text": "B.1. Gaussian HVAE\nArchitecture: For l = 1, 2\nzl \u223c N (W1fl(zl+1), sigm(W2fl(zl+1))2)\nwhereW1,W2 are trainable linear transformation matrices, and sigm is sigmoid activation function. fl is a two layer dense network. For l = 0, we let\nx \u223c N (f0(z1), \u03c32I)\nwhere \u03c3 is a hyper-parameter that can be specified apriori or trained. f0 is a two layer convolutional network with 1/2 stride for spatial up-sampling. For inference we use the same architecture as the generator.\nLearning: During training we use the Adam (Kingma & Ba, 2014) optimizer with learning rate 10\u22124. We also anneal the scale the KL-regularization from 0 to 1 to encourage use of latent feature during early stages of training.\nB.2. VLAE\nFor VLAE, we use varying layers of convolution depending on size of input image. However, for the ladder connections we do not use convolution. Because of our argument in introduction and Figure 1, generative models do not benefit from convolutional latent features. Therefore we always flatten convolutional layers and apply linear transformation to reduce dimension for each ladder connection. For implementation details please refer to our code."
        }
    ],
    "title": "Learning Hierarchical Features from Generative Models",
    "year": 2017
}