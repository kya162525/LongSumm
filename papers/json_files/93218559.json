{
    "abstractText": "Top-performing deep architectures are trained on massive amounts of labeled data. In the absence of labeled data for a certain task, domain adaptation often provides an attractive option given that labeled data of similar nature but from a different domain (e.g. synthetic images) are available. Here, we propose a new approach to domain adaptation in deep architectures that can be trained on large amount of labeled data from the source domain and large amount of unlabeled data from the target domain (no labeled targetdomain data is necessary). As the training progresses, the approach promotes the emergence of \u201cdeep\u201d features that are (i) discriminative for the main learning task on the source domain and (ii) invariant with respect to the shift between the domains. We show that this adaptation behaviour can be achieved in almost any feed-forward model by augmenting it with few standard layers and a simple new gradient reversal layer. The resulting augmented architecture can be trained using standard backpropagation. Overall, the approach can be implemented with little effort using any of the deep-learning packages. The method performs very well in a series of image classification experiments, achieving adaptation effect in the presence of big domain shifts and outperforming previous state-ofthe-art on Office datasets.",
    "authors": [
        {
            "affiliations": [],
            "name": "Yaroslav Ganin"
        },
        {
            "affiliations": [],
            "name": "Victor Lempitsky"
        }
    ],
    "id": "SP:7e9ec8e22237f483dd9147b015185fe959f30bc1",
    "references": [
        {
            "authors": [
                "Arbelaez",
                "Pablo",
                "Maire",
                "Michael",
                "Fowlkes",
                "Charless",
                "Malik",
                "Jitendra"
            ],
            "title": "Contour detection and hierarchical image segmentation",
            "year": 2011
        },
        {
            "authors": [
                "Babenko",
                "Artem",
                "Slesarev",
                "Anton",
                "Chigorin",
                "Alexander",
                "Lempitsky",
                "Victor S"
            ],
            "title": "Neural codes for image retrieval",
            "venue": "In ECCV, pp",
            "year": 2014
        },
        {
            "authors": [
                "Baktashmotlagh",
                "Mahsa",
                "Harandi",
                "Mehrtash Tafazzoli",
                "Lovell",
                "Brian C",
                "Salzmann",
                "Mathieu"
            ],
            "title": "Unsupervised domain adaptation by domain invariant projection",
            "venue": "In ICCV, pp",
            "year": 2013
        },
        {
            "authors": [
                "Ben-David",
                "Shai",
                "Blitzer",
                "John",
                "Crammer",
                "Koby",
                "Kulesza",
                "Alex",
                "Pereira",
                "Fernando",
                "Vaughan",
                "Jennifer Wortman"
            ],
            "title": "A theory of learning from different",
            "venue": "domains. JMLR,",
            "year": 2010
        },
        {
            "authors": [
                "Borgwardt",
                "Karsten M",
                "Gretton",
                "Arthur",
                "Rasch",
                "Malte J",
                "Kriegel",
                "Hans-Peter",
                "Sch\u00f6lkopf",
                "Bernhard",
                "Smola",
                "Alexander J"
            ],
            "title": "Integrating structured biological data by kernel maximum mean discrepancy",
            "venue": "In ISMB,",
            "year": 2006
        },
        {
            "authors": [
                "Cire\u015fan",
                "Dan",
                "Meier",
                "Ueli",
                "Masci",
                "Jonathan",
                "Schmidhuber",
                "J\u00fcrgen"
            ],
            "title": "Multi-column deep neural network for traffic sign classification",
            "venue": "Neural Networks,",
            "year": 2012
        },
        {
            "authors": [
                "Cortes",
                "Corinna",
                "Mohri",
                "Mehryar"
            ],
            "title": "Domain adaptation in regression",
            "venue": "In Algorithmic Learning Theory,",
            "year": 2011
        },
        {
            "authors": [
                "Donahue",
                "Jeff",
                "Jia",
                "Yangqing",
                "Vinyals",
                "Oriol",
                "Hoffman",
                "Judy",
                "Zhang",
                "Ning",
                "Tzeng",
                "Eric",
                "Darrell",
                "Trevor"
            ],
            "title": "Decaf: A deep convolutional activation feature for generic visual recognition",
            "year": 2014
        },
        {
            "authors": [
                "Fan",
                "Rong-En",
                "Chang",
                "Kai-Wei",
                "Hsieh",
                "Cho-Jui",
                "Wang",
                "Xiang-Rui",
                "Lin",
                "Chih-Jen"
            ],
            "title": "LIBLINEAR: A library for large linear classification",
            "venue": "Journal of Machine Learning Research,",
            "year": 2008
        },
        {
            "authors": [
                "Fernando",
                "Basura",
                "Habrard",
                "Amaury",
                "Sebban",
                "Marc",
                "Tuytelaars",
                "Tinne"
            ],
            "title": "Unsupervised visual domain adaptation using subspace alignment",
            "venue": "In ICCV,",
            "year": 2013
        },
        {
            "authors": [
                "Ghifary",
                "Muhammad",
                "Kleijn",
                "W Bastiaan",
                "Zhang",
                "Mengjie"
            ],
            "title": "Domain adaptive neural networks for object recognition",
            "venue": "PRICAI",
            "year": 2014
        },
        {
            "authors": [
                "Glorot",
                "Xavier",
                "Bordes",
                "Antoine",
                "Bengio",
                "Yoshua"
            ],
            "title": "Domain adaptation for large-scale sentiment classification: A deep learning approach",
            "venue": "In ICML, pp",
            "year": 2011
        },
        {
            "authors": [
                "Gong",
                "Boqing",
                "Shi",
                "Yuan",
                "Sha",
                "Fei",
                "Grauman",
                "Kristen"
            ],
            "title": "Geodesic flow kernel for unsupervised domain adaptation",
            "venue": "In CVPR, pp. 2066\u20132073,",
            "year": 2012
        },
        {
            "authors": [
                "Gong",
                "Boqing",
                "Grauman",
                "Kristen",
                "Sha",
                "Fei"
            ],
            "title": "Connecting the dots with landmarks: Discriminatively learning domain-invariant features for unsupervised domain adaptation",
            "venue": "In ICML, pp",
            "year": 2013
        },
        {
            "authors": [
                "Goodfellow",
                "Ian",
                "Pouget-Abadie",
                "Jean",
                "Mirza",
                "Mehdi",
                "Xu",
                "Bing",
                "Warde-Farley",
                "David",
                "Ozair",
                "Sherjil",
                "Courville",
                "Aaron",
                "Bengio",
                "Yoshua"
            ],
            "title": "Generative adversarial nets",
            "venue": "In NIPS,",
            "year": 2014
        },
        {
            "authors": [
                "Gopalan",
                "Raghuraman",
                "Li",
                "Ruonan",
                "Chellappa",
                "Rama"
            ],
            "title": "Domain adaptation for object recognition: An unsupervised approach",
            "venue": "In ICCV, pp",
            "year": 2011
        },
        {
            "authors": [
                "Hoffman",
                "Judy",
                "Tzeng",
                "Eric",
                "Donahue",
                "Jeff",
                "Jia",
                "Yangqing",
                "Saenko",
                "Kate",
                "Darrell",
                "Trevor"
            ],
            "title": "One-shot adaptation of supervised deep convolutional models",
            "venue": "CoRR, abs/1312.6204,",
            "year": 2013
        },
        {
            "authors": [
                "Huang",
                "Jiayuan",
                "Smola",
                "Alexander J",
                "Gretton",
                "Arthur",
                "Borgwardt",
                "Karsten M",
                "Sch\u00f6lkopf",
                "Bernhard"
            ],
            "title": "Correcting sample selection bias by unlabeled data",
            "venue": "In NIPS, pp",
            "year": 2006
        },
        {
            "authors": [
                "Jia",
                "Yangqing",
                "Shelhamer",
                "Evan",
                "Donahue",
                "Jeff",
                "Karayev",
                "Sergey",
                "Long",
                "Jonathan",
                "Girshick",
                "Ross",
                "Guadarrama",
                "Sergio",
                "Darrell",
                "Trevor"
            ],
            "title": "Caffe: Convolutional architecture for fast feature embedding",
            "venue": "CoRR, abs/1408.5093,",
            "year": 2014
        },
        {
            "authors": [
                "Y. LeCun",
                "L. Bottou",
                "Y. Bengio",
                "P. Haffner"
            ],
            "title": "Gradientbased learning applied to document recognition",
            "venue": "Proceedings of the IEEE,",
            "year": 1998
        },
        {
            "authors": [
                "Liebelt",
                "Joerg",
                "Schmid",
                "Cordelia"
            ],
            "title": "Multi-view object class detection with a 3d geometric model",
            "venue": "In CVPR,",
            "year": 2010
        },
        {
            "authors": [
                "Netzer",
                "Yuval",
                "Wang",
                "Tao",
                "Coates",
                "Adam",
                "Bissacco",
                "Alessandro",
                "Wu",
                "Bo",
                "Ng",
                "Andrew Y"
            ],
            "title": "Reading digits in natural images with unsupervised feature learning",
            "venue": "In NIPS Workshop on Deep Learning and Unsupervised Feature Learning",
            "year": 2011
        },
        {
            "authors": [
                "M. Oquab",
                "L. Bottou",
                "I. Laptev",
                "J. Sivic"
            ],
            "title": "Learning and transferring mid-level image representations using convolutional neural networks",
            "venue": "In CVPR,",
            "year": 2014
        },
        {
            "authors": [
                "Pan",
                "Sinno Jialin",
                "Tsang",
                "Ivor W",
                "Kwok",
                "James T",
                "Yang",
                "Qiang"
            ],
            "title": "Domain adaptation via transfer component analysis",
            "venue": "IEEE Transactions on Neural Networks,",
            "year": 2011
        },
        {
            "authors": [
                "S. Chopra",
                "S. Balakrishnan",
                "R. Gopalan"
            ],
            "title": "Dlid: Deep learning for domain adaptation by interpolating between domains",
            "venue": "In ICML Workshop on Challenges in Representation Learning,",
            "year": 2013
        },
        {
            "authors": [
                "Saenko",
                "Kate",
                "Kulis",
                "Brian",
                "Fritz",
                "Mario",
                "Darrell",
                "Trevor"
            ],
            "title": "Adapting visual category models to new domains",
            "venue": "In ECCV, pp",
            "year": 2010
        },
        {
            "authors": [
                "Shimodaira",
                "Hidetoshi"
            ],
            "title": "Improving predictive inference under covariate shift by weighting the log-likelihood function",
            "venue": "Journal of Statistical Planning and Inference,",
            "year": 2000
        },
        {
            "authors": [
                "Srivastava",
                "Nitish",
                "Hinton",
                "Geoffrey",
                "Krizhevsky",
                "Alex",
                "Sutskever",
                "Ilya",
                "Salakhutdinov",
                "Ruslan"
            ],
            "title": "Dropout: A simple way to prevent neural networks from overfitting",
            "venue": "The Journal of Machine Learning Research,",
            "year": 1929
        },
        {
            "authors": [
                "Stark",
                "Michael",
                "Goesele",
                "Schiele",
                "Bernt"
            ],
            "title": "Back to the future: Learning shape models from 3d CAD data",
            "venue": "In BMVC, pp",
            "year": 2010
        },
        {
            "authors": [
                "Sun",
                "Baochen",
                "Saenko",
                "Kate"
            ],
            "title": "From virtual to reality: Fast adaptation of virtual object detectors to real domains",
            "venue": "In BMVC,",
            "year": 2014
        },
        {
            "authors": [
                "Tommasi",
                "Tatiana",
                "Caputo",
                "Barbara"
            ],
            "title": "Frustratingly easy nbnn domain adaptation",
            "venue": "In ICCV,",
            "year": 2013
        },
        {
            "authors": [
                "Tzeng",
                "Eric",
                "Hoffman",
                "Judy",
                "Zhang",
                "Ning",
                "Saenko",
                "Kate",
                "Darrell",
                "Trevor"
            ],
            "title": "Deep domain confusion: Maximizing for domain invariance",
            "venue": "CoRR, abs/1412.3474,",
            "year": 2014
        },
        {
            "authors": [
                "V\u00e1zquez",
                "David",
                "L\u00f3pez",
                "Antonio Manuel",
                "Mar\u0131\u0301n",
                "Javier",
                "Ponsa",
                "Daniel",
                "Gomez",
                "David Ger\u00f3nimo"
            ],
            "title": "Virtual and real world adaptationfor pedestrian detection",
            "venue": "IEEE Trans. Pattern Anal. Mach. Intell.,",
            "year": 2014
        },
        {
            "authors": [
                "Zeiler",
                "Matthew D",
                "Fergus",
                "Rob"
            ],
            "title": "Visualizing and understanding convolutional networks",
            "venue": "CoRR, abs/1311.2901,",
            "year": 2013
        }
    ],
    "sections": [
        {
            "text": "As the training progresses, the approach promotes the emergence of \u201cdeep\u201d features that are (i) discriminative for the main learning task on the source domain and (ii) invariant with respect to the shift between the domains. We show that this adaptation behaviour can be achieved in almost any feed-forward model by augmenting it with few standard layers and a simple new gradient reversal layer. The resulting augmented architecture can be trained using standard backpropagation.\nOverall, the approach can be implemented with little effort using any of the deep-learning packages. The method performs very well in a series of image classification experiments, achieving adaptation effect in the presence of big domain shifts and outperforming previous state-ofthe-art on Office datasets."
        },
        {
            "heading": "1. Introduction",
            "text": "Deep feed-forward architectures have brought impressive advances to the state-of-the-art across a wide variety of machine-learning tasks and applications. At the moment, however, these leaps in performance come only when a large amount of labeled training data is available. At the same time, for problems lacking labeled data, it may be still possible to obtain training sets that are big enough for training large-scale deep models, but that suffer from the shift in data distribution from the actual data encountered\nat \u201ctest time\u201d. One particularly important example is synthetic or semi-synthetic training data, which may come in abundance and be fully labeled, but which inevitably have a distribution that is different from real data (Liebelt & Schmid, 2010; Stark et al., 2010; Va\u0301zquez et al., 2014; Sun & Saenko, 2014). Learning a discriminative classifier or other predictor in the presence of a shift between training and test distributions is known as domain adaptation (DA). A number of approaches to domain adaptation has been suggested in the context of shallow learning, e.g. in the situation when data representation/features are given and fixed. The proposed approaches then build the mappings between the source (training-time) and the target (test-time) domains, so that the classifier learned for the source domain can also be applied to the target domain, when composed with the learned mapping between domains. The appeal of the domain adaptation approaches is the ability to learn a mapping between domains in the situation when the target domain data are either fully unlabeled (unsupervised domain annotation) or have few labeled samples (semi-supervised domain adaptation). Below, we focus on the harder unsupervised case, although the proposed approach can be generalized to the semi-supervised case rather straightforwardly. Unlike most previous papers on domain adaptation that worked with fixed feature representations, we focus on combining domain adaptation and deep feature learning within one training process (deep domain adaptation). Our goal is to embed domain adaptation into the process of learning representation, so that the final classification decisions are made based on features that are both discriminative and invariant to the change of domains, i.e. have the same or very similar distributions in the source and the target domains. In this way, the obtained feed-forward network can be applicable to the target domain without being hindered by the shift between the two domains. We thus focus on learning features that combine (i) discriminativeness and (ii) domain-invariance. This is achieved by jointly optimizing the underlying features as well as two discriminative classifiers operating on these features: (i) the label predictor that predicts class labels and is used both during training and at test time and (ii) the ar X iv :1 40 9. 74 95 v2 [ st at .M L ] 2 7 Fe b 20 15\ndomain classifier that discriminates between the source and the target domains during training. While the parameters of the classifiers are optimized in order to minimize their error on the training set, the parameters of the underlying deep feature mapping are optimized in order to minimize the loss of the label classifier and to maximize the loss of the domain classifier. The latter encourages domain-invariant features to emerge in the course of the optimization. Crucially, we show that all three training processes can be embedded into an appropriately composed deep feedforward network (Figure 1) that uses standard layers and loss functions, and can be trained using standard backpropagation algorithms based on stochastic gradient descent or its modifications (e.g. SGD with momentum). Our approach is generic as it can be used to add domain adaptation to any existing feed-forward architecture that is trainable by backpropagation. In practice, the only non-standard component of the proposed architecture is a rather trivial gradient reversal layer that leaves the input unchanged during forward propagation and reverses the gradient by multiplying it by a negative scalar during the backpropagation. Below, we detail the proposed approach to domain adaptation in deep architectures, and present results on traditional deep learning image datasets (such as MNIST (LeCun et al., 1998) and SVHN (Netzer et al., 2011)) as well as on OFFICE benchmarks (Saenko et al., 2010), where the proposed method considerably improves over previous state-of-the-art accuracy."
        },
        {
            "heading": "2. Related work",
            "text": "A large number of domain adaptation methods have been proposed over the recent years, and here we focus on the most related ones. Multiple methods perform unsupervised domain adaptation by matching the feature distributions in the source and the target domains. Some approaches perform this by reweighing or selecting samples from the source domain (Borgwardt et al., 2006; Huang et al., 2006; Gong et al., 2013), while others seek an explicit feature space transformation that would map source distribution into the target ones (Pan et al., 2011; Gopalan et al., 2011; Baktashmotlagh et al., 2013). An important aspect of the distribution matching approach is the way the (dis)similarity between distributions is measured. Here, one popular choice is matching the distribution means in the kernel-reproducing Hilbert space (Borgwardt et al., 2006; Huang et al., 2006), whereas (Gong et al., 2012; Fernando et al., 2013) map the principal axes associated with each of the distributions. Our approach also attempts to match feature space distributions, however this is accomplished by modifying the feature representation itself rather than by reweighing or geometric transformation. Also, our method uses (implicitly) a rather different way to measure the disparity between distributions based on their separability by a deep discriminatively-trained classifier.\nSeveral approaches perform gradual transition from the source to the target domain (Gopalan et al., 2011; Gong et al., 2012) by a gradual change of the training distribution. Among these methods, (S. Chopra & Gopalan, 2013) does this in a \u201cdeep\u201d way by the layerwise training of a sequence of deep autoencoders, while gradually replacing source-domain samples with target-domain samples. This improves over a similar approach of (Glorot et al., 2011) that simply trains a single deep autoencoder for both domains. In both approaches, the actual classifier/predictor is learned in a separate step using the feature representation learned by autoencoder(s). In contrast to (Glorot et al., 2011; S. Chopra & Gopalan, 2013), our approach performs feature learning, domain adaptation and classifier learning jointly, in a unified architecture, and using a single learning algorithm (backpropagation). We therefore argue that our approach is simpler (both conceptually and in terms of its implementation). Our method also achieves considerably better results on the popular OFFICE benchmark. While the above approaches perform unsupervised domain adaptation, there are approaches that perform supervised domain adaptation by exploiting labeled data from the target domain. In the context of deep feed-forward architectures, such data can be used to \u201cfine-tune\u201d the network trained on the source domain (Zeiler & Fergus, 2013; Oquab et al., 2014; Babenko et al., 2014). Our approach does not require labeled target-domain data. At the same time, it can easily incorporate such data when it is available. An idea related to ours is described in (Goodfellow et al., 2014). While their goal is quite different (building generative deep networks that can synthesize samples), the way they measure and minimize the discrepancy between the distribution of the training data and the distribution of the synthesized data is very similar to the way our architecture measures and minimizes the discrepancy between feature distributions for the two domains. Finally, a recent and concurrent report by (Tzeng et al., 2014) also focuses on domain adaptation in feed-forward networks. Their set of techniques measures and minimizes the distance of the data means across domains. This approach may be regarded as a \u201cfirst-order\u201d approximation to our approach, which seeks a tighter alignment between distributions."
        },
        {
            "heading": "3. Deep Domain Adaptation",
            "text": ""
        },
        {
            "heading": "3.1. The model",
            "text": "We now detail the proposed model for the domain adaptation. We assume that the model works with input samples x \u2208 X , where X is some input space and certain labels (output) y from the label space Y . Below, we assume classification problems where Y is a finite set (Y = {1, 2, . . . L}), however our approach is generic and can handle any output label space that other deep feed-\nforward models can handle. We further assume that there exist two distributions S(x, y) and T (x, y) on X \u2297 Y , which will be referred to as the source distribution and the target distribution (or the source domain and the target domain). Both distributions are assumed complex and unknown, and furthermore similar but different (in other words, S is \u201cshifted\u201d from T by some domain shift). Our ultimate goal is to be able to predict labels y given the input x for the target distribution. At training time, we have an access to a large set of training samples {x1,x2, . . . ,xN} from both the source and the target domains distributed according to the marginal distributions S(x) and T (x). We denote with di the binary variable (domain label) for the i-th example, which indicates whether xi come from the source distribution (xi\u223cS(x) if di=0) or from the target distribution (xi\u223cT (x) if di=1). For the examples from the source distribution (di=0) the corresponding labels yi \u2208 Y are known at training time. For the examples from the target domains, we do not know the labels at training time, and we want to predict such labels at test time. We now define a deep feed-forward architecture that for each input x predicts its label y \u2208 Y and its domain label d \u2208 {0, 1}. We decompose such mapping into three parts. We assume that the input x is first mapped by a mapping Gf (a feature extractor) to a D-dimensional feature vector f \u2208 RD. The feature mapping may also include several feed-forward layers and we denote the vector of parameters of all layers in this mapping as \u03b8f , i.e. f = Gf (x; \u03b8f ). Then, the feature vector f is mapped by a mapping Gy (label predictor) to the label y, and we denote the parameters of this mapping with \u03b8y . Finally, the same feature vector f is mapped to the domain label d by a mapping Gd (domain\nclassifier) with the parameters \u03b8d (Figure 1). During the learning stage, we aim to minimize the label prediction loss on the annotated part (i.e. the source part) of the training set, and the parameters of both the feature extractor and the label predictor are thus optimized in order to minimize the empirical loss for the source domain samples. This ensures the discriminativeness of the features f and the overall good prediction performance of the combination of the feature extractor and the label predictor on the source domain. At the same time, we want to make the features f domain-invariant. That is, we want to make the distributions S(f) = {Gf (x; \u03b8f ) |x\u223cS(x)} and T (f) = {Gf (x; \u03b8f ) |x\u223cT (x)} to be similar. Under the covariate shift assumption, this would make the label prediction accuracy on the target domain to be the same as on the source domain (Shimodaira, 2000). Measuring the dissimilarity of the distributions S(f) and T (f) is however non-trivial, given that f is high-dimensional, and that the distributions themselves are constantly changing as learning progresses. One way to estimate the dissimilarity is to look at the loss of the domain classifier Gd, provided that the parameters \u03b8d of the domain classifier have been trained to discriminate between the two feature distributions in an optimal way. This observation leads to our idea. At training time, in order to obtain domain-invariant features, we seek the parameters \u03b8f of the feature mapping that maximize the loss of the domain classifier (by making the two feature distributions as similar as possible), while simultaneously seeking the parameters \u03b8d of the domain classifier that minimize the loss of the domain classifier. In addition, we seek to minimize the loss of the label predictor.\nMore formally, we consider the functional: E(\u03b8f , \u03b8y, \u03b8d) = \u2211 i=1..N di=0 Ly ( Gy(Gf (xi; \u03b8f ); \u03b8y), yi ) \u2212\n\u03bb \u2211 i=1..N Ld ( Gd(Gf (xi; \u03b8f ); \u03b8d), yi ) =\n= \u2211 i=1..N di=0 Liy(\u03b8f , \u03b8y)\u2212 \u03bb \u2211 i=1..N Lid(\u03b8f , \u03b8d) (1)\nHere, Ly(\u00b7, \u00b7) is the loss for label prediction (e.g. multinomial), Ld(\u00b7, \u00b7) is the loss for the domain classification (e.g. logistic), while Liy and L i d denote the corresponding loss functions evaluated at the i-th training example. Based on our idea, we are seeking the parameters \u03b8\u0302f , \u03b8\u0302y, \u03b8\u0302d that deliver a saddle point of the functional (1):\n(\u03b8\u0302f , \u03b8\u0302y) = arg min \u03b8f ,\u03b8y E(\u03b8f , \u03b8y, \u03b8\u0302d) (2)\n\u03b8\u0302d = arg max \u03b8d E(\u03b8\u0302f , \u03b8\u0302y, \u03b8d) . (3)\nAt the saddle point, the parameters \u03b8d of the domain classifier \u03b8d minimize the domain classification loss (since it enters into (1) with the minus sign) while the parameters \u03b8y of the label predictor minimize the label prediction loss. The feature mapping parameters \u03b8f minimize the label prediction loss (i.e. the features are discriminative), while maximizing the domain classification loss (i.e. the features are domain-invariant). The parameter \u03bb controls the trade-off between the two objectives that shape the features during learning. Below, we demonstrate that standard stochastic gradient solvers (SGD) can be adapted for the search of the saddle point (2)-(3)."
        },
        {
            "heading": "3.2. Optimization with backpropagation",
            "text": "A saddle point (2)-(3) can be found as a stationary point of the following stochastic updates:\n\u03b8f \u2190\u2212 \u03b8f \u2212 \u00b5 ( \u2202Liy \u2202\u03b8f \u2212 \u03bb\u2202L i d \u2202\u03b8f ) (4)\n\u03b8y \u2190\u2212 \u03b8y \u2212 \u00b5 \u2202Liy \u2202\u03b8y\n(5)\n\u03b8d \u2190\u2212 \u03b8d \u2212 \u00b5 \u2202Lid \u2202\u03b8d\n(6)\nwhere \u00b5 is the learning rate (which can vary over time). The updates (4)-(6) are very similar to stochastic gradient descent (SGD) updates for a feed-forward deep model that comprises feature extractor fed into the label predictor and into the domain classifier. The difference is the \u2212\u03bb factor in (4) (the difference is important, as without such factor,\nstochastic gradient descent would try to make features dissimilar across domains in order to minimize the domain classification loss). Although direct implementation of (4)- (6) as SGD is not possible, it is highly desirable to reduce the updates (4)-(6) to some form of SGD, since SGD (and its variants) is the main learning algorithm implemented in most packages for deep learning. Fortunately, such reduction can be accomplished by introducing a special gradient reversal layer (GRL) defined as follows. The gradient reversal layer has no parameters associated with it (apart from the meta-parameter \u03bb, which is not updated by backpropagation). During the forward propagation, GRL acts as an identity transform. During the backpropagation though, GRL takes the gradient from the subsequent level, multiplies it by \u2212\u03bb and passes it to the preceding layer. Implementing such layer using existing object-oriented packages for deep learning is simple, as defining procedures for forwardprop (identity transform), backprop (multiplying by a constant), and parameter update (nothing) is trivial. The GRL as defined above is inserted between the feature extractor and the domain classifier, resulting in the architecture depicted in Figure 1. As the backpropagation process passes through the GRL, the partial derivatives of the loss that is downstream the GRL (i.e. Ld) w.r.t. the layer parameters that are upstream the GRL (i.e. \u03b8f ) get multiplied by \u2212\u03bb, i.e. \u2202Ld\u2202\u03b8f is effectively replaced with \u2212\u03bb \u2202Ld \u2202\u03b8f\n. Therefore, running SGD in the resulting model implements the updates (4)-(6) and converges to a saddle point of (1). Mathematically, we can formally treat the gradient reversal layer as a \u201cpseudo-function\u201dR\u03bb(x) defined by two (incompatible) equations describing its forward- and backpropagation behaviour:\nR\u03bb(x) = x (7) dR\u03bb dx = \u2212\u03bbI (8)\nwhere I is an identity matrix. We can then define the objective \u201cpseudo-function\u201d of (\u03b8f , \u03b8y, \u03b8d) that is being optimized by the stochastic gradient descent within our method:\nE\u0303(\u03b8f , \u03b8y, \u03b8d) = \u2211 i=1..N di=0 Ly ( Gy(Gf (xi; \u03b8f ); \u03b8y), yi ) +\n\u2211 i=1..N Ld ( Gd(R\u03bb(Gf (xi; \u03b8f )); \u03b8d), yi ) (9)\nRunning updates (4)-(6) can then be implemented as doing SGD for (9) and leads to the emergence of features that are domain-invariant and discriminative at the same time. After the learning, the label predictor y(x) = Gy(Gf (x; \u03b8f ); \u03b8y) can be used to predict labels for samples from the target domain (as well as from the source domain).\nThe simple learning procedure outlined above can be rederived/generalized along the lines suggested in (Goodfellow et al., 2014) (see Appendix A)."
        },
        {
            "heading": "3.3. Relation toH\u2206H-distance",
            "text": "In this section we give a brief analysis of our method in terms ofH\u2206H-distance (Ben-David et al., 2010; Cortes & Mohri, 2011) which is widely used in the theory of nonconservative domain adaptation. Formally,\ndH\u2206H(S, T ) = 2 sup h1,h2\u2208H |Pf\u223cS [h1(f) 6= h2(f)]\u2212\n\u2212Pf\u223cT [h1(f) 6= h2(f)]| (10)\ndefines a discrepancy distance between two distributions S and T w.r.t. a hypothesis set H. Using this notion one can obtain a probabilistic bound (Ben-David et al., 2010) on the performance \u03b5T (h) of some classifier h from T evaluated on the target domain given its performance \u03b5S(h) on the source domain:\n\u03b5T (h) \u2264 \u03b5S(h) + 1\n2 dH\u2206H(S, T ) + C , (11)\nwhere S and T are source and target distributions respectively, and C does not depend on particular h. Consider fixed S and T over the representation space produced by the feature extractor Gf and a family of label predictorsHp. We assume that the family of domain classifiersHd is rich enough to contain the symmetric difference hypothesis set ofHp:\nHp\u2206Hp = {h |h = h1 \u2295 h2 , h1, h2 \u2208 Hp} . (12)\nIt is not an unrealistic assumption as we have a freedom to pick Hd whichever we want. For example, we can set the architecture of the domain discriminator to be the layerby-layer concatenation of two replicas of the label predictor followed by a two layer non-linear perceptron aimed to learn the XOR-function. Given the assumption holds, one can easily show that training the Gd is closely related to the estimation of dHp\u2206Hp(S, T ). Indeed,\ndHp\u2206Hp(S, T ) = = 2 sup\nh\u2208Hp\u2206Hp |Pf\u223cS [h(f) = 1]\u2212 Pf\u223cT [h(f) = 1]| \u2264\n\u2264 2 sup h\u2208Hd |Pf\u223cS [h(f) = 1]\u2212 Pf\u223cT [h(f) = 1]| =\n= 2 sup h\u2208Hd |1\u2212 \u03b1(h)| = 2 sup h\u2208Hd [\u03b1(h)\u2212 1]\n(13)\nwhere \u03b1(h) = Pf\u223cS [h(f) = 0] + Pf\u223cT [h(f) = 1] is maximized by the optimal Gd. Thus, optimal discriminator gives the upper bound for dHp\u2206Hp(S, T ). At the same time, backpropagation of the reversed gradient changes the representation space\nso that \u03b1(Gd) becomes smaller effectively reducing dHp\u2206Hp(S, T ) and leading to the better approximation of \u03b5T (Gy) by \u03b5S(Gy)."
        },
        {
            "heading": "4. Experiments",
            "text": "We perform extensive evaluation of the proposed approach on a number of popular image datasets and their modifications. These include large-scale datasets of small images popular with deep learning methods, and the OFFICE datasets (Saenko et al., 2010), which are a de facto standard for domain adaptation in computer vision, but have much fewer images.\nBaselines. For the bulk of experiments the following baselines are evaluated. The source-only model is trained without consideration for target-domain data (no domain classifier branch included into the network). The train-ontarget model is trained on the target domain with class labels revealed. This model serves as an upper bound on DA methods, assuming that target data are abundant and the shift between the domains is considerable. In addition, we compare our approach against the recently proposed unsupervised DA method based on subspace alignment (SA) (Fernando et al., 2013), which is simple to setup and test on new datasets, but has also been shown to perform very well in experimental comparisons with other \u201cshallow\u201d DA methods. To boost the performance of this baseline, we pick its most important free parameter (the number of principal components) from the range {2, . . . , 60}, so that the test performance on the target domain is maximized. To apply SA in our setting, we train a source-only model and then consider the activations of the last hidden layer in the label predictor (before the final linear classifier) as descriptors/features, and learn the mapping between the source and the target domains (Fernando et al., 2013). Since the SA baseline requires to train a new classifier after adapting the features, and in order to put all the compared settings on an equal footing, we retrain the last layer of the label predictor using a standard linear SVM (Fan et al., 2008) for all four considered methods (including ours; the performance on the target domain remains approximately the same after the retraining). For the OFFICE dataset (Saenko et al., 2010), we directly compare the performance of our full network (feature extractor and label predictor) against recent DA approaches using previously published results.\nCNN architectures. In general, we compose feature extractor from two or three convolutional layers, picking their exact configurations from previous works. We give the exact architectures in Appendix B. For the domain adaptator we stick to the three fully connected layers (x \u2192 1024 \u2192 1024 \u2192 2), except for MNIST where we used a simpler (x \u2192 100 \u2192 2) ar-\nchitecture to speed up the experiments. For loss functions, we set Ly and Ld to be the logistic regression loss and the binomial cross-entropy respectively.\nCNN training procedure. The model is trained on 128- sized batches. Images are preprocessed by the mean subtraction. A half of each batch is populated by the samples from the source domain (with known labels), the rest is comprised of the target domain (with unknown labels). In order to suppress noisy signal from the domain classifier at the early stages of the training procedure instead of fixing the adaptation factor \u03bb, we gradually change it from 0 to 1 using the following schedule:\n\u03bbp = 2\n1 + exp(\u2212\u03b3 \u00b7 p) \u2212 1, (14)\nwhere \u03b3 was set to 10 in all experiments (the schedule was not optimized/tweaked). Further details on the CNN training can be found in Appendix C.\nVisualizations. We use t-SNE (van der Maaten, 2013) projection to visualize feature distributions at different points of the network, while color-coding the domains (Figure 3). We observe strong correspondence between the success of the adaptation in terms of the classification accuracy for the target domain, and the overlap between the domain distributions in such visualizations.\nChoosing meta-parameters. In general, good unsupervised DA methods should provide ways to set metaparameters (such as \u03bb, the learning rate, the momentum\nrate, the network architecture for our method) in an unsupervised way, i.e. without referring to labeled data in the target domain. In our method, one can assess the performance of the whole system (and the effect of changing hyper-parameters) by observing the test error on the source domain and the domain classifier error. In general, we observed a good correspondence between the success of adaptation and these errors (adaptation is more successful when the source domain test error is low, while the domain classifier error is high). In addition, the layer, where the the domain adaptator is attached can be picked by computing difference between means as suggested in (Tzeng et al., 2014)."
        },
        {
            "heading": "4.1. Results",
            "text": "We now discuss the experimental settings and the results. In each case, we train on the source dataset and test on a different target domain dataset, with considerable shifts between domains (see Figure 2). The results are summarized in Table 1 and Table 2.\nMNIST \u2192 MNIST-M. Our first experiment deals with the MNIST dataset (LeCun et al., 1998) (source). In order to obtain the target domain (MNIST-M) we blend digits from the original set over patches randomly extracted from color photos from BSDS500 (Arbelaez et al., 2011). This operation is formally defined for two images I1, I2 as Ioutijk = |I1ijk \u2212 I2ijk|, where i, j are the coordinates of a pixel and k is a channel index. In other words, an output sample is produced by taking a patch from a photo and in-\nverting its pixels at positions corresponding to the pixels of a digit. For a human the classification task becomes only slightly harder compared to the original dataset (the digits are still clearly distinguishable) whereas for a CNN trained on MNIST this domain is quite distinct, as the background and the strokes are no longer constant. Consequently, the source-only model performs poorly. Our approach succeeded at aligning feature distributions (Figure 3), which led to successful adaptation results (considering that the adaptation is unsupervised). At the same time, the improvement over source-only model achieved by subspace alignment (SA) (Fernando et al., 2013) is quite modest, thus highlighting the difficulty of the adaptation task.\nSynthetic numbers\u2192 SVHN. To address a common scenario of training on synthetic data and testing on real data, we use Street-View House Number dataset SVHN (Netzer et al., 2011) as the target domain and synthetic digits as the source. The latter (SYN NUMBERS) consists of 500,000 images generated by ourselves from Windows fonts by varying the text (that includes different one-, two-, and three-digit numbers), positioning, orientation, background and stroke colors, and the amount of blur. The degrees of\nvariation were chosen manually to simulate SVHN, however the two datasets are still rather distinct, the biggest difference being the structured clutter in the background of SVHN images. The proposed backpropagation-based technique works well covering two thirds of the gap between training with source data only and training on target domain data with known target labels. In contrast, SA (Fernando et al., 2013) does not result in any significant improvement in the classification accuracy, thus highlighting that the adaptation task is even more challenging than in the case of the MNIST experiment.\nMNIST\u2194 SVHN. In this experiment, we further increase the gap between distributions, and test on MNIST and SVHN, which are significantly different in appearance. Training on SVHN even without adaptation is challenging \u2014 classification error stays high during the first 150 epochs. In order to avoid ending up in a poor local minimum we, therefore, do not use learning rate annealing here. Obviously, the two directions (MNIST \u2192 SVHN and SVHN \u2192 MNIST) are not equally difficult. As SVHN is more diverse, a model trained on SVHN is ex-\npected to be more generic and to perform reasonably on the MNIST dataset. This, indeed, turns out to be the case and is supported by the appearance of the feature distributions. We observe a quite strong separation between the domains when we feed them into the CNN trained solely on MNIST, whereas for the SVHN-trained network the features are much more intermixed. This difference probably explains why our method succeeded in improving the performance by adaptation in the SVHN \u2192 MNIST scenario (see Table 1) but not in the opposite direction (SA is not able to perform adaptation in this case either). Unsupervised adaptation from MNIST to SVHN gives a failure example for our approach (we are unaware of any unsupervised DA methods capable of performing such adaptation).\nSynthetic Signs \u2192 GTSRB. Overall, this setting is similar to the SYN NUMBERS \u2192 SVHN experiment, except the distribution of the features is more complex due to the significantly larger number of classes (43 instead of 10). For the source domain we obtained 100,000 synthetic images (which we call SYN SIGNS) simulating various photoshooting conditions. Once again, our method achieves a sensible increase in performance once again proving its suitability for the synthetic-to-real data adaptation. As an additional experiment, we also evaluate the proposed algorithm for semi-supervised domain adaptation, i.e. when one is additionally provided with a small amount of labeled target data. For that purpose we split GTSRB into the train set (1280 random samples with labels) and the validation set (the rest of the dataset). The validation part is used solely for the evaluation and does not participate in the adaptation. The training procedure changes slightly as the label predictor is now exposed to the target data. Figure 4 shows the change of the validation error throughout the training. While the graph clearly suggests that our method can be used in the semi-supervised setting, thorough verification of semi-supervised setting is left for future work.\nOffice dataset. We finally evaluate our method on OFFICE dataset, which is a collection of three distinct do-\nmains: AMAZON, DSLR, and WEBCAM. Unlike previously discussed datasets, OFFICE is rather small-scale with only 2817 labeled images spread across 31 different categories in the largest domain. The amount of available data is crucial for a successful training of a deep model, hence we opted for the fine-tuning of the CNN pre-trained on the ImageNet (Jia et al., 2014) as it is done in some recent DA works (Donahue et al., 2014; Tzeng et al., 2014; Hoffman et al., 2013). We make our approach more comparable with (Tzeng et al., 2014) by using exactly the same network architecture replacing domain mean-based regularization with the domain classifier. Following most previous works, we evaluate our method using 5 random splits for each of the 3 transfer tasks commonly used for evaluation. Our training protocol is close to (Tzeng et al., 2014; Saenko et al., 2010; Gong et al., 2012) as we use the same number of labeled source-domain images per category. Unlike those works and similarly to e.g. DLID (S. Chopra & Gopalan, 2013) we use the whole unlabeled target domain (as the premise of our method is the abundance of unlabeled data in the target domain). Under this transductive setting, our method is able to improve previously-reported state-of-the-art accuracy for unsupervised adaptation very considerably (Table 2), especially in the most challenging AMAZON\u2192WEBCAM scenario (the two domains with the largest domain shift)."
        },
        {
            "heading": "5. Discussion",
            "text": "We have proposed a new approach to unsupervised domain adaptation of deep feed-forward architectures, which allows large-scale training based on large amount of annotated data in the source domain and large amount of unannotated data in the target domain. Similarly to many previous shallow and deep DA techniques, the adaptation is achieved through aligning the distributions of features across the two domains. However, unlike previous approaches, the alignment is accomplished through standard backpropagation training. The approach is therefore rather scalable, and can be implemented using any deep learning package. To this end we plan to release the source code for the Gradient Reversal layer along with the usage examples as an extension to Caffe (Jia et al., 2014). Further evaluation on larger-scale tasks and in semisupervised settings constitutes future work. It is also interesting whether the approach can benefit from a good initialization of the feature extractor. For this, a natural choice would be to use deep autoencoder/deconvolution network trained on both domains (or on the target domain) in the same vein as (Glorot et al., 2011; S. Chopra & Gopalan, 2013), effectively using (Glorot et al., 2011; S. Chopra & Gopalan, 2013) as an initialization to our method."
        },
        {
            "heading": "Appendix A. An alternative optimization",
            "text": "approach\nThere exists an alternative construction (inspired by (Goodfellow et al., 2014)) that leads to the same updates (4)-(6). Rather than using the gradient reversal layer, the construction introduces two different loss functions for the domain classifier. Minimization of the first domain loss (Ld+) should lead to a better domain discrimination, while the second domain loss (Ld\u2212) is minimized when the domains are distinct. Stochastic updates for \u03b8f and \u03b8d are then defined as:\n\u03b8f \u2190\u2212 \u03b8f \u2212 \u00b5 ( \u2202Liy \u2202\u03b8f + \u2202Lid\u2212 \u2202\u03b8f )\n\u03b8d \u2190\u2212 \u03b8d \u2212 \u00b5 \u2202Lid+ \u2202\u03b8d ,\nThus, different parameters participate in the optimization of different losses In this framework, the gradient reversal layer constitutes a special case, corresponding to the pair of domain losses (Ld,\u2212\u03bbLd). However, other pairs of loss functions can be used. One example would be the binomial cross-entropy (Goodfellow et al., 2014):\nLd+(q, d) = \u2211 i=1..N di log(qi) + (1\u2212 di) log(1\u2212 qi) ,\nwhere d indicates domain indices and q is an output of the predictor. In that case \u201cadversarial\u201d loss is easily obtained by swapping domain labels, i.e.Ld\u2212(q, d) = Ld+(q, 1\u2212d). This particular pair has a potential advantage of producing stronger gradients at early learning stages if the domains are quite dissimilar. In our experiments, however, we did not observe any significant improvement resulting from this choice of losses."
        },
        {
            "heading": "Appendix B. CNN architectures",
            "text": "Four different architectures were used in our experiments (first three are shown in Figure 5):\n\u2022 A smaller one (a) if the source domain is MNIST. This architecture was inspired by the classical LeNet-5 (LeCun et al., 1998).\n\u2022 (b) for the experiments involving SVHN dataset. This one is adopted from (Srivastava et al., 2014).\n\u2022 (c) in the SYN SINGS \u2192 GTSRB setting. We used the single-CNN baseline from (Cires\u0327an et al., 2012) as our starting point.\n\u2022 Finally, we use pre-trained AlexNet from the Caffe-package (Jia et al., 2014) for the OFFICE domains. Adaptation architecture is identical to (Tzeng et al., 2014): 2-layer domain classifier (x \u2192 1024 \u2192\n1024 \u2192 2) is attached to the 256-dimensional bottleneck of fc7.\nThe domain classifier branch in all cases is somewhat arbitrary (better adaptation performance might be attained if this part of the architecture is tuned)."
        },
        {
            "heading": "Appendix C. Training procedure",
            "text": "We use stochastic gradient descent with 0.9 momentum and the learning rate annealing described by the following formula:\n\u00b5p = \u00b50\n(1 + \u03b1 \u00b7 p)\u03b2 ,\nwhere p is the training progress linearly changing from 0 to 1, \u00b50 = 0.01, \u03b1 = 10 and \u03b2 = 0.75 (the schedule was optimized to promote convergence and low error on the source domain). Following (Srivastava et al., 2014) we also use dropout and `2-norm restriction when we train the SVHN architecture."
        }
    ],
    "title": "Unsupervised Domain Adaptation by Backpropagation",
    "year": 2015
}