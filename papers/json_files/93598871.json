{
    "abstractText": "Several variants of the Long Short-Term Memory (LSTM) architecture for recurrent neural networks have been proposed since its inception in 1995. In recent years, these networks have become the state-of-the-art models for a variety of machine learning problems. This has led to a renewed interest in understanding the role and utility of various computational components of typical LSTM variants. In this paper, we present the first large-scale analysis of eight LSTM variants on three representative tasks: speech recognition, handwriting recognition, and polyphonic music modeling. The hyperparameters of all LSTM variants for each task were optimized separately using random search, and their importance was assessed using the powerful fANOVA framework. In total, we summarize the results of 5400 experimental runs (\u2248 15 years of CPU time), which makes our study the largest of its kind on LSTM networks. Our results show that none of the variants can improve upon the standard LSTM architecture significantly, and demonstrate the forget gate and the output activation function to be its most critical components. We further observe that the studied hyperparameters are virtually independent and derive guidelines for their efficient adjustment.",
    "authors": [
        {
            "affiliations": [],
            "name": "Klaus Greff"
        },
        {
            "affiliations": [],
            "name": "Rupesh K. Srivastava"
        },
        {
            "affiliations": [],
            "name": "Jan Koutn\u0131\u0301k"
        },
        {
            "affiliations": [],
            "name": "Bas R. Steunebrink"
        },
        {
            "affiliations": [],
            "name": "J\u00fcrgen Schmidhuber"
        }
    ],
    "id": "SP:a7976c2bacfbb194ddbe7fd10c2e50a545cf4081",
    "references": [
        {
            "authors": [
                "Sepp Hochreiter"
            ],
            "title": "Untersuchungen zu dynamischen neuronalen Netzen",
            "venue": "Masters Thesis, Technische Universita\u0308t Mu\u0308nchen, Mu\u0308nchen,",
            "year": 1991
        },
        {
            "authors": [
                "S. Hochreiter",
                "Y. Bengio",
                "P. Frasconi",
                "J. Schmidhuber"
            ],
            "title": "Gradient flow in recurrent nets: the difficulty of learning long-term dependencies",
            "year": 2001
        },
        {
            "authors": [
                "A Graves",
                "M Liwicki",
                "S Fernandez",
                "R Bertolami",
                "H Bunke",
                "J Schmidhuber"
            ],
            "title": "A Novel Connectionist System for Improved Unconstrained Handwriting Recognition",
            "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence,",
            "year": 2009
        },
        {
            "authors": [
                "Vu Pham",
                "Th\u00e9odore Bluche",
                "Christopher Kermorvant",
                "J\u00e9r\u00f4me Louradour"
            ],
            "title": "Dropout improves Recurrent Neural Networks for Handwriting Recognition",
            "venue": "[cs],",
            "year": 2013
        },
        {
            "authors": [
                "Patrick Doetsch",
                "Michal Kozielski",
                "Hermann Ney"
            ],
            "title": "Fast and robust training of recurrent neural networks for offline handwriting recognition",
            "venue": "In 14th International Conference on Frontiers in Handwriting Recognition,",
            "year": 2014
        },
        {
            "authors": [
                "Alex Graves"
            ],
            "title": "Generating sequences with recurrent neural networks",
            "venue": "[cs],",
            "year": 2013
        },
        {
            "authors": [
                "Wojciech Zaremba",
                "Ilya Sutskever",
                "Oriol Vinyals"
            ],
            "title": "Recurrent Neural Network Regularization",
            "venue": "[cs],",
            "year": 2014
        },
        {
            "authors": [
                "Thang Luong",
                "Ilya Sutskever",
                "Quoc V. Le",
                "Oriol Vinyals",
                "Wojciech Zaremba"
            ],
            "title": "Addressing the Rare Word Problem in Neural Machine Translation",
            "venue": "arXiv preprint arXiv:1410.8206,",
            "year": 2014
        },
        {
            "authors": [
                "Hasim Sak",
                "Andrew Senior",
                "Fran\u00e7oise Beaufays"
            ],
            "title": "Long short-term memory recurrent neural network architectures for large scale acoustic modeling",
            "venue": "In Proceedings of the Annual Conference of International Speech Communication Association (INTERSPEECH),",
            "year": 2014
        },
        {
            "authors": [
                "Yuchen Fan",
                "Yao Qian",
                "Fenglong Xie",
                "Frank K. Soong"
            ],
            "title": "TTS synthesis with bidirectional LSTM based recurrent neural networks",
            "venue": "In Proc. Interspeech,",
            "year": 2014
        },
        {
            "authors": [
                "S\u00f8ren Kaae S\u00f8nderby",
                "Ole Winther"
            ],
            "title": "Protein Secondary Structure Prediction with Long Short Term Memory Networks",
            "venue": "URL http://arxiv.org/abs/1412.7828",
            "year": 2014
        },
        {
            "authors": [
                "E. Marchi",
                "G. Ferroni",
                "F. Eyben",
                "L. Gabrielli",
                "S. Squartini",
                "B. Schuller"
            ],
            "title": "Multi-resolution linear prediction based features for audio onset detection with bidirectional LSTM neural networks",
            "venue": "IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP),",
            "year": 2014
        },
        {
            "authors": [
                "Jeff Donahue",
                "Lisa Anne Hendricks",
                "Sergio Guadarrama",
                "Marcus Rohrbach",
                "Subhashini Venugopalan",
                "Kate Saenko",
                "Trevor Darrell"
            ],
            "title": "Long-term Recurrent Convolutional Networks for Visual Recognition and Description",
            "venue": "[cs],",
            "year": 2014
        },
        {
            "authors": [
                "Sepp Hochreiter",
                "J\u00fcrgen Schmidhuber"
            ],
            "title": "Long Short Term Memory",
            "venue": "Technical Report FKI-207-95,",
            "year": 1995
        },
        {
            "authors": [
                "Sepp Hochreiter",
                "J\u00fcrgen Schmidhuber"
            ],
            "title": "Long Short- Term Memory",
            "venue": "Neural Computation,",
            "year": 1997
        },
        {
            "authors": [
                "R.L. Anderson"
            ],
            "title": "Recent Advances in Finding Best Operating Conditions",
            "venue": "Journal of the American Statistical Association,",
            "year": 1953
        },
        {
            "authors": [
                "Francisco J. Solis",
                "Roger J.-B. Wets"
            ],
            "title": "Minimization by Random Search Techniques",
            "venue": "Mathematics of Operations Research,",
            "year": 1981
        },
        {
            "authors": [
                "James Bergstra",
                "Yoshua Bengio"
            ],
            "title": "Random search for hyper-parameter optimization",
            "venue": "The Journal of Machine Learning Research,",
            "year": 2012
        },
        {
            "authors": [
                "Frank Hutter",
                "Holger Hoos",
                "Kevin Leyton-Brown"
            ],
            "title": "An Efficient Approach for Assessing Hyperparameter Importance",
            "year": 2014
        },
        {
            "authors": [
                "Alex Graves",
                "J\u00fcrgen Schmidhuber"
            ],
            "title": "Framewise phoneme classification with bidirectional LSTM and other neural network architectures",
            "venue": "Neural Networks,",
            "year": 2005
        },
        {
            "authors": [
                "Felix A. Gers",
                "J\u00fcrgen Schmidhuber",
                "Fred Cummins"
            ],
            "title": "Learning to forget: Continual prediction with LSTM",
            "venue": "In Artificial Neural Networks,",
            "year": 1999
        },
        {
            "authors": [
                "Felix A. Gers",
                "J\u00fcrgen Schmidhuber"
            ],
            "title": "Recurrent nets that time and count",
            "venue": "In Neural Networks,",
            "year": 2000
        },
        {
            "authors": [
                "AJ Robinson",
                "Frank Fallside"
            ],
            "title": "The utility driven dynamic error propagation network",
            "venue": "University of Cambridge Department of Engineering,",
            "year": 1987
        },
        {
            "authors": [
                "R.J. Williams"
            ],
            "title": "Complexity of exact gradient computation algorithms for recurrent neural networks",
            "venue": "Technical Report Technical Report NU-CCS-89-27,",
            "year": 1989
        },
        {
            "authors": [
                "P.J. Werbos"
            ],
            "title": "Generalization of backpropagation with application to a recurrent gas market model",
            "venue": "Neural Networks,",
            "year": 1988
        },
        {
            "authors": [
                "JS Garofolo",
                "LF Lamel",
                "WM Fisher",
                "JG Fiscus",
                "DS Pallett",
                "NL Dahlgren"
            ],
            "title": "DARPA TIMIT Acoustic-Phonetic Continuous Speech Corpus CD-ROM",
            "venue": "National Institute of Standards and Technology, NTIS Order No PB91-",
            "year": 1993
        },
        {
            "authors": [
                "J Schmidhuber",
                "D Wierstra",
                "M Gagliolo",
                "F J Gomez"
            ],
            "title": "Training Recurrent Networks by EVOLINO",
            "venue": "Neural Computation,",
            "year": 2007
        },
        {
            "authors": [
                "Justin Bayer",
                "Daan Wierstra",
                "Julian Togelius",
                "J\u00fcrgen Schmidhuber"
            ],
            "title": "Evolving memory cell structures for sequence learning",
            "venue": "In Artificial Neural Networks\u2013ICANN",
            "year": 2009
        },
        {
            "authors": [
                "Rafal Jozefowicz",
                "Wojciech Zaremba",
                "Ilya Sutskever"
            ],
            "title": "An empirical exploration of recurrent network architectures",
            "venue": "In Proceedings of the 32nd International Conference on Machine Learning",
            "year": 2015
        },
        {
            "authors": [
                "Sebastian Otte",
                "Marcus Liwicki",
                "Andreas Zell"
            ],
            "title": "Dynamic Cortex Memory: Enhancing Recurrent Neural Networks for Gradient-Based Sequence Learning",
            "year": 2014
        },
        {
            "authors": [
                "Kyunghyun Cho",
                "Bart van Merrienboer",
                "Caglar Gulcehre",
                "Fethi Bougares",
                "Holger Schwenk",
                "Yoshua Bengio"
            ],
            "title": "Learning Phrase Representations using RNN Encoder- Decoder for Statistical Machine Translation",
            "venue": "arXiv preprint arXiv:1406.1078,",
            "year": 2014
        },
        {
            "authors": [
                "Junyoung Chung",
                "Caglar Gulcehre",
                "KyungHyun Cho",
                "Yoshua Bengio"
            ],
            "title": "Empirical Evaluation of Gated Recurrent Neural Networks on Sequence Modeling",
            "venue": "[cs],",
            "year": 2014
        },
        {
            "authors": [
                "David Crystal"
            ],
            "title": "Dictionary of linguistics and phonetics, volume 30",
            "year": 2011
        },
        {
            "authors": [
                "P. Mermelstein"
            ],
            "title": "Distance measures for speech recognition: Psychological and instrumental",
            "venue": "Pattern Recognition and Artificial Intelligence,",
            "year": 1976
        },
        {
            "authors": [
                "Alexander Graves"
            ],
            "title": "Supervised Sequence Labelling with Recurrent Neural Networks. Ph.d",
            "year": 2008
        },
        {
            "authors": [
                "Andrew K. Halberstadt"
            ],
            "title": "Heterogeneous acoustic measurements and multiple classifiers for speech recognition",
            "venue": "PhD thesis, Massachusetts Institute of Technology,",
            "year": 1998
        },
        {
            "authors": [
                "Marcus Liwicki",
                "Horst Bunke"
            ],
            "title": "IAM-OnDB-an on-line English sentence database acquired from handwritten text on a whiteboard",
            "venue": "In Document Analysis and Recognition,",
            "year": 2005
        },
        {
            "authors": [
                "Alex Graves",
                "Santiago Fern\u00e1ndez",
                "Faustino Gomez",
                "J\u00fcrgen Schmidhuber"
            ],
            "title": "Connectionist temporal classification: labelling unsegmented sequence data with recurrent neural networks",
            "venue": "In Proceedings of the 23rd international conference on Machine learning,",
            "year": 2006
        },
        {
            "authors": [
                "Moray Allan",
                "Christopher KI Williams"
            ],
            "title": "Harmonising chorales by probabilistic inference",
            "venue": "Advances in neural information processing systems,",
            "year": 2005
        },
        {
            "authors": [
                "Nicolas Boulanger-Lewandowski",
                "Yoshua Bengio",
                "Pascal Vincent"
            ],
            "title": "Modeling Temporal Dependencies in High-Dimensional Sequences: Application to Polyphonic Music Generation and Transcription",
            "year": 2012
        },
        {
            "authors": [
                "Ilya Sutskever",
                "James Martens",
                "George Dahl",
                "Geoffrey Hinton"
            ],
            "title": "On the importance of initialization and momen- TRANSACTIONS ON NEURAL NETWORKS AND LEARNING SYSTEMS 12 tum in deep learning",
            "venue": "In JMLR,",
            "year": 2013
        },
        {
            "authors": [
                "Jasper Snoek",
                "Hugo Larochelle",
                "Ryan P Adams"
            ],
            "title": "Practical Bayesian Optimization of Machine Learning Algorithms",
            "venue": "Advances in Neural Information Processing Systems",
            "year": 2012
        },
        {
            "authors": [
                "F. Hutter",
                "H.H. Hoos",
                "K. Leyton-Brown"
            ],
            "title": "Sequential Model-Based Optimization for General Algorithm Klaus Greff received",
            "venue": "He works as machine learning researcher at The Swiss AI Lab IDSIA",
            "year": 2011
        },
        {
            "authors": [
                "Alex Graves",
                "Marcus Liwicki",
                "Horst Bunke",
                "J\u00fcrgen Schmidhuber",
                "Santiago Fern\u00e1ndez"
            ],
            "title": "Unconstrained on-line handwriting recognition with recurrent neural networks",
            "venue": "In Advances in Neural Information Processing Systems,",
            "year": 2008
        }
    ],
    "sections": [
        {
            "text": "Index Terms\u2014Recurrent neural networks, Long Short-Term Memory, LSTM, sequence learning, random search, fANOVA.\nI. INTRODUCTION\nRecurrent neural networks with Long Short-Term Memory (which we will concisely refer to as LSTMs) have emerged as an effective and scalable model for several learning problems related to sequential data. Earlier methods for attacking these problems have either been tailored towards a specific problem or did not scale to long time dependencies. LSTMs on the other hand are both general and effective at capturing longterm temporal dependencies. They do not suffer from the optimization hurdles that plague simple recurrent networks (SRNs) [1, 2] and have been used to advance the state-ofthe-art for many difficult problems. This includes handwriting recognition [3\u20135] and generation [6], language modeling [7] and translation [8], acoustic modeling of speech [9], speech\nc\u00a92016 IEEE. Personal use of this material is permitted. Permission from IEEE must be obtained for all other uses, in any current or future media, including reprinting/republishing this material for advertising or promotional purposes, creating new collective works, for resale or redistribution to servers or lists, or reuse of any copyrighted component of this work in other works. Manuscript received May 15, 2015; revised March 17, 2016; accepted June 9, 2016. Date of publication July 8, 2016; date of current version June 20, 2016. DOI: 10.1109/TNNLS.2016.2582924\nThis research was supported by the Swiss National Science Foundation grants \u201cTheory and Practice of Reinforcement Learning 2\u201d (#138219) and \u201cAdvanced Reinforcement Learning\u201d (#156682), and by EU projects \u201cNASCENCE\u201d (FP7-ICT-317662), \u201cNeuralDynamics\u201d (FP7-ICT-270247) and WAY (FP7ICT-288551).\nK. Greff, R. K. Srivastava, J. Kout\u0131\u0301k, B. R. Steunebrink and J. Schmidhuber are with the Istituto Dalle Molle di studi sull\u2019Intelligenza Artificiale (IDSIA), the Scuola universitaria professionale della Svizzera italiana (SUPSI), and the Universita\u0300 della Svizzera italiana (USI).\nAuthor e-mails addresses: {klaus, rupesh, hkou, bas, juergen}@idsia.ch\nsynthesis [10], protein secondary structure prediction [11], analysis of audio [12], and video data [13] among others.\nThe central idea behind the LSTM architecture is a memory cell which can maintain its state over time, and non-linear gating units which regulate the information flow into and out of the cell. Most modern studies incorporate many improvements that have been made to the LSTM architecture since its original formulation [14, 15]. However, LSTMs are now applied to many learning problems which differ significantly in scale and nature from the problems that these improvements were initially tested on. A systematic study of the utility of various computational components which comprise LSTMs (see Figure 1) was missing. This paper fills that gap and systematically addresses the open question of improving the LSTM architecture.\nWe evaluate the most popular LSTM architecture (vanilla LSTM; Section II) and eight different variants thereof on three benchmark problems: acoustic modeling, handwriting recognition, and polyphonic music modeling. Each variant differs from the vanilla LSTM by a single change. This allows us to isolate the effect of each of these changes on the performance of the architecture. Random search [16\u2013 18] is used to find the best-performing hyperparameters for each variant on each problem, enabling a reliable comparison of the performance of different variants. We also provide insights gained about hyperparameters and their interaction using fANOVA [19].\nII. VANILLA LSTM\nThe LSTM setup most commonly used in literature was originally described by Graves and Schmidhuber [20]. We refer to it as vanilla LSTM and use it as a reference for comparison of all the variants. The vanilla LSTM incorporates changes by Gers et al. [21] and Gers and Schmidhuber [22] into the original LSTM [15] and uses full gradient training. Section III provides descriptions of these major LSTM changes.\nA schematic of the vanilla LSTM block can be seen in Figure 1. It features three gates (input, forget, output), block input, a single cell (the Constant Error Carousel), an output activation function, and peephole connections1. The output of the block is recurrently connected back to the block input and all of the gates.\n1Some studies omit peephole connections, described in Section III-B.\nar X\niv :1\n50 3.\n04 06\n9v 2\n[ cs\n.N E\n] 4\nO ct\n2 01\n7"
        },
        {
            "heading": "A. Forward Pass",
            "text": "Let xt be the input vector at time t, N be the number of LSTM blocks and M the number of inputs. Then we get the following weights for an LSTM layer:\n\u2022 Input weights: Wz , Wi, Wf , Wo \u2208 RN\u00d7M \u2022 Recurrent weights: Rz , Ri, Rf , Ro \u2208 RN\u00d7N \u2022 Peephole weights: pi, pf , po \u2208 RN \u2022 Bias weights: bz , bi, bf , bo \u2208 RN\nThen the vector formulas for a vanilla LSTM layer forward pass can be written as:\nz\u0304t = Wzx t + Rzy t\u22121 + bz zt = g(z\u0304t) block input\ni\u0304t = Wix t + Riy t\u22121 + pi ct\u22121 + bi it = \u03c3(\u0304it) input gate\nf\u0304 t = Wfx t + Rfy t\u22121 + pf ct\u22121 + bf f t = \u03c3(f\u0304 t) forget gate ct = zt it + ct\u22121 f t cell o\u0304t = Wox t + Roy t\u22121 + po ct + bo ot = \u03c3(o\u0304t) output gate\nyt = h(ct) ot block output\nWhere \u03c3, g and h are point-wise non-linear activation functions. The logistic sigmoid (\u03c3(x) = 11+e\u2212x ) is used as gate activation function and the hyperbolic tangent (g(x) = h(x) = tanh(x)) is usually used as the block input and output activation function. Point-wise multiplication of two vectors is denoted by ."
        },
        {
            "heading": "B. Backpropagation Through Time",
            "text": "The deltas inside the LSTM block are then calculated as:\n\u03b4yt = \u2206t + RTz \u03b4z t+1 + RTi \u03b4i t+1 + RTf \u03b4f t+1 + RTo \u03b4o t+1 \u03b4o\u0304t = \u03b4yt h(ct) \u03c3\u2032(o\u0304t) \u03b4ct = \u03b4yt ot h\u2032(ct) + po \u03b4o\u0304t + pi \u03b4i\u0304t+1\n+ pf \u03b4f\u0304 t+1 + \u03b4ct+1 f t+1\n\u03b4f\u0304 t = \u03b4ct ct\u22121 \u03c3\u2032(f\u0304 t) \u03b4i\u0304t = \u03b4ct zt \u03c3\u2032(\u0304it) \u03b4z\u0304t = \u03b4ct it g\u2032(z\u0304t)\nHere \u2206t is the vector of deltas passed down from the layer above. If E is the loss function it formally corresponds to \u2202E\u2202yt , but not including the recurrent dependencies. The deltas for the inputs are only needed if there is a layer below that needs training, and can be computed as follows:\n\u03b4xt = WTz \u03b4z\u0304 t + WTi \u03b4i\u0304 t + WTf \u03b4f\u0304 t + WTo \u03b4o\u0304 t\nFinally, the gradients for the weights are calculated as follows, where ? can be any of {z\u0304, i\u0304, f\u0304 , o\u0304}, and \u3008?1, ?2\u3009 denotes the outer product of two vectors:\n\u03b4W? = T\u2211 t=0 \u3008\u03b4?t,xt\u3009 \u03b4pi = T\u22121\u2211 t=0 ct \u03b4i\u0304t+1\n\u03b4R? = T\u22121\u2211 t=0 \u3008\u03b4?t+1,yt\u3009 \u03b4pf = T\u22121\u2211 t=0 ct \u03b4f\u0304 t+1\n\u03b4b? = T\u2211 t=0 \u03b4?t \u03b4po = T\u2211 t=0 ct \u03b4o\u0304t"
        },
        {
            "heading": "III. HISTORY OF LSTM",
            "text": "The initial version of the LSTM block [14, 15] included (possibly multiple) cells, input and output gates, but no forget gate and no peephole connections. The output gate, unit biases, or input activation function were omitted for certain experiments. Training was done using a mixture of Real Time Recurrent Learning (RTRL) [23, 24] and Backpropagation Through Time (BPTT) [24, 25]. Only the gradient of the cell was propagated back through time, and the gradient for the other recurrent connections was truncated. Thus, that study did not use the exact gradient for training. Another feature of that version was the use of full gate recurrence, which means that all the gates received recurrent inputs from all gates at the previous time-step in addition to the recurrent inputs from the block outputs. This feature did not appear in any of the later papers."
        },
        {
            "heading": "A. Forget Gate",
            "text": "The first paper to suggest a modification of the LSTM architecture introduced the forget gate [21], enabling the LSTM to reset its own state. This allowed learning of continual tasks such as embedded Reber grammar."
        },
        {
            "heading": "B. Peephole Connections",
            "text": "Gers and Schmidhuber [22] argued that in order to learn precise timings, the cell needs to control the gates. So far this was only possible through an open output gate. Peephole connections (connections from the cell to the gates, blue in Figure 1) were added to the architecture in order to make precise timings easier to learn. Additionally, the output activation function was omitted, as there was no evidence that it was essential for solving the problems that LSTM had been tested on so far."
        },
        {
            "heading": "C. Full Gradient",
            "text": "The final modification towards the vanilla LSTM was done by Graves and Schmidhuber [20]. This study presented the full backpropagation through time (BPTT) training for LSTM networks with the architecture described in Section II, and presented results on the TIMIT [26] benchmark. Using full BPTT had the added advantage that LSTM gradients could be checked using finite differences, making practical implementations more reliable."
        },
        {
            "heading": "D. Other Variants",
            "text": "Since its introduction the vanilla LSTM has been the most commonly used architecture, but other variants have been suggested too. Before the introduction of full BPTT training, Gers et al. [27] utilized a training method based on Extended Kalman Filtering which enabled the LSTM to be trained on some pathological cases at the cost of high computational complexity. Schmidhuber et al. [28] proposed using a hybrid evolution-based method instead of BPTT for training but retained the vanilla LSTM architecture.\nBayer et al. [29] evolved different LSTM block architectures that maximize fitness on context-sensitive grammars. A larger\nstudy of this kind was later done by Jozefowicz et al. [30]. Sak et al. [9] introduced a linear projection layer that projects the output of the LSTM layer down before recurrent and forward connections in order to reduce the amount of parameters for LSTM networks with many blocks. By introducing a trainable scaling parameter for the slope of the gate activation functions, Doetsch et al. [5] were able to improve the performance of LSTM on an offline handwriting recognition dataset. In what they call Dynamic Cortex Memory, Otte et al. [31] improved convergence speed of LSTM by adding recurrent connections between the gates of a single block (but not between the blocks).\nCho et al. [32] proposed a simplified variant of the LSTM architecture called Gated Recurrent Unit (GRU). They used neither peephole connections nor output activation functions, and coupled the input and the forget gate into an update gate. Finally, their output gate (called reset gate) only gates the recurrent connections to the block input (Wz). Chung et al. [33] performed an initial comparison between GRU and Vanilla LSTM and reported mixed results."
        },
        {
            "heading": "IV. EVALUATION SETUP",
            "text": "The focus of our study is to empirically compare different LSTM variants, and not to achieve state-of-the-art results. Therefore, our experiments are designed to keep the setup simple and the comparisons fair. The vanilla LSTM is used as a baseline and evaluated together with eight of its variants. Each variant adds, removes, or modifies the baseline in exactly one aspect, which allows to isolate their effect. They are evaluated on three different datasets from different domains to account for cross-domain variations.\nFor fair comparison, the setup needs to be similar for each variant. Different variants might require different settings of hyperparameters to give good performance, and we are interested in the best performance that can be achieved with each variant. For this reason we chose to tune the hyperparameters like learning rate or amount of input noise individually for each variant. Since hyperparameter space is large and impossible to traverse completely, random search was used in order to obtain good-performing hyperparameters [18] for every combination of variant and dataset. Random search was also chosen for the added benefit of providing enough data for analyzing the general effect of various hyperparameters on the performance of each LSTM variant (Section V-B)."
        },
        {
            "heading": "A. Datasets",
            "text": "Each dataset is split into three parts: a training set, a validation set used for early stopping and for optimizing the hyperparameters, and a test set for the final evaluation.\nTIMIT: The TIMIT Speech corpus [26] is large enough to be a reasonable acoustic modeling benchmark for speech recognition, yet it is small enough to keep a large study such as ours manageable. Our experiments focus on the frame-wise classification task for this dataset, where the objective is to\nclassify each audio-frame as one of 61 phones.2 From the raw audio we extract 12 Mel Frequency Cepstrum Coefficients (MFCCs) [35] + energy over 25ms hamming-windows with stride of 10ms and a pre-emphasis coefficient of 0.97. This preprocessing is standard in speech recognition and was chosen in order to stay comparable with earlier LSTM-based results (e.g. [20, 36]). The 13 coefficients along with their first and second derivatives comprise the 39 inputs to the network and were normalized to have zero mean and unit variance.\nThe performance is measured as classification error percentage. The training, testing, and validation sets are split in line with Halberstadt [37] into 3696, 400, and 192 sequences, having 304 frames on average.\nWe restrict our study to the core test set, which is an established subset of the full TIMIT corpus, and use the splits into training, testing, and validation sets as detailed by Halberstadt [37]. In short, that means we only use the core test set and drop the SA samples3 from the training set. The validation set is built from some of the discarded samples from the full test set.\nIAM Online: The IAM Online Handwriting Database [38]4 consists of English sentences as time series of pen movements that have to be mapped to characters. The IAM-OnDB dataset splits into one training set, two validation sets, and one test set, having 775, 192, 216, and 544 boards each. Each board, see Figure 2(a), contains multiple hand-written lines, which in turn consist of several strokes. We use one line per sequence, and\n2Note that in linguistics a phone represents a distinct speech sound independent of the language. In contrast, a phoneme refers to a sound that distinguishes two words in a given language [34]. These terms are often confused in the machine learning literature.\n3The dialect sentences (the SA samples) were meant to expose the dialectal variants of the speakers and were read by all 630 speakers. We follow [37] and remove them because they bias the distribution of phones.\n4The IAM-OnDB was obtained from http://www.iam.unibe.ch/fki/databases/ iam-on-line-handwriting-database\njoined the two validation sets together, so the final training, validation, and testing sets contain 5 355, 2 956 and 3 859 sequences respectively.\nEach handwriting line is accompanied with a target character sequence, see Figure 2(b), assembled from the following 81 ASCII characters:\nabcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789 !\"#&\\\u2019()*+,-./[]:;?\nThe board labeled as a08-551z (in the training set) contains a sequence of eleven percent (%) characters that does not have an image in the strokes, and the percent character does not occur in any other board. That board was removed from the experiments.\nWe subsampled each sequence to half its length, which speeds up the training and does not harm performance. Each frame of the sequence is a 4-dimensional vector containing \u2206x, \u2206y (the change in pen position), t (time since the beginning of the stroke), and a fourth dimension that contains value of one at the time of the pen lifting (a transition to the next stroke) and zeroes at all other time steps. Possible starts and ends of characters within each stroke are not explicitly marked. No additional preprocessing (like base-line straightening, cursive correction, etc.) was used.\nThe networks were trained using the Connectionist Temporal Classification (CTC) error function by Graves et al. [39] with 82 outputs (81 characters plus the special empty label). We measure performance in terms of the Character Error Rate (CER) after decoding using best-path decoding [39].\nJSB Chorales: JSB Chorales is a collection of 382 fourpart harmonized chorales by J. S. Bach [40], consisting of 202 chorales in major keys and 180 chorals in minor keys. We used the preprocessed piano-rolls provided by BoulangerLewandowski et al. [41].5 These piano-rolls were generated by transposing each MIDI sequence in C major or C minor and sampling frames every quarter note. The networks where trained to do next-step prediction by minimizing the negative log-likelihood. The complete dataset consists of 229, 76, and 77 sequences (training, validation, and test sets respectively) with an average length of 61."
        },
        {
            "heading": "B. Network Architectures & Training",
            "text": "A network with a single LSTM hidden layer and a sigmoid output layer was used for the JSB Chorales task. Bidirectional LSTM [20] was used for TIMIT and IAM Online tasks, consisting of two hidden layers, one processing the input forwards and the other one backwards in time, both connected to a single softmax output layer. As loss function we employed Cross-Entropy Error for TIMIT and JSB Chorales, while for the IAM Online task the Connectionist Temporal Classification (CTC) loss by Graves et al. [39] was used. The initial weights for all networks were drawn from a normal distribution with standard deviation of 0.1. Training was done using Stochastic Gradient Descent with Nesterov-style momentum [42] with\n5Available at http://www-etud.iro.umontreal.ca/\u223cboulanni/icml2012 at the time of writing.\nupdates after each sequence. The learning rate was rescaled by a factor of (1\u2212momentum). Gradients were computed using full BPTT for LSTMs [20]. Training stopped after 150 epochs or once there was no improvement on the validation set for more than fifteen epochs."
        },
        {
            "heading": "C. LSTM Variants",
            "text": "The vanilla LSTM from Section II is referred as Vanilla (V). For activation functions we follow the standard and use the logistic sigmoid for \u03c3, and the hyperbolic tangent for both g and h. The derived eight variants of the V architecture are the following. We only report differences to the forward pass formulas presented in Section II-A:\nNIG: No Input Gate: it = 1 NFG: No Forget Gate: f t = 1 NOG: No Output Gate: ot = 1 NIAF: No Input Activation Function: g(x) = x\nNOAF: No Output Activation Function: h(x) = x CIFG: Coupled Input and Forget Gate: f t = 1\u2212 it\nNP: No Peepholes:\ni\u0304t = Wix t + Riy t\u22121 + bi f\u0304 t = Wfx t + Rfy t\u22121 + bf o\u0304t = Wox t + Roy t\u22121 + bo\nFGR: Full Gate Recurrence:\ni\u0304t = Wix t + Riy t\u22121 + pi ct\u22121 + bi + Riii t\u22121 + Rfif t\u22121 + Roio t\u22121 f\u0304 t = Wfx t + Rfy\nt\u22121 + pf ct\u22121 + bf + Rif i t\u22121 + Rff f t\u22121 + Rofo t\u22121\no\u0304t = Wox t + Roy t\u22121 + po ct\u22121 + bo + Rioi t\u22121 + Rfof t\u22121 + Rooo t\u22121\nThe first six variants are self-explanatory. The CIFG variant uses only one gate for gating both the input and the cell recurrent self-connection \u2013 a modification of LSTM referred to as Gated Recurrent Units (GRU) [32]. This is equivalent to setting ft = 1\u2212 it instead of learning the forget gate weights independently. The FGR variant adds recurrent connections between all the gates as in the original formulation of the LSTM [15]. It adds nine additional recurrent weight matrices, thus significantly increasing the number of parameters."
        },
        {
            "heading": "D. Hyperparameter Search",
            "text": "While there are other methods to efficiently search for good hyperparameters (cf. [43, 44]), random search has several advantages for our setting: it is easy to implement, trivial to parallelize, and covers the search space more uniformly, thereby improving the follow-up analysis of hyperparameter importance.\nWe performed 27 random searches (one for each combination of the nine variants and three datasets). Each random search encompasses 200 trials for a total of 5400 trials of randomly sampling the following hyperparameters:\n\u2022 number of LSTM blocks per hidden layer: log-uniform samples from [20, 200];\n\u2022 learning rate: log-uniform samples from [10\u22126, 10\u22122]; \u2022 momentum: 1\u2212 log-uniform samples from [0.01, 1.0]; \u2022 standard deviation of Gaussian input noise: uniform samples\nfrom [0, 1]. In the case of the TIMIT dataset, two additional (boolean) hyperparameters were considered (not tuned for the other two datasets). The first one was the choice between traditional momentum and Nesterov-style momentum [42]. Our analysis showed that this had no measurable effect on performance so the latter was arbitrarily chosen for all further experiments. The second one was whether to clip the gradients to the range [\u22121, 1]. This turned out to hurt overall performance,6 therefore the gradients were never clipped in the case of the other two datasets.\nNote that, unlike an earlier small-scale study [33], the number of parameters was not kept fixed for all variants. Since different variants can utilize their parameters differently, fixing this number can bias comparisons."
        },
        {
            "heading": "V. RESULTS & DISCUSSION",
            "text": "Each of the 5400 experiments was run on one of 128 AMD Opteron CPUs at 2.5 GHz and took 24.3 h on average to complete. This sums up to a total single-CPU computation time of just below 15 years.\nFor TIMIT the test set performance of the best trial were 29.6% classification error (CIFG) which is close to the best reported result of 26.9% [20]. Our best result of -8.38 loglikelihood (NIAF) on the JSB Chorales dataset on the other hand is well below the -5.56 from Boulanger-Lewandowski et al. [41]. Best LSTM result is 26.9% For the IAM Online dataset our best result was a Character Error Rate of 9.26% (NP) on the test set. The best previously published result is 11.5% CER by Graves et al. [45] using a different and much more extensive preprocessing.7 Note though, that the goal of this study is not to provide state-of-the-art results, but to do a fair comparison of different LSTM variants. So these numbers are only meant as a rough orientation for the reader."
        },
        {
            "heading": "A. Comparison of the Variants",
            "text": "A summary of the random search results is shown in Figure 3. Welch\u2019s t-test at a significance level of p = 0.05 was used8 to determine whether the mean test set performance of each variant was significantly different from that of the baseline. The box for a variant is highlighted in blue if its mean performance differs significantly from the mean performance of the vanilla LSTM.\nThe results in the top half of Figure 3 represent the distribution of all 200 test set performances over the whole search space. Any conclusions drawn from them are therefore\n6Although this may very well be the result of the range having been chosen too tightly.\n7Note that these numbers differ from the best test set performances that can be found in Figure 3. This is the case because here we only report the single best performing trial as determined on the validation set. In Figure 3, on the other hand, we show the test set performance of the 20 best trials for each variant.\n8We applied the Bonferroni adjustment to correct for performing eight different tests (one for each variant).\nspecific to our choice of search ranges. We have tried to chose reasonable ranges for the hyperparameters that include the best settings for each variant and are still small enough to allow for an effective search. The means and variances tend to be rather similar for the different variants and datasets, but even here some significant differences can be found.\nIn order to draw some more interesting conclusions we restrict our further analysis to the top 10% performing trials for each combination of dataset and variant (see bottom half of Figure 3). This way our findings will be less dependent on the chosen search space and will be representative for the case of \u201creasonable hyperparameter tuning efforts.\u201d9\nThe first important observation based on Figure 3 is that removing the output activation function (NOAF) or the forget gate (NFG) significantly hurt performance on all three datasets. Apart from the CEC, the ability to forget old information and the squashing of the cell state appear to be critical for the LSTM architecture. Indeed, without the output activation function, the block output can in principle grow unbounded. Coupling the input and the forget gate avoids this problem and might render the use of an output non-linearity less important, which could explain why GRU performs well without it.\n9How much effort is \u201creasonable\u201d will still depend on the search space. If the ranges are chosen much larger, the search will take much longer to find good hyperparameters.\nInput and forget gate coupling (CIFG) did not significantly change mean performance on any of the datasets, although the best performance improved slightly on music modeling. Similarly, removing peephole connections (NP) also did not lead to significant changes, but the best performance improved slightly for handwriting recognition. Both of these variants simplify LSTMs and reduce the computational complexity, so it might be worthwhile to incorporate these changes into the architecture.\nAdding full gate recurrence (FGR) did not significantly change performance on TIMIT or IAM Online, but led to worse results on the JSB Chorales dataset. Given that this variant greatly increases the number of parameters, we generally advise against using it. Note that this feature was present in the original proposal of LSTM [14, 15], but has been absent in all following studies.\nRemoving the input gate (NIG), the output gate (NOG), and the input activation function (NIAF) led to a significant reduction in performance on speech and handwriting recognition. However, there was no significant effect on music modeling performance. A small (but statistically insignificant) average performance improvement was observed for the NIG and NIAF architectures on music modeling. We hypothesize that these behaviors will generalize to similar problems such as language modeling. For supervised learning on continuous real-valued\ndata (such as speech and handwriting recognition), the input gate, output gate, and input activation function are all crucial for obtaining good performance.\nB. Impact of Hyperparameters\nThe fANOVA framework for assessing hyperparameter importance by Hutter et al. [19] is based on the observation that marginalizing over dimensions can be done efficiently in regression trees. This allows predicting the marginal error for one hyperparameter while averaging over all the others. Traditionally this would require a full hyperparameter grid search, whereas here the hyperparameter space can be sampled at random.\nAverage performance for any slice of the hyperparameter space is obtained by first training a regression tree and then summing over its predictions along the corresponding subset of dimensions. To be precise, a random regression forest of 100 trees is trained and their prediction performance is averaged. This improves the generalization and allows for an estimation of uncertainty of those predictions. The obtained marginals can then be used to decompose the variance into additive components using the functional ANalysis Of VAriance (fANOVA) method [46] which provides an insight into the overall importance of hyperparameters and their interactions.\nLearning rate: Learning rate is the most important hyperparameter, therefore it is very important to understand how to set it correctly in order to achieve good performance. Figure 4 shows (in blue) how setting the learning rate value affects the predicted average performance on the test set. It is important to note that this is an average over all other hyperparameters and over all the trees in the regression forest. The shaded area around the curve indicates the standard deviation over tree predictions (not over other hyperparameters), thus quantifying the reliability of the average. The same is shown in green with the predicted average training time.\nThe plots in Figure 4 show that the optimal value for the learning rate is dependent on the dataset. For each dataset, there is a large basin (up to two orders of magnitude) of good learning rates inside of which the performance does not vary much. A related but unsurprising observation is that there is a sweet-spot for the learning rate at the high end of the basin.10 In this region, the performance is good and the training time is small. So while searching for a good learning rate for the LSTM, it is sufficient to do a coarse search by starting with a high value (e.g. 1.0) and dividing it by ten until performance stops increasing.\nFigure 5 also shows that the fraction of variance caused by the learning rate is much bigger than the fraction due to interaction between learning rate and hidden layer size (some part of the \u201chigher order\u201d piece, for more see below at Interaction of Hyperparameters). This suggests that the learning rate can be quickly tuned on a small network and then used to train a large one.\n10Note that it is unfortunately outside the investigated range for IAM Online and JSB Chorales. This means that ideally we should have chosen the range of learning rates to include higher values as well.\nHidden Layer Size: Not surprisingly the hidden layer size is an important hyperparameter affecting the LSTM network performance. As expected, larger networks perform better, but with diminishing returns. It can also be seen in Figure 4 (middle, green) that the required training time increases with the network size. Note that the scale here is wall-time and thus factors in both the increased computation time for each epoch as well as the convergence speed.\nInput Noise: Additive Gaussian noise on the inputs, a traditional regularizer for neural networks, has been used for LSTM as well. However, we find that not only does it almost always hurt performance, it also slightly increases training times. The only exception is TIMIT, where a small dip in error for the range of [0.2, 0.5] is observed.\nMomentum: One unexpected result of this study is that momentum affects neither performance nor training time in any significant way. This follows from the observation that for none of the datasets, momentum accounted for more than 1% of the variance of test set performance. It should be noted that for TIMIT the interaction between learning rate and momentum accounts for 2.5% of the total variance, but as with learning rate \u00d7 hidden size (cf. Interaction of Hyperparameters below) it does not reveal any interpretable structure. This may be the result of our choice to scale learning rates dependent on momentum (Section IV-B). These observations suggest that momentum does not offer substantial benefits when training LSTMs with online stochastic gradient descent.\nAnalysis of Variance: Figure 5 shows what fraction of the test set performance variance can be attributed to different hyperparameters. It is obvious that the learning rate is by far the most important hyperparameter, always accounting for more than two thirds of the variance. The next most important hyperparameter is the hidden layer size, followed by the input noise, leaving the momentum with less than one percent of the variance. Higher order interactions play an important role in the case of TIMIT, but are much less important for the other two data sets.\nInteraction of Hyperparameters: Some hyperparameters interact with each other resulting in different performance from what could be expected by looking at them individually. As shown in Figure 5 all these interactions together explain between 5% and 20% of the variance in test set performance. Understanding these interactions might allow us to speed up the search for good combinations of hyperparameters. To that end we visualize the interaction between all pairs of hyperparameters in Figure 6. Each heat map in the left part shows marginal performance for different values of the respective two hyperparameters. This is the average performance predicted by the decision forest when marginalizing over all other hyperparameters. So each one is the 2D version of the performance plots from Figure 4 in the paper.\nThe right side employs the idea of ANOVA to better illustrate the interaction between the hyperparameters. This means that variance of performance that can be explained by varying a single hyperparameter has been removed. In case two hyperparameters do not interact at all (are perfectly independent), that residual would thus be all zero (grey).\nFor example, looking at the pair hidden size and learning rate on the left side for the TIMIT dataset, we can see that performance varies strongly along the x-axis (learning rate), first decreasing and then increasing again. This is what we would expect knowing the valley-shape of the learning rate from Figure 4. Along the y-axis (hidden size) performance seems to decrease slightly from top to bottom. Again this is roughly what we would expect from the hidden size plot in Figure 4.\nOn the right side of Figure 6 we can see for the same pair of hyperparameters how their interaction differs from the case of them being completely independent. This heat map exhibits less structure, and it may in fact be the case that we would need more samples to properly analyze the interplay between them. However, given our observations so far this might not be worth the effort. In any case, it is clear from the plot on the left that varying the hidden size does not change the region of optimal learning rate.\nOne clear interaction pattern can be observed in the IAM Online and JSB datasets between learning rate and input noise. Here it can be seen that for high learning rates (' 10\u22124) lower input noise (/ .5) is better like also observed in the marginals from Figure 4. But this trend reverses for lower learning rates, where higher values of input noise are beneficial. Though interesting this is not of any practical relevance because performance is generally bad in that region of low learning rates. Apart from this, however, it is difficult to discern any regularities in the analyzed hyperparameter interactions. We conclude that there is little practical value in attending to the interplay between hyperparameters. So for practical purposes hyperparameters can be treated as approximately independent and thus optimized separately."
        },
        {
            "heading": "VI. CONCLUSION",
            "text": "This paper reports the results of a large scale study on variants of the LSTM architecture. We conclude that the most commonly used LSTM architecture (vanilla LSTM) performs reasonably well on various datasets. None of the eight investigated modifications significantly improves performance. However, certain modifications such as coupling the input and\nforget gates (CIFG) or removing peephole connections (NP) simplified LSTMs in our experiments without significantly decreasing performance. These two variants are also attractive because they reduce the number of parameters and the computational cost of the LSTM.\nThe forget gate and the output activation function are the most critical components of the LSTM block. Removing any of them significantly impairs performance. We hypothesize that the output activation function is needed to prevent the unbounded cell state to propagate through the network and destabilize learning. This would explain why the LSTM variant GRU can perform reasonably well without it: its cell state is bounded because of the coupling of input and forget gate.\nAs expected, the learning rate is the most crucial hyperparameter, followed by the network size. Surprisingly though, the use of momentum was found to be unimportant in our setting of online gradient descent. Gaussian noise on the inputs was found to be moderately helpful for TIMIT, but harmful for the other datasets.\nThe analysis of hyperparameter interactions revealed no apparent structure. Furthermore, even the highest measured interaction (between learning rate and network size) is quite small. This implies that for practical purposes the hyperparameters can be treated as approximately independent. In particular, the learning rate can be tuned first using a fairly small network, thus saving a lot of experimentation time.\nNeural networks can be tricky to use for many practitioners compared to other methods whose properties are already well understood. This has remained a hurdle for newcomers to the field since a lot of practical choices are based on the intuitions of experts, as well as experiences gained over time. With this study, we have attempted to back some of these intuitions with experimental results. We have also presented new insights, both on architecture selection and hyperparameter tuning for LSTM networks which have emerged as the method of choice for solving complex sequence learning problems. In future work, we plan to explore more complex modifications of the LSTM architecture."
        }
    ],
    "title": "LSTM: A Search Space Odyssey",
    "year": 2017
}